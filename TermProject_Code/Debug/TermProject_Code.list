
TermProject_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008488  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008628  08008628  00009628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e0  080088e0  0000a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e8  080088e8  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e8  080088e8  000098e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088ec  080088ec  000098ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080088f0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200000a0  08008990  0000a0a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08008990  0000a5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114ce  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002572  00000000  00000000  0001b59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d94  00000000  00000000  0001ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184d1  00000000  00000000  0001f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d40  00000000  00000000  00037e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094576  00000000  00000000  0004bbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  000e0198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000e57c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008610 	.word	0x08008610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	08008610 	.word	0x08008610

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f000 fa44 	bl	8001334 <bno055_writeData>
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	203d      	movs	r0, #61	@ 0x3d
 8000ec4:	f000 fa36 	bl	8001334 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000ece:	2013      	movs	r0, #19
 8000ed0:	f000 fa24 	bl	800131c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ed4:	e002      	b.n	8000edc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f000 fa20 	bl	800131c <bno055_delay>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffe3 	bl	8000eb4 <bno055_setOperationMode>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000ef6:	200c      	movs	r0, #12
 8000ef8:	f7ff ffdc 	bl	8000eb4 <bno055_setOperationMode>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f04:	2120      	movs	r1, #32
 8000f06:	203f      	movs	r0, #63	@ 0x3f
 8000f08:	f000 fa14 	bl	8001334 <bno055_writeData>
  bno055_delay(700);
 8000f0c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000f10:	f000 fa04 	bl	800131c <bno055_delay>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f1e:	f7ff ffef 	bl	8000f00 <bno055_reset>

  uint8_t id = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 faed 	bl	800150c <bno055_readData>
  if (id != BNO055_ID) {
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f36:	d004      	beq.n	8000f42 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4809      	ldr	r0, [pc, #36]	@ (8000f64 <bno055_setup+0x4c>)
 8000f3e:	f005 fd0f 	bl	8006960 <iprintf>
  }
  bno055_setPage(0);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ffa8 	bl	8000e98 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	203f      	movs	r0, #63	@ 0x3f
 8000f4c:	f000 f9f2 	bl	8001334 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f50:	f7ff ffc8 	bl	8000ee4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f000 f9e1 	bl	800131c <bno055_delay>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08008628 	.word	0x08008628

08000f68 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f6c:	b09e      	sub	sp, #120	@ 0x78
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff8e 	bl	8000e98 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	d108      	bne.n	8000f96 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000f84:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fabc 	bl	800150c <bno055_readData>
 8000f94:	e007      	b.n	8000fa6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000f96:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f9e:	2206      	movs	r2, #6
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fab3 	bl	800150c <bno055_readData>

  double scale = 1;
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b8b      	ldr	r3, [pc, #556]	@ (80011d8 <bno055_getVector+0x270>)
 8000fac:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fb4:	2b0e      	cmp	r3, #14
 8000fb6:	d109      	bne.n	8000fcc <bno055_getVector+0x64>
    scale = magScale;
 8000fb8:	4b88      	ldr	r3, [pc, #544]	@ (80011dc <bno055_getVector+0x274>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff faa1 	bl	8000504 <__aeabi_ui2d>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8000fca:	e03e      	b.n	800104a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d007      	beq.n	8000fe4 <bno055_getVector+0x7c>
 8000fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd8:	2b28      	cmp	r3, #40	@ 0x28
 8000fda:	d003      	beq.n	8000fe4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fe0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fe2:	d109      	bne.n	8000ff8 <bno055_getVector+0x90>
    scale = accelScale;
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80011e0 <bno055_getVector+0x278>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa8b 	bl	8000504 <__aeabi_ui2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8000ff6:	e028      	b.n	800104a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ffc:	2b14      	cmp	r3, #20
 8000ffe:	d109      	bne.n	8001014 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001000:	4b78      	ldr	r3, [pc, #480]	@ (80011e4 <bno055_getVector+0x27c>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa7d 	bl	8000504 <__aeabi_ui2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001012:	e01a      	b.n	800104a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001018:	2b1a      	cmp	r3, #26
 800101a:	d109      	bne.n	8001030 <bno055_getVector+0xc8>
    scale = eulerScale;
 800101c:	4b72      	ldr	r3, [pc, #456]	@ (80011e8 <bno055_getVector+0x280>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa6f 	bl	8000504 <__aeabi_ui2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800102e:	e00c      	b.n	800104a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001034:	2b20      	cmp	r3, #32
 8001036:	d108      	bne.n	800104a <bno055_getVector+0xe2>
    scale = quaScale;
 8001038:	4b6c      	ldr	r3, [pc, #432]	@ (80011ec <bno055_getVector+0x284>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa61 	bl	8000504 <__aeabi_ui2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800104a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800104e:	2220      	movs	r2, #32
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f005 fdcc 	bl	8006bf0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800105c:	2b20      	cmp	r3, #32
 800105e:	d150      	bne.n	8001102 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001060:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa56 	bl	8000524 <__aeabi_i2d>
 8001078:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800107c:	f7ff fbe6 	bl	800084c <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001088:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa42 	bl	8000524 <__aeabi_i2d>
 80010a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80010a4:	f7ff fbd2 	bl	800084c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80010b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa2e 	bl	8000524 <__aeabi_i2d>
 80010c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80010cc:	f7ff fbbe 	bl	800084c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80010d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_i2d>
 80010f0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80010f4:	f7ff fbaa 	bl	800084c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001100:	e03b      	b.n	800117a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001102:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21b      	sxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa05 	bl	8000524 <__aeabi_i2d>
 800111a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800111e:	f7ff fb95 	bl	800084c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800112a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21b      	sxth	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9f1 	bl	8000524 <__aeabi_i2d>
 8001142:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001146:	f7ff fb81 	bl	800084c <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001152:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21b      	sxth	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9dd 	bl	8000524 <__aeabi_i2d>
 800116a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800116e:	f7ff fb6d 	bl	800084c <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 800117a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800117e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001186:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800118a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800118e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001192:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001196:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800119a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800119e:	ec49 8b14 	vmov	d4, r8, r9
 80011a2:	ec45 4b15 	vmov	d5, r4, r5
 80011a6:	ec41 0b16 	vmov	d6, r0, r1
 80011aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80011ae:	eeb0 0a44 	vmov.f32	s0, s8
 80011b2:	eef0 0a64 	vmov.f32	s1, s9
 80011b6:	eeb0 1a45 	vmov.f32	s2, s10
 80011ba:	eef0 1a65 	vmov.f32	s3, s11
 80011be:	eeb0 2a46 	vmov.f32	s4, s12
 80011c2:	eef0 2a66 	vmov.f32	s5, s13
 80011c6:	eeb0 3a47 	vmov.f32	s6, s14
 80011ca:	eef0 3a67 	vmov.f32	s7, s15
 80011ce:	3778      	adds	r7, #120	@ 0x78
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011d6:	bf00      	nop
 80011d8:	3ff00000 	.word	0x3ff00000
 80011dc:	20000006 	.word	0x20000006
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000002 	.word	0x20000002
 80011e8:	20000004 	.word	0x20000004
 80011ec:	20000008 	.word	0x20000008

080011f0 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80011f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f4:	b090      	sub	sp, #64	@ 0x40
 80011f6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80011f8:	201a      	movs	r0, #26
 80011fa:	f7ff feb5 	bl	8000f68 <bno055_getVector>
 80011fe:	eeb0 4a40 	vmov.f32	s8, s0
 8001202:	eef0 4a60 	vmov.f32	s9, s1
 8001206:	eeb0 5a41 	vmov.f32	s10, s2
 800120a:	eef0 5a61 	vmov.f32	s11, s3
 800120e:	eeb0 6a42 	vmov.f32	s12, s4
 8001212:	eef0 6a62 	vmov.f32	s13, s5
 8001216:	eeb0 7a43 	vmov.f32	s14, s6
 800121a:	eef0 7a63 	vmov.f32	s15, s7
 800121e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001222:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001226:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800122a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800122e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001232:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001236:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800123a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800123e:	ec49 8b14 	vmov	d4, r8, r9
 8001242:	ec45 4b15 	vmov	d5, r4, r5
 8001246:	ec41 0b16 	vmov	d6, r0, r1
 800124a:	ec43 2b17 	vmov	d7, r2, r3
}
 800124e:	eeb0 0a44 	vmov.f32	s0, s8
 8001252:	eef0 0a64 	vmov.f32	s1, s9
 8001256:	eeb0 1a45 	vmov.f32	s2, s10
 800125a:	eef0 1a65 	vmov.f32	s3, s11
 800125e:	eeb0 2a46 	vmov.f32	s4, s12
 8001262:	eef0 2a66 	vmov.f32	s5, s13
 8001266:	eeb0 3a47 	vmov.f32	s6, s14
 800126a:	eef0 3a67 	vmov.f32	s7, s15
 800126e:	3740      	adds	r7, #64	@ 0x40
 8001270:	46bd      	mov	sp, r7
 8001272:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001276 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8001276:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800127a:	b090      	sub	sp, #64	@ 0x40
 800127c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 800127e:	2028      	movs	r0, #40	@ 0x28
 8001280:	f7ff fe72 	bl	8000f68 <bno055_getVector>
 8001284:	eeb0 4a40 	vmov.f32	s8, s0
 8001288:	eef0 4a60 	vmov.f32	s9, s1
 800128c:	eeb0 5a41 	vmov.f32	s10, s2
 8001290:	eef0 5a61 	vmov.f32	s11, s3
 8001294:	eeb0 6a42 	vmov.f32	s12, s4
 8001298:	eef0 6a62 	vmov.f32	s13, s5
 800129c:	eeb0 7a43 	vmov.f32	s14, s6
 80012a0:	eef0 7a63 	vmov.f32	s15, s7
 80012a4:	ed87 4b08 	vstr	d4, [r7, #32]
 80012a8:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80012ac:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80012b0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80012b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012b8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80012bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80012c4:	ec49 8b14 	vmov	d4, r8, r9
 80012c8:	ec45 4b15 	vmov	d5, r4, r5
 80012cc:	ec41 0b16 	vmov	d6, r0, r1
 80012d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80012d4:	eeb0 0a44 	vmov.f32	s0, s8
 80012d8:	eef0 0a64 	vmov.f32	s1, s9
 80012dc:	eeb0 1a45 	vmov.f32	s2, s10
 80012e0:	eef0 1a65 	vmov.f32	s3, s11
 80012e4:	eeb0 2a46 	vmov.f32	s4, s12
 80012e8:	eef0 2a66 	vmov.f32	s5, s13
 80012ec:	eeb0 3a47 	vmov.f32	s6, s14
 80012f0:	eef0 3a67 	vmov.f32	s7, s15
 80012f4:	3740      	adds	r7, #64	@ 0x40
 80012f6:	46bd      	mov	sp, r7
 80012f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080012fc <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <bno055_assignI2C+0x1c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200000bc 	.word	0x200000bc

0800131c <bno055_delay>:

void bno055_delay(int time) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fe28 	bl	8002f7c <HAL_Delay>
#endif
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af02      	add	r7, sp, #8
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	733b      	strb	r3, [r7, #12]
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800134c:	4b5a      	ldr	r3, [pc, #360]	@ (80014b8 <bno055_writeData+0x184>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	f107 020c 	add.w	r2, r7, #12
 8001354:	230a      	movs	r3, #10
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2302      	movs	r3, #2
 800135a:	2150      	movs	r1, #80	@ 0x50
 800135c:	f002 fa26 	bl	80037ac <HAL_I2C_Master_Transmit>
 8001360:	4603      	mov	r3, r0
 8001362:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80a0 	beq.w	80014ac <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d103      	bne.n	800137a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001372:	4852      	ldr	r0, [pc, #328]	@ (80014bc <bno055_writeData+0x188>)
 8001374:	f005 fb5c 	bl	8006a30 <puts>
 8001378:	e012      	b.n	80013a0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d103      	bne.n	8001388 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001380:	484f      	ldr	r0, [pc, #316]	@ (80014c0 <bno055_writeData+0x18c>)
 8001382:	f005 fb55 	bl	8006a30 <puts>
 8001386:	e00b      	b.n	80013a0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d103      	bne.n	8001396 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800138e:	484d      	ldr	r0, [pc, #308]	@ (80014c4 <bno055_writeData+0x190>)
 8001390:	f005 fb4e 	bl	8006a30 <puts>
 8001394:	e004      	b.n	80013a0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	4619      	mov	r1, r3
 800139a:	484b      	ldr	r0, [pc, #300]	@ (80014c8 <bno055_writeData+0x194>)
 800139c:	f005 fae0 	bl	8006960 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80013a0:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <bno055_writeData+0x184>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fd3f 	bl	8003e28 <HAL_I2C_GetError>
 80013aa:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d07e      	beq.n	80014b0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d103      	bne.n	80013c0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80013b8:	4844      	ldr	r0, [pc, #272]	@ (80014cc <bno055_writeData+0x198>)
 80013ba:	f005 fb39 	bl	8006a30 <puts>
 80013be:	e021      	b.n	8001404 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d103      	bne.n	80013ce <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80013c6:	4842      	ldr	r0, [pc, #264]	@ (80014d0 <bno055_writeData+0x19c>)
 80013c8:	f005 fb32 	bl	8006a30 <puts>
 80013cc:	e01a      	b.n	8001404 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d103      	bne.n	80013dc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80013d4:	483f      	ldr	r0, [pc, #252]	@ (80014d4 <bno055_writeData+0x1a0>)
 80013d6:	f005 fb2b 	bl	8006a30 <puts>
 80013da:	e013      	b.n	8001404 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d103      	bne.n	80013ea <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80013e2:	483d      	ldr	r0, [pc, #244]	@ (80014d8 <bno055_writeData+0x1a4>)
 80013e4:	f005 fb24 	bl	8006a30 <puts>
 80013e8:	e00c      	b.n	8001404 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	2b10      	cmp	r3, #16
 80013ee:	d103      	bne.n	80013f8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80013f0:	483a      	ldr	r0, [pc, #232]	@ (80014dc <bno055_writeData+0x1a8>)
 80013f2:	f005 fb1d 	bl	8006a30 <puts>
 80013f6:	e005      	b.n	8001404 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	d102      	bne.n	8001404 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80013fe:	4838      	ldr	r0, [pc, #224]	@ (80014e0 <bno055_writeData+0x1ac>)
 8001400:	f005 fb16 	bl	8006a30 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <bno055_writeData+0x184>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fcff 	bl	8003e0c <HAL_I2C_GetState>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d103      	bne.n	8001420 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001418:	4832      	ldr	r0, [pc, #200]	@ (80014e4 <bno055_writeData+0x1b0>)
 800141a:	f005 fb09 	bl	8006a30 <puts>
 800141e:	e048      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b20      	cmp	r3, #32
 8001424:	d103      	bne.n	800142e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001426:	482f      	ldr	r0, [pc, #188]	@ (80014e4 <bno055_writeData+0x1b0>)
 8001428:	f005 fb02 	bl	8006a30 <puts>
 800142c:	e041      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b24      	cmp	r3, #36	@ 0x24
 8001432:	d103      	bne.n	800143c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001434:	482c      	ldr	r0, [pc, #176]	@ (80014e8 <bno055_writeData+0x1b4>)
 8001436:	f005 fafb 	bl	8006a30 <puts>
 800143a:	e03a      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b21      	cmp	r3, #33	@ 0x21
 8001440:	d103      	bne.n	800144a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001442:	482a      	ldr	r0, [pc, #168]	@ (80014ec <bno055_writeData+0x1b8>)
 8001444:	f005 faf4 	bl	8006a30 <puts>
 8001448:	e033      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b22      	cmp	r3, #34	@ 0x22
 800144e:	d103      	bne.n	8001458 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001450:	4827      	ldr	r0, [pc, #156]	@ (80014f0 <bno055_writeData+0x1bc>)
 8001452:	f005 faed 	bl	8006a30 <puts>
 8001456:	e02c      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b28      	cmp	r3, #40	@ 0x28
 800145c:	d103      	bne.n	8001466 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800145e:	4825      	ldr	r0, [pc, #148]	@ (80014f4 <bno055_writeData+0x1c0>)
 8001460:	f005 fae6 	bl	8006a30 <puts>
 8001464:	e025      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b29      	cmp	r3, #41	@ 0x29
 800146a:	d103      	bne.n	8001474 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800146c:	4822      	ldr	r0, [pc, #136]	@ (80014f8 <bno055_writeData+0x1c4>)
 800146e:	f005 fadf 	bl	8006a30 <puts>
 8001472:	e01e      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b2a      	cmp	r3, #42	@ 0x2a
 8001478:	d103      	bne.n	8001482 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800147a:	4820      	ldr	r0, [pc, #128]	@ (80014fc <bno055_writeData+0x1c8>)
 800147c:	f005 fad8 	bl	8006a30 <puts>
 8001480:	e017      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b60      	cmp	r3, #96	@ 0x60
 8001486:	d103      	bne.n	8001490 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001488:	481d      	ldr	r0, [pc, #116]	@ (8001500 <bno055_writeData+0x1cc>)
 800148a:	f005 fad1 	bl	8006a30 <puts>
 800148e:	e010      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2ba0      	cmp	r3, #160	@ 0xa0
 8001494:	d103      	bne.n	800149e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001496:	481b      	ldr	r0, [pc, #108]	@ (8001504 <bno055_writeData+0x1d0>)
 8001498:	f005 faca 	bl	8006a30 <puts>
 800149c:	e009      	b.n	80014b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2be0      	cmp	r3, #224	@ 0xe0
 80014a2:	d106      	bne.n	80014b2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80014a4:	4818      	ldr	r0, [pc, #96]	@ (8001508 <bno055_writeData+0x1d4>)
 80014a6:	f005 fac3 	bl	8006a30 <puts>
 80014aa:	e002      	b.n	80014b2 <bno055_writeData+0x17e>
    return;
 80014ac:	bf00      	nop
 80014ae:	e000      	b.n	80014b2 <bno055_writeData+0x17e>
    return;
 80014b0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200000bc 	.word	0x200000bc
 80014bc:	08008664 	.word	0x08008664
 80014c0:	08008688 	.word	0x08008688
 80014c4:	080086b0 	.word	0x080086b0
 80014c8:	080086d4 	.word	0x080086d4
 80014cc:	080086ec 	.word	0x080086ec
 80014d0:	08008700 	.word	0x08008700
 80014d4:	08008714 	.word	0x08008714
 80014d8:	08008728 	.word	0x08008728
 80014dc:	0800873c 	.word	0x0800873c
 80014e0:	08008750 	.word	0x08008750
 80014e4:	08008768 	.word	0x08008768
 80014e8:	08008780 	.word	0x08008780
 80014ec:	08008794 	.word	0x08008794
 80014f0:	080087ac 	.word	0x080087ac
 80014f4:	080087c4 	.word	0x080087c4
 80014f8:	080087dc 	.word	0x080087dc
 80014fc:	080087fc 	.word	0x080087fc
 8001500:	0800881c 	.word	0x0800881c
 8001504:	08008834 	.word	0x08008834
 8001508:	0800884c 	.word	0x0800884c

0800150c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af02      	add	r7, sp, #8
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <bno055_readData+0x40>)
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	1dfa      	adds	r2, r7, #7
 8001522:	2364      	movs	r3, #100	@ 0x64
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	2150      	movs	r1, #80	@ 0x50
 800152a:	f002 f93f 	bl	80037ac <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <bno055_readData+0x40>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	b29b      	uxth	r3, r3
 8001536:	2264      	movs	r2, #100	@ 0x64
 8001538:	9200      	str	r2, [sp, #0]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	2150      	movs	r1, #80	@ 0x50
 800153e:	f002 fa33 	bl	80039a8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000bc 	.word	0x200000bc

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b092      	sub	sp, #72	@ 0x48
 8001554:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001556:	f001 fc9f 	bl	8002e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155a:	f000 fa51 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155e:	f000 fc57 	bl	8001e10 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001562:	f000 fc2b 	bl	8001dbc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001566:	f000 fab3 	bl	8001ad0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800156a:	f000 fadf 	bl	8001b2c <MX_I2C2_Init>
  MX_TIM3_Init();
 800156e:	f000 fb63 	bl	8001c38 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001572:	f000 fbbf 	bl	8001cf4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001576:	f000 fb07 	bl	8001b88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize BNO

  bno055_assignI2C(&hi2c1);
 800157a:	48cf      	ldr	r0, [pc, #828]	@ (80018b8 <main+0x368>)
 800157c:	f7ff febe 	bl	80012fc <bno055_assignI2C>
  bno055_setup();
 8001580:	f7ff fcca 	bl	8000f18 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001584:	f7ff fcb5 	bl	8000ef2 <bno055_setOperationModeNDOF>

  // Initialize PID's ( NEED TO LOOK INTO SAMPLETIME AND STUFF FOR OUR MCU I THINK?)

  PID_SetMode(&VEL_PID, _PID_MODE_AUTOMATIC);
 8001588:	2101      	movs	r1, #1
 800158a:	48cc      	ldr	r0, [pc, #816]	@ (80018bc <main+0x36c>)
 800158c:	f000 ffca 	bl	8002524 <PID_SetMode>
  PID_SetSampleTime(&VEL_PID, 500);
 8001590:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001594:	48c9      	ldr	r0, [pc, #804]	@ (80018bc <main+0x36c>)
 8001596:	f001 f939 	bl	800280c <PID_SetSampleTime>
  PID_SetOutputLimits(&VEL_PID, 1, 100);
 800159a:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 8001898 <main+0x348>
 800159e:	ed9f 0bc0 	vldr	d0, [pc, #768]	@ 80018a0 <main+0x350>
 80015a2:	48c6      	ldr	r0, [pc, #792]	@ (80018bc <main+0x36c>)
 80015a4:	f000 ffdc 	bl	8002560 <PID_SetOutputLimits>

  PID(&VEL_PID, &Vel_total, &VEL_PIDOut, &Vel_Setpoint, 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 80015a8:	2300      	movs	r3, #0
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2301      	movs	r3, #1
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	ed9f 2bbb 	vldr	d2, [pc, #748]	@ 80018a0 <main+0x350>
 80015b4:	ed9f 1bbc 	vldr	d1, [pc, #752]	@ 80018a8 <main+0x358>
 80015b8:	ed9f 0bbd 	vldr	d0, [pc, #756]	@ 80018b0 <main+0x360>
 80015bc:	4bc0      	ldr	r3, [pc, #768]	@ (80018c0 <main+0x370>)
 80015be:	4ac1      	ldr	r2, [pc, #772]	@ (80018c4 <main+0x374>)
 80015c0:	49c1      	ldr	r1, [pc, #772]	@ (80018c8 <main+0x378>)
 80015c2:	48be      	ldr	r0, [pc, #760]	@ (80018bc <main+0x36c>)
 80015c4:	f000 fe78 	bl	80022b8 <PID>

  PID_SetMode(&ACCEL_PID, _PID_MODE_AUTOMATIC);
 80015c8:	2101      	movs	r1, #1
 80015ca:	48c0      	ldr	r0, [pc, #768]	@ (80018cc <main+0x37c>)
 80015cc:	f000 ffaa 	bl	8002524 <PID_SetMode>
  PID_SetSampleTime(&ACCEL_PID, 500);
 80015d0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80015d4:	48bd      	ldr	r0, [pc, #756]	@ (80018cc <main+0x37c>)
 80015d6:	f001 f919 	bl	800280c <PID_SetSampleTime>
  PID_SetOutputLimits(&ACCEL_PID, 1, 100);
 80015da:	ed9f 1baf 	vldr	d1, [pc, #700]	@ 8001898 <main+0x348>
 80015de:	ed9f 0bb0 	vldr	d0, [pc, #704]	@ 80018a0 <main+0x350>
 80015e2:	48ba      	ldr	r0, [pc, #744]	@ (80018cc <main+0x37c>)
 80015e4:	f000 ffbc 	bl	8002560 <PID_SetOutputLimits>

  PID(&ACCEL_PID, &Accel_Total, &ACC_PIDOut, &VEL_PIDOut, 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 80015e8:	2300      	movs	r3, #0
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	ed9f 2bab 	vldr	d2, [pc, #684]	@ 80018a0 <main+0x350>
 80015f4:	ed9f 1bac 	vldr	d1, [pc, #688]	@ 80018a8 <main+0x358>
 80015f8:	ed9f 0bad 	vldr	d0, [pc, #692]	@ 80018b0 <main+0x360>
 80015fc:	4bb1      	ldr	r3, [pc, #708]	@ (80018c4 <main+0x374>)
 80015fe:	4ab4      	ldr	r2, [pc, #720]	@ (80018d0 <main+0x380>)
 8001600:	49b4      	ldr	r1, [pc, #720]	@ (80018d4 <main+0x384>)
 8001602:	48b2      	ldr	r0, [pc, #712]	@ (80018cc <main+0x37c>)
 8001604:	f000 fe58 	bl	80022b8 <PID>

  PID_SetMode(&PITCH_PID, _PID_MODE_AUTOMATIC);
 8001608:	2101      	movs	r1, #1
 800160a:	48b3      	ldr	r0, [pc, #716]	@ (80018d8 <main+0x388>)
 800160c:	f000 ff8a 	bl	8002524 <PID_SetMode>
  PID_SetSampleTime(&PITCH_PID, 500);
 8001610:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001614:	48b0      	ldr	r0, [pc, #704]	@ (80018d8 <main+0x388>)
 8001616:	f001 f8f9 	bl	800280c <PID_SetSampleTime>
  PID_SetOutputLimits(&PITCH_PID, 1, 100);
 800161a:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8001898 <main+0x348>
 800161e:	ed9f 0ba0 	vldr	d0, [pc, #640]	@ 80018a0 <main+0x350>
 8001622:	48ad      	ldr	r0, [pc, #692]	@ (80018d8 <main+0x388>)
 8001624:	f000 ff9c 	bl	8002560 <PID_SetOutputLimits>

  PID(&PITCH_PID, &Pitch, &PITCH_PIDOut, &ACC_PIDOut, 2, 5, 1, _PID_P_ON_E, _PID_CD_DIRECT);
 8001628:	2300      	movs	r3, #0
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2301      	movs	r3, #1
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	ed9f 2b9b 	vldr	d2, [pc, #620]	@ 80018a0 <main+0x350>
 8001634:	ed9f 1b9c 	vldr	d1, [pc, #624]	@ 80018a8 <main+0x358>
 8001638:	ed9f 0b9d 	vldr	d0, [pc, #628]	@ 80018b0 <main+0x360>
 800163c:	4ba4      	ldr	r3, [pc, #656]	@ (80018d0 <main+0x380>)
 800163e:	4aa7      	ldr	r2, [pc, #668]	@ (80018dc <main+0x38c>)
 8001640:	49a7      	ldr	r1, [pc, #668]	@ (80018e0 <main+0x390>)
 8001642:	48a5      	ldr	r0, [pc, #660]	@ (80018d8 <main+0x388>)
 8001644:	f000 fe38 	bl	80022b8 <PID>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Enable Encoder mode on TIM3
 8001648:	213c      	movs	r1, #60	@ 0x3c
 800164a:	48a6      	ldr	r0, [pc, #664]	@ (80018e4 <main+0x394>)
 800164c:	f003 fee6 	bl	800541c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Enable Encoder mode on TIM1
 8001650:	213c      	movs	r1, #60	@ 0x3c
 8001652:	48a5      	ldr	r0, [pc, #660]	@ (80018e8 <main+0x398>)
 8001654:	f003 fee2 	bl	800541c <HAL_TIM_Encoder_Start>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);  // Enable Interrupts for E-Stop
 8001658:	2108      	movs	r1, #8
 800165a:	48a2      	ldr	r0, [pc, #648]	@ (80018e4 <main+0x394>)
 800165c:	f003 fd1e 	bl	800509c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8001660:	210c      	movs	r1, #12
 8001662:	48a0      	ldr	r0, [pc, #640]	@ (80018e4 <main+0x394>)
 8001664:	f003 fd1a 	bl	800509c <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);    // Enable PWM for motor driver input
 8001668:	2108      	movs	r1, #8
 800166a:	48a0      	ldr	r0, [pc, #640]	@ (80018ec <main+0x39c>)
 800166c:	f003 fc16 	bl	8004e9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001670:	210c      	movs	r1, #12
 8001672:	489e      	ldr	r0, [pc, #632]	@ (80018ec <main+0x39c>)
 8001674:	f003 fc12 	bl	8004e9c <HAL_TIM_PWM_Start>
	  // Code to set Velocity Setpoint to RC input

	  // Not sure if a negative vel setpoint will work or what magnitude
	  // will work for the controller but we can tune the factor with the controllers

	  Vel_Setpoint = ((usWidth2 - 1500) / Vel_Setpoint_Factor);
 8001678:	4b9d      	ldr	r3, [pc, #628]	@ (80018f0 <main+0x3a0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001680:	4a9c      	ldr	r2, [pc, #624]	@ (80018f4 <main+0x3a4>)
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	fbb3 f3f2 	udiv	r3, r3, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff3b 	bl	8000504 <__aeabi_ui2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	498b      	ldr	r1, [pc, #556]	@ (80018c0 <main+0x370>)
 8001694:	e9c1 2300 	strd	r2, r3, [r1]


	  // Get BNO Angles for PID
	  // (Really only need the pitch; Also depends on where we secure it)

	  bno055_vector_t a = bno055_getVectorEuler();
 8001698:	f7ff fdaa 	bl	80011f0 <bno055_getVectorEuler>
 800169c:	eeb0 4a40 	vmov.f32	s8, s0
 80016a0:	eef0 4a60 	vmov.f32	s9, s1
 80016a4:	eeb0 5a41 	vmov.f32	s10, s2
 80016a8:	eef0 5a61 	vmov.f32	s11, s3
 80016ac:	eeb0 6a42 	vmov.f32	s12, s4
 80016b0:	eef0 6a62 	vmov.f32	s13, s5
 80016b4:	eeb0 7a43 	vmov.f32	s14, s6
 80016b8:	eef0 7a63 	vmov.f32	s15, s7
 80016bc:	ed87 4b00 	vstr	d4, [r7]
 80016c0:	ed87 5b02 	vstr	d5, [r7, #8]
 80016c4:	ed87 6b04 	vstr	d6, [r7, #16]
 80016c8:	ed87 7b06 	vstr	d7, [r7, #24]
	  Heading = a.x;
 80016cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa40 	bl	8000b58 <__aeabi_d2iz>
 80016d8:	4603      	mov	r3, r0
 80016da:	4a87      	ldr	r2, [pc, #540]	@ (80018f8 <main+0x3a8>)
 80016dc:	6013      	str	r3, [r2, #0]
	  Roll = a.y;
 80016de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa37 	bl	8000b58 <__aeabi_d2iz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a83      	ldr	r2, [pc, #524]	@ (80018fc <main+0x3ac>)
 80016ee:	6013      	str	r3, [r2, #0]
	  Pitch = a.z;
 80016f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f4:	497a      	ldr	r1, [pc, #488]	@ (80018e0 <main+0x390>)
 80016f6:	e9c1 2300 	strd	r2, r3, [r1]


	  // Get BNO055 Linear Accel Data to Calculate Vel for PID
	  // And use Accel for other PID

	  bno055_vector_t v = bno055_getVectorLinearAccel();
 80016fa:	f7ff fdbc 	bl	8001276 <bno055_getVectorLinearAccel>
 80016fe:	eeb0 4a40 	vmov.f32	s8, s0
 8001702:	eef0 4a60 	vmov.f32	s9, s1
 8001706:	eeb0 5a41 	vmov.f32	s10, s2
 800170a:	eef0 5a61 	vmov.f32	s11, s3
 800170e:	eeb0 6a42 	vmov.f32	s12, s4
 8001712:	eef0 6a62 	vmov.f32	s13, s5
 8001716:	eeb0 7a43 	vmov.f32	s14, s6
 800171a:	eef0 7a63 	vmov.f32	s15, s7
 800171e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001722:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001726:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800172a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	  if ( (Vel_Capture = 1) ){
 800172e:	4b74      	ldr	r3, [pc, #464]	@ (8001900 <main+0x3b0>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
		  Vel_x = (Vel_x_Cap - v.x) / BNO_SampleRate;   // BNO_SampleRate is a placeholder until
 8001734:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <main+0x3b4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fef3 	bl	8000524 <__aeabi_i2d>
 800173e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001742:	f7fe fda1 	bl	8000288 <__aeabi_dsub>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	4b6e      	ldr	r3, [pc, #440]	@ (8001908 <main+0x3b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fee6 	bl	8000524 <__aeabi_i2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7ff f874 	bl	800084c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f9f4 	bl	8000b58 <__aeabi_d2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	4a66      	ldr	r2, [pc, #408]	@ (800190c <main+0x3bc>)
 8001774:	6013      	str	r3, [r2, #0]
		  Vel_y = (Vel_y_Cap - v.y) / BNO_SampleRate;   // I can figure out how to set it or
 8001776:	4b66      	ldr	r3, [pc, #408]	@ (8001910 <main+0x3c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fed2 	bl	8000524 <__aeabi_i2d>
 8001780:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001784:	f7fe fd80 	bl	8000288 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <main+0x3b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fec5 	bl	8000524 <__aeabi_i2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4620      	mov	r0, r4
 80017a0:	4629      	mov	r1, r5
 80017a2:	f7ff f853 	bl	800084c <__aeabi_ddiv>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f9d3 	bl	8000b58 <__aeabi_d2iz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a57      	ldr	r2, [pc, #348]	@ (8001914 <main+0x3c4>)
 80017b6:	6013      	str	r3, [r2, #0]
		  Vel_z = (Vel_z_Cap - v.z) / BNO_SampleRate;   // Find it
 80017b8:	4b57      	ldr	r3, [pc, #348]	@ (8001918 <main+0x3c8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe feb1 	bl	8000524 <__aeabi_i2d>
 80017c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017c6:	f7fe fd5f 	bl	8000288 <__aeabi_dsub>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001908 <main+0x3b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fea4 	bl	8000524 <__aeabi_i2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7ff f832 	bl	800084c <__aeabi_ddiv>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9b2 	bl	8000b58 <__aeabi_d2iz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a49      	ldr	r2, [pc, #292]	@ (800191c <main+0x3cc>)
 80017f8:	6013      	str	r3, [r2, #0]

		  Vel_total = sqrt(pow(Vel_x,2) + pow(Vel_y,2));  // Vel Plugged into PID
 80017fa:	4b44      	ldr	r3, [pc, #272]	@ (800190c <main+0x3bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe90 	bl	8000524 <__aeabi_i2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 80018b0 <main+0x360>
 800180c:	ec43 2b10 	vmov	d0, r2, r3
 8001810:	f005 ff72 	bl	80076f8 <pow>
 8001814:	ec55 4b10 	vmov	r4, r5, d0
 8001818:	4b3e      	ldr	r3, [pc, #248]	@ (8001914 <main+0x3c4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe81 	bl	8000524 <__aeabi_i2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 80018b0 <main+0x360>
 800182a:	ec43 2b10 	vmov	d0, r2, r3
 800182e:	f005 ff63 	bl	80076f8 <pow>
 8001832:	ec53 2b10 	vmov	r2, r3, d0
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7fe fd27 	bl	800028c <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	ec43 2b17 	vmov	d7, r2, r3
 8001846:	eeb0 0a47 	vmov.f32	s0, s14
 800184a:	eef0 0a67 	vmov.f32	s1, s15
 800184e:	f005 ffc3 	bl	80077d8 <sqrt>
 8001852:	eeb0 7a40 	vmov.f32	s14, s0
 8001856:	eef0 7a60 	vmov.f32	s15, s1
 800185a:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <main+0x378>)
 800185c:	ed83 7b00 	vstr	d7, [r3]
	  }

	  // There is code to get the velocity from BNO as well as encoder

	  Vel_x_Cap = v.x;  // First Captures for Vel Calcs
 8001860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f976 	bl	8000b58 <__aeabi_d2iz>
 800186c:	4603      	mov	r3, r0
 800186e:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <main+0x3b4>)
 8001870:	6013      	str	r3, [r2, #0]
	  Vel_y_Cap = v.y;
 8001872:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f96d 	bl	8000b58 <__aeabi_d2iz>
 800187e:	4603      	mov	r3, r0
 8001880:	4a23      	ldr	r2, [pc, #140]	@ (8001910 <main+0x3c0>)
 8001882:	6013      	str	r3, [r2, #0]
	  Vel_z_Cap = v.z;
 8001884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f964 	bl	8000b58 <__aeabi_d2iz>
 8001890:	e046      	b.n	8001920 <main+0x3d0>
 8001892:	bf00      	nop
 8001894:	f3af 8000 	nop.w
 8001898:	00000000 	.word	0x00000000
 800189c:	40590000 	.word	0x40590000
 80018a0:	00000000 	.word	0x00000000
 80018a4:	3ff00000 	.word	0x3ff00000
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40140000 	.word	0x40140000
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40000000 	.word	0x40000000
 80018b8:	20000210 	.word	0x20000210
 80018bc:	200000c0 	.word	0x200000c0
 80018c0:	20000458 	.word	0x20000458
 80018c4:	20000450 	.word	0x20000450
 80018c8:	20000448 	.word	0x20000448
 80018cc:	20000130 	.word	0x20000130
 80018d0:	20000470 	.word	0x20000470
 80018d4:	20000468 	.word	0x20000468
 80018d8:	200001a0 	.word	0x200001a0
 80018dc:	20000420 	.word	0x20000420
 80018e0:	20000418 	.word	0x20000418
 80018e4:	20000300 	.word	0x20000300
 80018e8:	200002b8 	.word	0x200002b8
 80018ec:	20000348 	.word	0x20000348
 80018f0:	20000404 	.word	0x20000404
 80018f4:	20000460 	.word	0x20000460
 80018f8:	2000040c 	.word	0x2000040c
 80018fc:	20000410 	.word	0x20000410
 8001900:	20000440 	.word	0x20000440
 8001904:	20000434 	.word	0x20000434
 8001908:	20000408 	.word	0x20000408
 800190c:	20000428 	.word	0x20000428
 8001910:	20000438 	.word	0x20000438
 8001914:	2000042c 	.word	0x2000042c
 8001918:	2000043c 	.word	0x2000043c
 800191c:	20000430 	.word	0x20000430
 8001920:	4603      	mov	r3, r0
 8001922:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <main+0x480>)
 8001924:	6013      	str	r3, [r2, #0]

	  Accel_Total = sqrt(pow(Vel_x_Cap,2) + pow(Vel_y_Cap,2));
 8001926:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <main+0x484>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fdfa 	bl	8000524 <__aeabi_i2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 80019c8 <main+0x478>
 8001938:	ec43 2b10 	vmov	d0, r2, r3
 800193c:	f005 fedc 	bl	80076f8 <pow>
 8001940:	ec55 4b10 	vmov	r4, r5, d0
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <main+0x488>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdeb 	bl	8000524 <__aeabi_i2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 80019c8 <main+0x478>
 8001956:	ec43 2b10 	vmov	d0, r2, r3
 800195a:	f005 fecd 	bl	80076f8 <pow>
 800195e:	ec53 2b10 	vmov	r2, r3, d0
 8001962:	4620      	mov	r0, r4
 8001964:	4629      	mov	r1, r5
 8001966:	f7fe fc91 	bl	800028c <__adddf3>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ec43 2b17 	vmov	d7, r2, r3
 8001972:	eeb0 0a47 	vmov.f32	s0, s14
 8001976:	eef0 0a67 	vmov.f32	s1, s15
 800197a:	f005 ff2d 	bl	80077d8 <sqrt>
 800197e:	eeb0 7a40 	vmov.f32	s14, s0
 8001982:	eef0 7a60 	vmov.f32	s15, s1
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <main+0x48c>)
 8001988:	ed83 7b00 	vstr	d7, [r3]

	  Vel_Capture = 1;    // Initial Accel Captured for Vel Calc
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <main+0x490>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

	  // Compute PID's

	  PID_Compute(&VEL_PID);			// Might need to have some sort of delays in all of this
 8001992:	4814      	ldr	r0, [pc, #80]	@ (80019e4 <main+0x494>)
 8001994:	f000 fcdc 	bl	8002350 <PID_Compute>
	  PID_Compute(&ACCEL_PID);			// But the idea is there for sure
 8001998:	4813      	ldr	r0, [pc, #76]	@ (80019e8 <main+0x498>)
 800199a:	f000 fcd9 	bl	8002350 <PID_Compute>
	  PID_Compute(&PITCH_PID);
 800199e:	4813      	ldr	r0, [pc, #76]	@ (80019ec <main+0x49c>)
 80019a0:	f000 fcd6 	bl	8002350 <PID_Compute>

	  duty = &PITCH_PIDOut;   // Not sure about the types here for the pointer
 80019a4:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <main+0x4a0>)
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <main+0x4a4>)
 80019a8:	601a      	str	r2, [r3, #0]
	  	  	  	  	  	  	  // (It's only a warning but idk if it'll mess up the code)

	  set_duty(&mot1,duty);	// Set Duty Cycles to Output of Final PID in Cascade
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <main+0x4a4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4811      	ldr	r0, [pc, #68]	@ (80019f8 <main+0x4a8>)
 80019b2:	f000 fc03 	bl	80021bc <set_duty>
	  set_duty(&mot2,-duty);
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <main+0x4a4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	425b      	negs	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	480f      	ldr	r0, [pc, #60]	@ (80019fc <main+0x4ac>)
 80019c0:	f000 fbfc 	bl	80021bc <set_duty>
  {
 80019c4:	e658      	b.n	8001678 <main+0x128>
 80019c6:	bf00      	nop
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40000000 	.word	0x40000000
 80019d0:	2000043c 	.word	0x2000043c
 80019d4:	20000434 	.word	0x20000434
 80019d8:	20000438 	.word	0x20000438
 80019dc:	20000468 	.word	0x20000468
 80019e0:	20000440 	.word	0x20000440
 80019e4:	200000c0 	.word	0x200000c0
 80019e8:	20000130 	.word	0x20000130
 80019ec:	200001a0 	.word	0x200001a0
 80019f0:	20000420 	.word	0x20000420
 80019f4:	2000049c 	.word	0x2000049c
 80019f8:	2000000c 	.word	0x2000000c
 80019fc:	20000018 	.word	0x20000018

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	@ 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2230      	movs	r2, #48	@ 0x30
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f005 f8ee 	bl	8006bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <SystemClock_Config+0xc8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <SystemClock_Config+0xc8>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a34:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <SystemClock_Config+0xc8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <SystemClock_Config+0xcc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a20      	ldr	r2, [pc, #128]	@ (8001acc <SystemClock_Config+0xcc>)
 8001a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <SystemClock_Config+0xcc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a70:	2319      	movs	r3, #25
 8001a72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a74:	23c0      	movs	r3, #192	@ 0xc0
 8001a76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fd61 	bl	800454c <HAL_RCC_OscConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a90:	f000 fb8e 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a94:	230f      	movs	r3, #15
 8001a96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	2103      	movs	r1, #3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 ffc3 	bl	8004a3c <HAL_RCC_ClockConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001abc:	f000 fb78 	bl	80021b0 <Error_Handler>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3750      	adds	r7, #80	@ 0x50
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000

08001ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001ad6:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <MX_I2C1_Init+0x54>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001adc:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <MX_I2C1_Init+0x58>)
 8001ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001b0e:	f001 fd09 	bl	8003524 <HAL_I2C_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b18:	f000 fb4a 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000210 	.word	0x20000210
 8001b24:	40005400 	.word	0x40005400
 8001b28:	000186a0 	.word	0x000186a0

08001b2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	@ (8001b80 <MX_I2C2_Init+0x54>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b38:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <MX_I2C2_Init+0x58>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	@ (8001b7c <MX_I2C2_Init+0x50>)
 8001b6a:	f001 fcdb 	bl	8003524 <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b74:	f000 fb1c 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000264 	.word	0x20000264
 8001b80:	40005800 	.word	0x40005800
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	@ 0x30
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2224      	movs	r2, #36	@ 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 f82a 	bl	8006bf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba4:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001ba6:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <MX_TIM1_Init+0xac>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001baa:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480d      	ldr	r0, [pc, #52]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001bfc:	f003 fb68 	bl	80052d0 <HAL_TIM_Encoder_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c06:	f000 fad3 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <MX_TIM1_Init+0xa8>)
 8001c18:	f004 fa9a 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c22:	f000 fac5 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	3730      	adds	r7, #48	@ 0x30
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200002b8 	.word	0x200002b8
 8001c34:	40010000 	.word	0x40010000

08001c38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <MX_TIM3_Init+0xb8>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001c7a:	481c      	ldr	r0, [pc, #112]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c7c:	f003 f9be 	bl	8004ffc <HAL_TIM_IC_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c86:	f000 fa93 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4619      	mov	r1, r3
 8001c98:	4814      	ldr	r0, [pc, #80]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001c9a:	f004 fa59 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ca4:	f000 fa84 	bl	80021b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ca8:	230a      	movs	r3, #10
 8001caa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cac:	2301      	movs	r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2208      	movs	r2, #8
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480b      	ldr	r0, [pc, #44]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001cc0:	f003 fd2a 	bl	8005718 <HAL_TIM_IC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001cca:	f000 fa71 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	220c      	movs	r2, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_TIM3_Init+0xb4>)
 8001cd6:	f003 fd1f 	bl	8005718 <HAL_TIM_IC_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001ce0:	f000 fa66 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000300 	.word	0x20000300
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d16:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d18:	4a27      	ldr	r2, [pc, #156]	@ (8001db8 <MX_TIM4_Init+0xc4>)
 8001d1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d28:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d30:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d3c:	481d      	ldr	r0, [pc, #116]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d3e:	f003 f85d 	bl	8004dfc <HAL_TIM_PWM_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d48:	f000 fa32 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4816      	ldr	r0, [pc, #88]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d5c:	f004 f9f8 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d66:	f000 fa23 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6a:	2360      	movs	r3, #96	@ 0x60
 8001d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d82:	f003 fd65 	bl	8005850 <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d8c:	f000 fa10 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	220c      	movs	r2, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001d98:	f003 fd5a 	bl	8005850 <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001da2:	f000 fa05 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001da6:	4803      	ldr	r0, [pc, #12]	@ (8001db4 <MX_TIM4_Init+0xc0>)
 8001da8:	f000 feda 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	@ 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000348 	.word	0x20000348
 8001db8:	40000800 	.word	0x40000800

08001dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <MX_USART1_UART_Init+0x50>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f004 fa2e 	bl	8006254 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dfe:	f000 f9d7 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000390 	.word	0x20000390
 8001e0c:	40011000 	.word	0x40011000

08001e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_GPIO_Init+0x98>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	211e      	movs	r1, #30
 8001e7e:	480b      	ldr	r0, [pc, #44]	@ (8001eac <MX_GPIO_Init+0x9c>)
 8001e80:	f001 fb36 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001e84:	231e      	movs	r3, #30
 8001e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_GPIO_Init+0x9c>)
 8001e9c:	f001 f9a4 	bl	80031e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HAL_TIM_PeriodElapsedCallback>:

// Encoder Updating Code (Only Reading data from one encoder right now but maybe
// We wanna read both and compare to get an average or something)

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ec2:	601a      	str	r2, [r3, #0]
  // Only Reading Data from One Encoder Right now
  update_encoder(&enc_instance_mot, &htim3);
 8001ec4:	4909      	ldr	r1, [pc, #36]	@ (8001eec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ec6:	480b      	ldr	r0, [pc, #44]	@ (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ec8:	f000 f8ee 	bl	80020a8 <update_encoder>
  encoder_position = enc_instance_mot.position;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ece:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ed4:	601a      	str	r2, [r3, #0]
  encoder_velocity = enc_instance_mot.velocity;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000300 	.word	0x20000300
 8001ef0:	20000498 	.word	0x20000498
 8001ef4:	20000478 	.word	0x20000478
 8001ef8:	20000490 	.word	0x20000490
 8001efc:	20000494 	.word	0x20000494

08001f00 <HAL_TIM_IC_CaptureCallback>:

// IC Interrupt for E-Stop and its Calcs

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7f1b      	ldrb	r3, [r3, #28]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d153      	bne.n	8001fb8 <HAL_TIM_IC_CaptureCallback+0xb8>
			{
				if (Is_First_Captured==0) // if the first value is not captured
 8001f10:	4b57      	ldr	r3, [pc, #348]	@ (8002070 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <HAL_TIM_IC_CaptureCallback+0x2e>
				{
					IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8001f18:	2108      	movs	r1, #8
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f003 fd5a 	bl	80059d4 <HAL_TIM_ReadCapturedValue>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a54      	ldr	r2, [pc, #336]	@ (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f24:	6013      	str	r3, [r2, #0]
					Is_First_Captured = 1;  // set the first captured as true
 8001f26:	4b52      	ldr	r3, [pc, #328]	@ (8002070 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e044      	b.n	8001fb8 <HAL_TIM_IC_CaptureCallback+0xb8>
				}

				else   // if the first is already captured
				{
					IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8001f2e:	2108      	movs	r1, #8
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f003 fd4f 	bl	80059d4 <HAL_TIM_ReadCapturedValue>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001f3a:	6013      	str	r3, [r2, #0]


					Difference = IC_Val2-IC_Val1;
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b4c      	ldr	r3, [pc, #304]	@ (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	4a4d      	ldr	r2, [pc, #308]	@ (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001f48:	6013      	str	r3, [r2, #0]


					float refClock = TIMCLOCK;
 8001f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8002080 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001f4c:	617b      	str	r3, [r7, #20]
					float mFactor = 1000000/refClock;
 8001f4e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002084 <HAL_TIM_IC_CaptureCallback+0x184>
 8001f52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5a:	edc7 7a04 	vstr	s15, [r7, #16]

					usWidth = Difference*mFactor;
 8001f5e:	4b47      	ldr	r3, [pc, #284]	@ (800207c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f76:	ee17 2a90 	vmov	r2, s15
 8001f7a:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001f7c:	601a      	str	r2, [r3, #0]
					if (usWidth > 2050){
 8001f7e:	4b42      	ldr	r3, [pc, #264]	@ (8002088 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f640 0202 	movw	r2, #2050	@ 0x802
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d904      	bls.n	8001f94 <HAL_TIM_IC_CaptureCallback+0x94>
						IC_Val1 = IC_Val2;
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a39      	ldr	r2, [pc, #228]	@ (8002074 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e011      	b.n	8001fb8 <HAL_TIM_IC_CaptureCallback+0xb8>

					}
					else{
						//__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
						Is_First_Captured = 0; // set it back to false
 8001f94:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
						dc = usWidth;
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002088 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800208c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001fa2:	601a      	str	r2, [r3, #0]
						dc = (dc - 1500)/2;
 8001fa4:	4b39      	ldr	r3, [pc, #228]	@ (800208c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001fac:	0fda      	lsrs	r2, r3, #31
 8001fae:	4413      	add	r3, r2
 8001fb0:	105b      	asrs	r3, r3, #1
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b35      	ldr	r3, [pc, #212]	@ (800208c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001fb6:	601a      	str	r2, [r3, #0]
						//set_duty(&mot1,dc);
					}

				}
			}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7f1b      	ldrb	r3, [r3, #28]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d153      	bne.n	8002068 <HAL_TIM_IC_CaptureCallback+0x168>
		{
			if (ifc==0) // if the first value is not captured
 8001fc0:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <HAL_TIM_IC_CaptureCallback+0xde>
			{
				IC_Val12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8001fc8:	210c      	movs	r1, #12
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f003 fd02 	bl	80059d4 <HAL_TIM_ReadCapturedValue>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a30      	ldr	r2, [pc, #192]	@ (8002094 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001fd4:	6013      	str	r3, [r2, #0]
				ifc = 1;  // set the first captured as true
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
					//dc = 0;
					//set_duty(&mot2,dc2);
				}
			}
		}
}
 8001fdc:	e044      	b.n	8002068 <HAL_TIM_IC_CaptureCallback+0x168>
				IC_Val22 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8001fde:	210c      	movs	r1, #12
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f003 fcf7 	bl	80059d4 <HAL_TIM_ReadCapturedValue>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8002098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001fea:	6013      	str	r3, [r2, #0]
				Difference2 = IC_Val22-IC_Val12;
 8001fec:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	4a29      	ldr	r2, [pc, #164]	@ (800209c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001ff8:	6013      	str	r3, [r2, #0]
				float refClock2 = TIMCLOCK2;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001ffc:	60fb      	str	r3, [r7, #12]
				float mFactor2 = 1000000/refClock2;
 8001ffe:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002084 <HAL_TIM_IC_CaptureCallback+0x184>
 8002002:	ed97 7a03 	vldr	s14, [r7, #12]
 8002006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200a:	edc7 7a02 	vstr	s15, [r7, #8]
				usWidth2 = Difference2*mFactor2;
 800200e:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	edd7 7a02 	vldr	s15, [r7, #8]
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002026:	ee17 2a90 	vmov	r2, s15
 800202a:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800202c:	601a      	str	r2, [r3, #0]
				if (usWidth2 > 2050){
 800202e:	4b1c      	ldr	r3, [pc, #112]	@ (80020a0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f640 0202 	movw	r2, #2050	@ 0x802
 8002036:	4293      	cmp	r3, r2
 8002038:	d904      	bls.n	8002044 <HAL_TIM_IC_CaptureCallback+0x144>
					IC_Val12 = IC_Val22;
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <HAL_TIM_IC_CaptureCallback+0x198>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a15      	ldr	r2, [pc, #84]	@ (8002094 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	e011      	b.n	8002068 <HAL_TIM_IC_CaptureCallback+0x168>
					ifc = 0; // set it back to false
 8002044:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
					dc2 = usWidth2;
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8002052:	601a      	str	r2, [r3, #0]
					dc2 = (dc2 - 1500)/2;
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800205c:	0fda      	lsrs	r2, r3, #31
 800205e:	4413      	add	r3, r2
 8002060:	105b      	asrs	r3, r3, #1
 8002062:	461a      	mov	r2, r3
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200003ec 	.word	0x200003ec
 8002074:	200003e0 	.word	0x200003e0
 8002078:	200003e4 	.word	0x200003e4
 800207c:	200003e8 	.word	0x200003e8
 8002080:	4cb71b00 	.word	0x4cb71b00
 8002084:	49742400 	.word	0x49742400
 8002088:	20000400 	.word	0x20000400
 800208c:	200003d8 	.word	0x200003d8
 8002090:	200003f0 	.word	0x200003f0
 8002094:	200003f4 	.word	0x200003f4
 8002098:	200003f8 	.word	0x200003f8
 800209c:	200003fc 	.word	0x200003fc
 80020a0:	20000404 	.word	0x20000404
 80020a4:	200003dc 	.word	0x200003dc

080020a8 <update_encoder>:

// Encoder Updating Function

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
 {
 80020a8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	60fb      	str	r3, [r7, #12]
static uint8_t first_time = 0;
if(!first_time)
 80020bc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ac <update_encoder+0x104>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <update_encoder+0x2a>
{
   encoder_value ->velocity = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	801a      	strh	r2, [r3, #0]
   first_time = 1;
 80020ca:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <update_encoder+0x104>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e052      	b.n	8002178 <update_encoder+0xd0>
}
else
{
  if(temp_counter == encoder_value ->last_counter_value)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d103      	bne.n	80020e4 <update_encoder+0x3c>
  {
    encoder_value ->velocity = 0;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e049      	b.n	8002178 <update_encoder+0xd0>
  }
  else if(temp_counter > encoder_value ->last_counter_value)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d922      	bls.n	8002134 <update_encoder+0x8c>
  {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d110      	bne.n	800211e <update_encoder+0x76>
    {
      encoder_value ->velocity = -encoder_value ->last_counter_value -
	(__HAL_TIM_GET_AUTORELOAD(htim)-temp_counter);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	b29b      	uxth	r3, r3
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	b29a      	uxth	r2, r3
      encoder_value ->velocity = -encoder_value ->last_counter_value -
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	b29b      	uxth	r3, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	b21a      	sxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	e02c      	b.n	8002178 <update_encoder+0xd0>
    }
    else
    {
      encoder_value ->velocity = temp_counter -
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	b29a      	uxth	r2, r3
           encoder_value ->last_counter_value;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
      encoder_value ->velocity = temp_counter -
 8002126:	b29b      	uxth	r3, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b29b      	uxth	r3, r3
 800212c:	b21a      	sxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	e021      	b.n	8002178 <update_encoder+0xd0>
    }
  }
  else
  {
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b10      	cmp	r3, #16
 8002140:	d10a      	bne.n	8002158 <update_encoder+0xb0>
    {
	encoder_value ->velocity = temp_counter -
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	b29a      	uxth	r2, r3
            encoder_value ->last_counter_value;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
	encoder_value ->velocity = temp_counter -
 800214a:	b29b      	uxth	r3, r3
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	b29b      	uxth	r3, r3
 8002150:	b21a      	sxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	e00f      	b.n	8002178 <update_encoder+0xd0>
    }
    else
    {
	encoder_value ->velocity = temp_counter +
	(__HAL_TIM_GET_AUTORELOAD(htim) -
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	b29a      	uxth	r2, r3
              encoder_value ->last_counter_value);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
	(__HAL_TIM_GET_AUTORELOAD(htim) -
 8002164:	b29b      	uxth	r3, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	b29a      	uxth	r2, r3
	encoder_value ->velocity = temp_counter +
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	b21a      	sxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	801a      	strh	r2, [r3, #0]
    }
   }
}
encoder_value ->position += encoder_value ->velocity;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002184:	b209      	sxth	r1, r1
 8002186:	17c8      	asrs	r0, r1, #31
 8002188:	460c      	mov	r4, r1
 800218a:	4605      	mov	r5, r0
 800218c:	eb12 0804 	adds.w	r8, r2, r4
 8002190:	eb43 0905 	adc.w	r9, r3, r5
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	e9c3 8902 	strd	r8, r9, [r3, #8]
encoder_value ->last_counter_value = temp_counter;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	611a      	str	r2, [r3, #16]
 }
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80021aa:	4770      	bx	lr
 80021ac:	200004a0 	.word	0x200004a0

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <Error_Handler+0x8>

080021bc <set_duty>:


#include "motor_driver.h"

// The implementation of the motor object method should go in the .c file
void set_duty(motor_t* p_mot, int32_t duty){
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    // Print to the console so we can see what's happening
    // printf("Setting Motor Duty Cycle to %d", duty);
    p_mot->duty = duty;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	601a      	str	r2, [r3, #0]
    // Assign the duty cycle to a field in the structure
    if (p_mot->channel == 1){
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d117      	bne.n	8002204 <set_duty+0x48>

			if (duty>=0){
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db08      	blt.n	80021ec <set_duty+0x30>

				p_mot->timer->CCR1 = duty;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
				p_mot->timer->CCR2 = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38
				duty = -1*duty;
				p_mot->timer->CCR3 = 0;
				p_mot->timer->CCR4 = duty;
			}
    }
}
 80021ea:	e022      	b.n	8002232 <set_duty+0x76>
				duty = -1*duty;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	425b      	negs	r3, r3
 80021f0:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR1 = 0;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2200      	movs	r2, #0
 80021f8:	635a      	str	r2, [r3, #52]	@ 0x34
				p_mot->timer->CCR2 = duty;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002202:	e016      	b.n	8002232 <set_duty+0x76>
    		if (duty>=0){
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db08      	blt.n	800221c <set_duty+0x60>
				p_mot->timer->CCR3 = duty;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	63da      	str	r2, [r3, #60]	@ 0x3c
				p_mot->timer->CCR4 = 0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800221a:	e00a      	b.n	8002232 <set_duty+0x76>
				duty = -1*duty;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	425b      	negs	r3, r3
 8002220:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR3 = 0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c
				p_mot->timer->CCR4 = duty;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800226e:	f7fe fc53 	bl	8000b18 <__aeabi_dcmpgt>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002284:	e011      	b.n	80022aa <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002292:	f7fe fc23 	bl	8000adc <__aeabi_dcmplt>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d100      	bne.n	800229e <PID_Init+0x60>
}
 800229c:	e005      	b.n	80022aa <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	0000      	movs	r0, r0
 80022b4:	0000      	movs	r0, r0
	...

080022b8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6278      	str	r0, [r7, #36]	@ 0x24
 80022c0:	6239      	str	r1, [r7, #32]
 80022c2:	61fa      	str	r2, [r7, #28]
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	ed87 0b04 	vstr	d0, [r7, #16]
 80022ca:	ed87 1b02 	vstr	d1, [r7, #8]
 80022ce:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	6a3a      	ldr	r2, [r7, #32]
 80022dc:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	2200      	movs	r2, #0
 80022e8:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80022ea:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8002340 <PID+0x88>
 80022ee:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8002348 <PID+0x90>
 80022f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022f4:	f000 f934 	bl	8002560 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	2264      	movs	r2, #100	@ 0x64
 80022fc:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80022fe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002302:	4619      	mov	r1, r3
 8002304:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002306:	f000 fa41 	bl	800278c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800230a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800230e:	4619      	mov	r1, r3
 8002310:	ed97 2b00 	vldr	d2, [r7]
 8002314:	ed97 1b02 	vldr	d1, [r7, #8]
 8002318:	ed97 0b04 	vldr	d0, [r7, #16]
 800231c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800231e:	f000 f98d 	bl	800263c <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002322:	f000 fe1f 	bl	8002f64 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	1ad2      	subs	r2, r2, r3
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	605a      	str	r2, [r3, #4]
	
}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	f3af 8000 	nop.w
 8002340:	00000000 	.word	0x00000000
 8002344:	406fe000 	.word	0x406fe000
	...

08002350 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b08c      	sub	sp, #48	@ 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <PID_Compute+0x14>
	{
		return _FALSE;
 8002360:	2300      	movs	r3, #0
 8002362:	e0db      	b.n	800251c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002364:	f000 fdfe 	bl	8002f64 <HAL_GetTick>
 8002368:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	429a      	cmp	r2, r3
 800237c:	f0c0 80cd 	bcc.w	800251a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002398:	f7fd ff76 	bl	8000288 <__aeabi_dsub>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80023aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023ae:	f7fd ff6b 	bl	8000288 <__aeabi_dsub>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80023c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023ca:	f7fe f915 	bl	80005f8 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fd ff59 	bl	800028c <__adddf3>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d114      	bne.n	8002416 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80023f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023fc:	f7fe f8fc 	bl	80005f8 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4620      	mov	r0, r4
 8002406:	4629      	mov	r1, r5
 8002408:	f7fd ff3e 	bl	8000288 <__aeabi_dsub>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002422:	f7fe fb79 	bl	8000b18 <__aeabi_dcmpgt>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8002438:	e010      	b.n	800245c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002446:	f7fe fb49 	bl	8000adc <__aeabi_dcmplt>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800246a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800246e:	f7fe f8c3 	bl	80005f8 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800247a:	e005      	b.n	8002488 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002498:	f7fe f8ae 	bl	80005f8 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd fef0 	bl	8000288 <__aeabi_dsub>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024b0:	f7fd feec 	bl	800028c <__adddf3>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		
		if (output > uPID->OutMax)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80024c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024c6:	f7fe fb27 	bl	8000b18 <__aeabi_dcmpgt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80024d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80024da:	e00e      	b.n	80024fa <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80024e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024e6:	f7fe faf9 	bl	8000adc <__aeabi_dcmplt>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80024f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80024fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002502:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002514:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 800251a:	2300      	movs	r3, #0
	}
	
}
 800251c:	4618      	mov	r0, r3
 800251e:	3730      	adds	r7, #48	@ 0x30
 8002520:	46bd      	mov	sp, r7
 8002522:	bdb0      	pop	{r4, r5, r7, pc}

08002524 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	2b01      	cmp	r3, #1
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <PID_SetMode+0x2e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	785b      	ldrb	r3, [r3, #1]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fe76 	bl	800223e <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	705a      	strb	r2, [r3, #1]
	
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6178      	str	r0, [r7, #20]
 8002568:	ed87 0b02 	vstr	d0, [r7, #8]
 800256c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002574:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002578:	f7fe fac4 	bl	8000b04 <__aeabi_dcmpge>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d158      	bne.n	8002634 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8002582:	6979      	ldr	r1, [r7, #20]
 8002584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002588:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 800258c:	6979      	ldr	r1, [r7, #20]
 800258e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002592:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d04b      	beq.n	8002636 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80025ac:	f7fe fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80025c0:	e9c1 2300 	strd	r2, r3, [r1]
 80025c4:	e012      	b.n	80025ec <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80025d4:	f7fe fa82 	bl	8000adc <__aeabi_dcmplt>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80025e8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80025f8:	f7fe fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002608:	6979      	ldr	r1, [r7, #20]
 800260a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800260e:	e012      	b.n	8002636 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800261c:	f7fe fa5e 	bl	8000adc <__aeabi_dcmplt>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8002632:	e000      	b.n	8002636 <PID_SetOutputLimits+0xd6>
		return;
 8002634:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	61f8      	str	r0, [r7, #28]
 8002644:	ed87 0b04 	vstr	d0, [r7, #16]
 8002648:	ed87 1b02 	vstr	d1, [r7, #8]
 800264c:	ed87 2b00 	vstr	d2, [r7]
 8002650:	460b      	mov	r3, r1
 8002652:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002660:	f7fe fa3c 	bl	8000adc <__aeabi_dcmplt>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 8089 	bne.w	800277e <PID_SetTunings2+0x142>
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002678:	f7fe fa30 	bl	8000adc <__aeabi_dcmplt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d17d      	bne.n	800277e <PID_SetTunings2+0x142>
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800268e:	f7fe fa25 	bl	8000adc <__aeabi_dcmplt>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d172      	bne.n	800277e <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	7efa      	ldrb	r2, [r7, #27]
 800269c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800269e:	7efb      	ldrb	r3, [r7, #27]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80026b0:	69f9      	ldr	r1, [r7, #28]
 80026b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80026ba:	69f9      	ldr	r1, [r7, #28]
 80026bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80026c4:	69f9      	ldr	r1, [r7, #28]
 80026c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff16 	bl	8000504 <__aeabi_ui2d>
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <PID_SetTunings2+0x14c>)
 80026de:	f7fe f8b5 	bl	800084c <__aeabi_ddiv>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 80026ea:	69f9      	ldr	r1, [r7, #28]
 80026ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80026f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fc:	f7fd ff7c 	bl	80005f8 <__aeabi_dmul>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	69f9      	ldr	r1, [r7, #28]
 8002706:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800270a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800270e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002712:	f7fe f89b 	bl	800084c <__aeabi_ddiv>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	69f9      	ldr	r1, [r7, #28]
 800271c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	78db      	ldrb	r3, [r3, #3]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d12b      	bne.n	8002780 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f7fd fda7 	bl	8000288 <__aeabi_dsub>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	69f9      	ldr	r1, [r7, #28]
 8002740:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	f7fd fd99 	bl	8000288 <__aeabi_dsub>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	69f9      	ldr	r1, [r7, #28]
 800275c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	f7fd fd8b 	bl	8000288 <__aeabi_dsub>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	69f9      	ldr	r1, [r7, #28]
 8002778:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800277c:	e000      	b.n	8002780 <PID_SetTunings2+0x144>
		return;
 800277e:	bf00      	nop
		
	}
	
}
 8002780:	3728      	adds	r7, #40	@ 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	408f4000 	.word	0x408f4000

0800278c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02e      	beq.n	80027fe <PID_SetControllerDirection+0x72>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	78db      	ldrb	r3, [r3, #3]
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d029      	beq.n	80027fe <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80027b0:	f04f 0000 	mov.w	r0, #0
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	f7fd fd66 	bl	8000288 <__aeabi_dsub>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	f7fd fd58 	bl	8000288 <__aeabi_dsub>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80027e8:	f04f 0000 	mov.w	r0, #0
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	f7fd fd4a 	bl	8000288 <__aeabi_dsub>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	70da      	strb	r2, [r3, #3]
	
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	dd2e      	ble.n	800287a <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f7fd fe81 	bl	8000524 <__aeabi_i2d>
 8002822:	4604      	mov	r4, r0
 8002824:	460d      	mov	r5, r1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fe6a 	bl	8000504 <__aeabi_ui2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4620      	mov	r0, r4
 8002836:	4629      	mov	r1, r5
 8002838:	f7fe f808 	bl	800084c <__aeabi_ddiv>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800284a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800284e:	f7fd fed3 	bl	80005f8 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002866:	f7fd fff1 	bl	800084c <__aeabi_ddiv>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
		
	}
	
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_MspInit+0x4c>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002898:	6453      	str	r3, [r2, #68]	@ 0x44
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_MspInit+0x4c>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <HAL_MspInit+0x4c>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_MspInit+0x4c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	@ 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3a      	ldr	r2, [pc, #232]	@ (80029dc <HAL_I2C_MspInit+0x108>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d12c      	bne.n	8002950 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a38      	ldr	r2, [pc, #224]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b36      	ldr	r3, [pc, #216]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002912:	23c0      	movs	r3, #192	@ 0xc0
 8002914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002916:	2312      	movs	r3, #18
 8002918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002922:	2304      	movs	r3, #4
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 031c 	add.w	r3, r7, #28
 800292a:	4619      	mov	r1, r3
 800292c:	482d      	ldr	r0, [pc, #180]	@ (80029e4 <HAL_I2C_MspInit+0x110>)
 800292e:	f000 fc5b 	bl	80031e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	4b2a      	ldr	r3, [pc, #168]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	4a29      	ldr	r2, [pc, #164]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 800293c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002940:	6413      	str	r3, [r2, #64]	@ 0x40
 8002942:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800294e:	e041      	b.n	80029d4 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a24      	ldr	r2, [pc, #144]	@ (80029e8 <HAL_I2C_MspInit+0x114>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d13c      	bne.n	80029d4 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	4a1f      	ldr	r2, [pc, #124]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6313      	str	r3, [r2, #48]	@ 0x30
 800296a:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800297c:	2312      	movs	r3, #18
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002988:	2304      	movs	r3, #4
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	4814      	ldr	r0, [pc, #80]	@ (80029e4 <HAL_I2C_MspInit+0x110>)
 8002994:	f000 fc28 	bl	80031e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002998:	2308      	movs	r3, #8
 800299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800299c:	2312      	movs	r3, #18
 800299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80029a8:	2309      	movs	r3, #9
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	4619      	mov	r1, r3
 80029b2:	480c      	ldr	r0, [pc, #48]	@ (80029e4 <HAL_I2C_MspInit+0x110>)
 80029b4:	f000 fc18 	bl	80031e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	4a07      	ldr	r2, [pc, #28]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 80029c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_I2C_MspInit+0x10c>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3730      	adds	r7, #48	@ 0x30
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40005400 	.word	0x40005400
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40005800 	.word	0x40005800

080029ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	@ 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12c      	bne.n	8002a68 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	4a17      	ldr	r2, [pc, #92]	@ (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	4805      	ldr	r0, [pc, #20]	@ (8002a78 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002a64:	f000 fbc0 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a68:	bf00      	nop
 8002a6a:	3728      	adds	r7, #40	@ 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000

08002a7c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	@ 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <HAL_TIM_IC_MspInit+0x94>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d133      	bne.n	8002b06 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b14 <HAL_TIM_IC_MspInit+0x98>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b14 <HAL_TIM_IC_MspInit+0x98>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_TIM_IC_MspInit+0x98>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b15      	ldr	r3, [pc, #84]	@ (8002b14 <HAL_TIM_IC_MspInit+0x98>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <HAL_TIM_IC_MspInit+0x98>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_TIM_IC_MspInit+0x98>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4809      	ldr	r0, [pc, #36]	@ (8002b18 <HAL_TIM_IC_MspInit+0x9c>)
 8002af2:	f000 fb79 	bl	80031e8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	201d      	movs	r0, #29
 8002afc:	f000 fb3d 	bl	800317a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b00:	201d      	movs	r0, #29
 8002b02:	f000 fb56 	bl	80031b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	@ 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020400 	.word	0x40020400

08002b1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10d      	bne.n	8002b4a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_TIM_PWM_MspInit+0x40>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	4a09      	ldr	r2, [pc, #36]	@ (8002b5c <HAL_TIM_PWM_MspInit+0x40>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <HAL_TIM_PWM_MspInit+0x40>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a12      	ldr	r2, [pc, #72]	@ (8002bc8 <HAL_TIM_MspPostInit+0x68>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d11e      	bne.n	8002bc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <HAL_TIM_MspPostInit+0x6c>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a10      	ldr	r2, [pc, #64]	@ (8002bcc <HAL_TIM_MspPostInit+0x6c>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <HAL_TIM_MspPostInit+0x6c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4805      	ldr	r0, [pc, #20]	@ (8002bd0 <HAL_TIM_MspPostInit+0x70>)
 8002bbc:	f000 fb14 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	@ (8002c58 <HAL_UART_MspInit+0x84>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d12c      	bne.n	8002c50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_UART_MspInit+0x88>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <HAL_UART_MspInit+0x88>)
 8002c00:	f043 0310 	orr.w	r3, r3, #16
 8002c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_UART_MspInit+0x88>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_UART_MspInit+0x88>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a10      	ldr	r2, [pc, #64]	@ (8002c5c <HAL_UART_MspInit+0x88>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <HAL_UART_MspInit+0x88>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002c2e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c40:	2307      	movs	r3, #7
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <HAL_UART_MspInit+0x8c>)
 8002c4c:	f000 facc 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c50:	bf00      	nop
 8002c52:	3728      	adds	r7, #40	@ 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000

08002c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <NMI_Handler+0x4>

08002c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cba:	f000 f93f 	bl	8002f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <TIM3_IRQHandler+0x10>)
 8002cca:	f002 fc35 	bl	8005538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000300 	.word	0x20000300

08002cd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e00a      	b.n	8002d00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cea:	f3af 8000 	nop.w
 8002cee:	4601      	mov	r1, r0
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	60ba      	str	r2, [r7, #8]
 8002cf6:	b2ca      	uxtb	r2, r1
 8002cf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	dbf0      	blt.n	8002cea <_read+0x12>
  }

  return len;
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e009      	b.n	8002d38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	60ba      	str	r2, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3301      	adds	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	dbf1      	blt.n	8002d24 <_write+0x12>
  }
  return len;
 8002d40:	687b      	ldr	r3, [r7, #4]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_close>:

int _close(int file)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d72:	605a      	str	r2, [r3, #4]
  return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_isatty>:

int _isatty(int file)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dbc:	4a14      	ldr	r2, [pc, #80]	@ (8002e10 <_sbrk+0x5c>)
 8002dbe:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <_sbrk+0x60>)
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <_sbrk+0x64>)
 8002dd2:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <_sbrk+0x68>)
 8002dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dd6:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <_sbrk+0x64>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d207      	bcs.n	8002df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de4:	f003 ff52 	bl	8006c8c <__errno>
 8002de8:	4603      	mov	r3, r0
 8002dea:	220c      	movs	r2, #12
 8002dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	e009      	b.n	8002e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df4:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <_sbrk+0x64>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfa:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	4a05      	ldr	r2, [pc, #20]	@ (8002e18 <_sbrk+0x64>)
 8002e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20020000 	.word	0x20020000
 8002e14:	00000400 	.word	0x00000400
 8002e18:	200004a4 	.word	0x200004a4
 8002e1c:	200005f8 	.word	0x200005f8

08002e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <SystemInit+0x20>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2a:	4a05      	ldr	r2, [pc, #20]	@ (8002e40 <SystemInit+0x20>)
 8002e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e48:	f7ff ffea 	bl	8002e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e4c:	480c      	ldr	r0, [pc, #48]	@ (8002e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e4e:	490d      	ldr	r1, [pc, #52]	@ (8002e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e50:	4a0d      	ldr	r2, [pc, #52]	@ (8002e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e54:	e002      	b.n	8002e5c <LoopCopyDataInit>

08002e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e5a:	3304      	adds	r3, #4

08002e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e60:	d3f9      	bcc.n	8002e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e62:	4a0a      	ldr	r2, [pc, #40]	@ (8002e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e64:	4c0a      	ldr	r4, [pc, #40]	@ (8002e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e68:	e001      	b.n	8002e6e <LoopFillZerobss>

08002e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e6c:	3204      	adds	r2, #4

08002e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e70:	d3fb      	bcc.n	8002e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e72:	f003 ff11 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e76:	f7fe fb6b 	bl	8001550 <main>
  bx  lr    
 8002e7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e84:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002e88:	080088f0 	.word	0x080088f0
  ldr r2, =_sbss
 8002e8c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002e90:	200005f8 	.word	0x200005f8

08002e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e94:	e7fe      	b.n	8002e94 <ADC_IRQHandler>
	...

08002e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <HAL_Init+0x40>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <HAL_Init+0x40>)
 8002ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_Init+0x40>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <HAL_Init+0x40>)
 8002eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb4:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <HAL_Init+0x40>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a07      	ldr	r2, [pc, #28]	@ (8002ed8 <HAL_Init+0x40>)
 8002eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	f000 f94f 	bl	8003164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec6:	200f      	movs	r0, #15
 8002ec8:	f000 f808 	bl	8002edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ecc:	f7ff fcda 	bl	8002884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023c00 	.word	0x40023c00

08002edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee4:	4b12      	ldr	r3, [pc, #72]	@ (8002f30 <HAL_InitTick+0x54>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <HAL_InitTick+0x58>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	4619      	mov	r1, r3
 8002eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f967 	bl	80031ce <HAL_SYSTICK_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00e      	b.n	8002f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b0f      	cmp	r3, #15
 8002f0e:	d80a      	bhi.n	8002f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f10:	2200      	movs	r2, #0
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f000 f92f 	bl	800317a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f1c:	4a06      	ldr	r2, [pc, #24]	@ (8002f38 <HAL_InitTick+0x5c>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000024 	.word	0x20000024
 8002f34:	2000002c 	.word	0x2000002c
 8002f38:	20000028 	.word	0x20000028

08002f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_IncTick+0x20>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <HAL_IncTick+0x24>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a04      	ldr	r2, [pc, #16]	@ (8002f60 <HAL_IncTick+0x24>)
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	2000002c 	.word	0x2000002c
 8002f60:	200004a8 	.word	0x200004a8

08002f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTick;
 8002f68:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <HAL_GetTick+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	200004a8 	.word	0x200004a8

08002f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f84:	f7ff ffee 	bl	8002f64 <HAL_GetTick>
 8002f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d005      	beq.n	8002fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f96:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <HAL_Delay+0x44>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fa2:	bf00      	nop
 8002fa4:	f7ff ffde 	bl	8002f64 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d8f7      	bhi.n	8002fa4 <HAL_Delay+0x28>
  {
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000002c 	.word	0x2000002c

08002fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff6:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	60d3      	str	r3, [r2, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003010:	4b04      	ldr	r3, [pc, #16]	@ (8003024 <__NVIC_GetPriorityGrouping+0x18>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	f003 0307 	and.w	r3, r3, #7
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	2b00      	cmp	r3, #0
 8003038:	db0b      	blt.n	8003052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	f003 021f 	and.w	r2, r3, #31
 8003040:	4907      	ldr	r1, [pc, #28]	@ (8003060 <__NVIC_EnableIRQ+0x38>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2001      	movs	r0, #1
 800304a:	fa00 f202 	lsl.w	r2, r0, r2
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e100 	.word	0xe000e100

08003064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db0a      	blt.n	800308e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	490c      	ldr	r1, [pc, #48]	@ (80030b0 <__NVIC_SetPriority+0x4c>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	0112      	lsls	r2, r2, #4
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	440b      	add	r3, r1
 8003088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800308c:	e00a      	b.n	80030a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4908      	ldr	r1, [pc, #32]	@ (80030b4 <__NVIC_SetPriority+0x50>)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	3b04      	subs	r3, #4
 800309c:	0112      	lsls	r2, r2, #4
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	440b      	add	r3, r1
 80030a2:	761a      	strb	r2, [r3, #24]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000e100 	.word	0xe000e100
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f1c3 0307 	rsb	r3, r3, #7
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf28      	it	cs
 80030d6:	2304      	movcs	r3, #4
 80030d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3304      	adds	r3, #4
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d902      	bls.n	80030e8 <NVIC_EncodePriority+0x30>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3b03      	subs	r3, #3
 80030e6:	e000      	b.n	80030ea <NVIC_EncodePriority+0x32>
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	401a      	ands	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003100:	f04f 31ff 	mov.w	r1, #4294967295
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43d9      	mvns	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	4313      	orrs	r3, r2
         );
}
 8003112:	4618      	mov	r0, r3
 8003114:	3724      	adds	r7, #36	@ 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003130:	d301      	bcc.n	8003136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003132:	2301      	movs	r3, #1
 8003134:	e00f      	b.n	8003156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003136:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <SysTick_Config+0x40>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313e:	210f      	movs	r1, #15
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	f7ff ff8e 	bl	8003064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <SysTick_Config+0x40>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314e:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <SysTick_Config+0x40>)
 8003150:	2207      	movs	r2, #7
 8003152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000e010 	.word	0xe000e010

08003164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff29 	bl	8002fc4 <__NVIC_SetPriorityGrouping>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800318c:	f7ff ff3e 	bl	800300c <__NVIC_GetPriorityGrouping>
 8003190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f7ff ff8e 	bl	80030b8 <NVIC_EncodePriority>
 800319c:	4602      	mov	r2, r0
 800319e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff5d 	bl	8003064 <__NVIC_SetPriority>
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff31 	bl	8003028 <__NVIC_EnableIRQ>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffa2 	bl	8003120 <SysTick_Config>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	@ 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e159      	b.n	80034b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003204:	2201      	movs	r2, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	f040 8148 	bne.w	80034b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d005      	beq.n	800323a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003236:	2b02      	cmp	r3, #2
 8003238:	d130      	bne.n	800329c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 0201 	and.w	r2, r3, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d017      	beq.n	80032d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d123      	bne.n	800332c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	08da      	lsrs	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3208      	adds	r2, #8
 80032ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	220f      	movs	r2, #15
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	08da      	lsrs	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3208      	adds	r2, #8
 8003326:	69b9      	ldr	r1, [r7, #24]
 8003328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a2 	beq.w	80034b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 8003378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800337c:	6453      	str	r3, [r2, #68]	@ 0x44
 800337e:	4b54      	ldr	r3, [pc, #336]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800338a:	4a52      	ldr	r2, [pc, #328]	@ (80034d4 <HAL_GPIO_Init+0x2ec>)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a49      	ldr	r2, [pc, #292]	@ (80034d8 <HAL_GPIO_Init+0x2f0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d019      	beq.n	80033ea <HAL_GPIO_Init+0x202>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a48      	ldr	r2, [pc, #288]	@ (80034dc <HAL_GPIO_Init+0x2f4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_GPIO_Init+0x1fe>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a47      	ldr	r2, [pc, #284]	@ (80034e0 <HAL_GPIO_Init+0x2f8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00d      	beq.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <HAL_GPIO_Init+0x2fc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <HAL_GPIO_Init+0x1f6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a45      	ldr	r2, [pc, #276]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_GPIO_Init+0x1f2>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e008      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033da:	2307      	movs	r3, #7
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033de:	2303      	movs	r3, #3
 80033e0:	e004      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033ea:	2300      	movs	r3, #0
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	f002 0203 	and.w	r2, r2, #3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4093      	lsls	r3, r2
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033fc:	4935      	ldr	r1, [pc, #212]	@ (80034d4 <HAL_GPIO_Init+0x2ec>)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340a:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <HAL_GPIO_Init+0x304>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342e:	4a2f      	ldr	r2, [pc, #188]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003458:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <HAL_GPIO_Init+0x304>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345e:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003482:	4a1a      	ldr	r2, [pc, #104]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003488:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <HAL_GPIO_Init+0x304>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ac:	4a0f      	ldr	r2, [pc, #60]	@ (80034ec <HAL_GPIO_Init+0x304>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	f67f aea2 	bls.w	8003204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40020000 	.word	0x40020000
 80034dc:	40020400 	.word	0x40020400
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020c00 	.word	0x40020c00
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40013c00 	.word	0x40013c00

080034f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
 80034fc:	4613      	mov	r3, r2
 80034fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800350c:	e003      	b.n	8003516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	041a      	lsls	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e12b      	b.n	800378e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff f9c2 	bl	80028d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	@ 0x24
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003588:	f001 fc10 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a81      	ldr	r2, [pc, #516]	@ (8003798 <HAL_I2C_Init+0x274>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d807      	bhi.n	80035a8 <HAL_I2C_Init+0x84>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a80      	ldr	r2, [pc, #512]	@ (800379c <HAL_I2C_Init+0x278>)
 800359c:	4293      	cmp	r3, r2
 800359e:	bf94      	ite	ls
 80035a0:	2301      	movls	r3, #1
 80035a2:	2300      	movhi	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e006      	b.n	80035b6 <HAL_I2C_Init+0x92>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a7d      	ldr	r2, [pc, #500]	@ (80037a0 <HAL_I2C_Init+0x27c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	bf94      	ite	ls
 80035b0:	2301      	movls	r3, #1
 80035b2:	2300      	movhi	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0e7      	b.n	800378e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a78      	ldr	r2, [pc, #480]	@ (80037a4 <HAL_I2C_Init+0x280>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0c9b      	lsrs	r3, r3, #18
 80035c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003798 <HAL_I2C_Init+0x274>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d802      	bhi.n	80035f8 <HAL_I2C_Init+0xd4>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	e009      	b.n	800360c <HAL_I2C_Init+0xe8>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	4a69      	ldr	r2, [pc, #420]	@ (80037a8 <HAL_I2C_Init+0x284>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	3301      	adds	r3, #1
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	430b      	orrs	r3, r1
 8003612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800361e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	495c      	ldr	r1, [pc, #368]	@ (8003798 <HAL_I2C_Init+0x274>)
 8003628:	428b      	cmp	r3, r1
 800362a:	d819      	bhi.n	8003660 <HAL_I2C_Init+0x13c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e59      	subs	r1, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fbb1 f3f3 	udiv	r3, r1, r3
 800363a:	1c59      	adds	r1, r3, #1
 800363c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003640:	400b      	ands	r3, r1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_I2C_Init+0x138>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1e59      	subs	r1, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fbb1 f3f3 	udiv	r3, r1, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365a:	e051      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 800365c:	2304      	movs	r3, #4
 800365e:	e04f      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d111      	bne.n	800368c <HAL_I2C_Init+0x168>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e58      	subs	r0, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	440b      	add	r3, r1
 8003676:	fbb0 f3f3 	udiv	r3, r0, r3
 800367a:	3301      	adds	r3, #1
 800367c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e012      	b.n	80036b2 <HAL_I2C_Init+0x18e>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	0099      	lsls	r1, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Init+0x196>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e022      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10e      	bne.n	80036e0 <HAL_I2C_Init+0x1bc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1e58      	subs	r0, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	440b      	add	r3, r1
 80036d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036de:	e00f      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	0099      	lsls	r1, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	6809      	ldr	r1, [r1, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800372e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6911      	ldr	r1, [r2, #16]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68d2      	ldr	r2, [r2, #12]
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	430b      	orrs	r3, r1
 8003742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	000186a0 	.word	0x000186a0
 800379c:	001e847f 	.word	0x001e847f
 80037a0:	003d08ff 	.word	0x003d08ff
 80037a4:	431bde83 	.word	0x431bde83
 80037a8:	10624dd3 	.word	0x10624dd3

080037ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	817b      	strh	r3, [r7, #10]
 80037bc:	4613      	mov	r3, r2
 80037be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7ff fbd0 	bl	8002f64 <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	f040 80e0 	bne.w	8003994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2319      	movs	r3, #25
 80037da:	2201      	movs	r2, #1
 80037dc:	4970      	ldr	r1, [pc, #448]	@ (80039a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fc7e 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0d3      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_I2C_Master_Transmit+0x50>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e0cc      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d007      	beq.n	8003822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2221      	movs	r2, #33	@ 0x21
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2210      	movs	r2, #16
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a50      	ldr	r2, [pc, #320]	@ (80039a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fae8 	bl	8003e40 <I2C_MasterRequestWrite>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e08d      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003890:	e066      	b.n	8003960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6a39      	ldr	r1, [r7, #32]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fd3c 	bl	8004314 <I2C_WaitOnTXEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d107      	bne.n	80038ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06b      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11b      	bne.n	8003934 <HAL_I2C_Master_Transmit+0x188>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d017      	beq.n	8003934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	6a39      	ldr	r1, [r7, #32]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fd33 	bl	80043a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	2b04      	cmp	r3, #4
 800394a:	d107      	bne.n	800395c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e01a      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d194      	bne.n	8003892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	00100002 	.word	0x00100002
 80039a4:	ffff0000 	.word	0xffff0000

080039a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	@ 0x30
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	460b      	mov	r3, r1
 80039b6:	817b      	strh	r3, [r7, #10]
 80039b8:	4613      	mov	r3, r2
 80039ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039bc:	f7ff fad2 	bl	8002f64 <HAL_GetTick>
 80039c0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	f040 8217 	bne.w	8003dfe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	2319      	movs	r3, #25
 80039d6:	2201      	movs	r2, #1
 80039d8:	497c      	ldr	r1, [pc, #496]	@ (8003bcc <HAL_I2C_Master_Receive+0x224>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fb80 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
 80039e8:	e20a      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_I2C_Master_Receive+0x50>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e203      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d007      	beq.n	8003a1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2222      	movs	r2, #34	@ 0x22
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2210      	movs	r2, #16
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	893a      	ldrh	r2, [r7, #8]
 8003a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <HAL_I2C_Master_Receive+0x228>)
 8003a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a60:	8979      	ldrh	r1, [r7, #10]
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa6c 	bl	8003f44 <I2C_MasterRequestRead>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e1c4      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d113      	bne.n	8003aa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	623b      	str	r3, [r7, #32]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e198      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d11b      	bne.n	8003ae6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e178      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d11b      	bne.n	8003b26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	e158      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b4c:	e144      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	f200 80f1 	bhi.w	8003d3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d123      	bne.n	8003ba8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fc65 	bl	8004434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e145      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ba6:	e117      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d14e      	bne.n	8003c4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4906      	ldr	r1, [pc, #24]	@ (8003bd4 <HAL_I2C_Master_Receive+0x22c>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fa90 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e11a      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
 8003bca:	bf00      	nop
 8003bcc:	00100002 	.word	0x00100002
 8003bd0:	ffff0000 	.word	0xffff0000
 8003bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c4c:	e0c4      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	2200      	movs	r2, #0
 8003c56:	496c      	ldr	r1, [pc, #432]	@ (8003e08 <HAL_I2C_Master_Receive+0x460>)
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fa41 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0cb      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	4955      	ldr	r1, [pc, #340]	@ (8003e08 <HAL_I2C_Master_Receive+0x460>)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fa13 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e09d      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d38:	e04e      	b.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fb78 	bl	8004434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e058      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d124      	bne.n	8003dd8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d107      	bne.n	8003da6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f aeb6 	bne.w	8003b4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3728      	adds	r7, #40	@ 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	00010004 	.word	0x00010004

08003e0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d006      	beq.n	8003e6a <I2C_MasterRequestWrite+0x2a>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d003      	beq.n	8003e6a <I2C_MasterRequestWrite+0x2a>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e68:	d108      	bne.n	8003e7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e00b      	b.n	8003e94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	2b12      	cmp	r3, #18
 8003e82:	d107      	bne.n	8003e94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f91d 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eba:	d103      	bne.n	8003ec4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e035      	b.n	8003f34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ed0:	d108      	bne.n	8003ee4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e01b      	b.n	8003f1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	11db      	asrs	r3, r3, #7
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f063 030f 	orn	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	490e      	ldr	r1, [pc, #56]	@ (8003f3c <I2C_MasterRequestWrite+0xfc>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f966 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e010      	b.n	8003f34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f12:	897b      	ldrh	r3, [r7, #10]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4907      	ldr	r1, [pc, #28]	@ (8003f40 <I2C_MasterRequestWrite+0x100>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f956 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	00010008 	.word	0x00010008
 8003f40:	00010002 	.word	0x00010002

08003f44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	460b      	mov	r3, r1
 8003f52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d006      	beq.n	8003f7e <I2C_MasterRequestRead+0x3a>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d003      	beq.n	8003f7e <I2C_MasterRequestRead+0x3a>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e00b      	b.n	8003fa8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	2b11      	cmp	r3, #17
 8003f96:	d107      	bne.n	8003fa8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f893 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fce:	d103      	bne.n	8003fd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e079      	b.n	80040d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe4:	d108      	bne.n	8003ff8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e05f      	b.n	80040b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	11db      	asrs	r3, r3, #7
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f063 030f 	orn	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4930      	ldr	r1, [pc, #192]	@ (80040d8 <I2C_MasterRequestRead+0x194>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8dc 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e054      	b.n	80040d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4929      	ldr	r1, [pc, #164]	@ (80040dc <I2C_MasterRequestRead+0x198>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f8cc 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e044      	b.n	80040d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800406a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f831 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004092:	d103      	bne.n	800409c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e017      	b.n	80040d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	11db      	asrs	r3, r3, #7
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f063 030e 	orn	r3, r3, #14
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4907      	ldr	r1, [pc, #28]	@ (80040dc <I2C_MasterRequestRead+0x198>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f888 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	00010008 	.word	0x00010008
 80040dc:	00010002 	.word	0x00010002

080040e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	e048      	b.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d044      	beq.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe ff33 	bl	8002f64 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d139      	bne.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10d      	bne.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x56>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	43da      	mvns	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	e00c      	b.n	8004150 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	429a      	cmp	r2, r3
 8004154:	d116      	bne.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e023      	b.n	80041cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10d      	bne.n	80041aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	e00c      	b.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	43da      	mvns	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d093      	beq.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e2:	e071      	b.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f2:	d123      	bne.n	800423c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004202:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800420c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e067      	b.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d041      	beq.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fe fe8e 	bl	8002f64 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d136      	bne.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10c      	bne.n	800427e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e00b      	b.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	43da      	mvns	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d016      	beq.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e021      	b.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10c      	bne.n	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	43da      	mvns	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e00b      	b.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f af6d 	bne.w	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004320:	e034      	b.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f8e3 	bl	80044ee <I2C_IsAcknowledgeFailed>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e034      	b.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d028      	beq.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433a:	f7fe fe13 	bl	8002f64 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11d      	bne.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d016      	beq.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b80      	cmp	r3, #128	@ 0x80
 8004398:	d1c3      	bne.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043b0:	e034      	b.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f89b 	bl	80044ee <I2C_IsAcknowledgeFailed>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e034      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d028      	beq.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fe fdcb 	bl	8002f64 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11d      	bne.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d016      	beq.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e007      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d1c3      	bne.n	80043b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004440:	e049      	b.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d119      	bne.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0210 	mvn.w	r2, #16
 8004458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e030      	b.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004484:	f7fe fd6e 	bl	8002f64 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11d      	bne.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b40      	cmp	r3, #64	@ 0x40
 80044a6:	d016      	beq.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e007      	b.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	d1ae      	bne.n	8004442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004504:	d11b      	bne.n	800453e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800450e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f043 0204 	orr.w	r2, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e267      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d075      	beq.n	8004656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456a:	4b88      	ldr	r3, [pc, #544]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b04      	cmp	r3, #4
 8004574:	d00c      	beq.n	8004590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004576:	4b85      	ldr	r3, [pc, #532]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800457e:	2b08      	cmp	r3, #8
 8004580:	d112      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004582:	4b82      	ldr	r3, [pc, #520]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800458e:	d10b      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	4b7e      	ldr	r3, [pc, #504]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05b      	beq.n	8004654 <HAL_RCC_OscConfig+0x108>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d157      	bne.n	8004654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e242      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b0:	d106      	bne.n	80045c0 <HAL_RCC_OscConfig+0x74>
 80045b2:	4b76      	ldr	r3, [pc, #472]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a75      	ldr	r2, [pc, #468]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e01d      	b.n	80045fc <HAL_RCC_OscConfig+0xb0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x98>
 80045ca:	4b70      	ldr	r3, [pc, #448]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6f      	ldr	r2, [pc, #444]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e00b      	b.n	80045fc <HAL_RCC_OscConfig+0xb0>
 80045e4:	4b69      	ldr	r3, [pc, #420]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a68      	ldr	r2, [pc, #416]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b66      	ldr	r3, [pc, #408]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a65      	ldr	r2, [pc, #404]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d013      	beq.n	800462c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fe fcae 	bl	8002f64 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460c:	f7fe fcaa 	bl	8002f64 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	@ 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e207      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0xc0>
 800462a:	e014      	b.n	8004656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fc9a 	bl	8002f64 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe fc96 	bl	8002f64 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	@ 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e1f3      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	4b51      	ldr	r3, [pc, #324]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0xe8>
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d063      	beq.n	800472a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004662:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466e:	4b47      	ldr	r3, [pc, #284]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004676:	2b08      	cmp	r3, #8
 8004678:	d11c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b44      	ldr	r3, [pc, #272]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d116      	bne.n	80046b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004686:	4b41      	ldr	r3, [pc, #260]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_RCC_OscConfig+0x152>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e1c7      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469e:	4b3b      	ldr	r3, [pc, #236]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4937      	ldr	r1, [pc, #220]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b2:	e03a      	b.n	800472a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046bc:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCC_OscConfig+0x244>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fe fc4f 	bl	8002f64 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ca:	f7fe fc4b 	bl	8002f64 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e1a8      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	4b2b      	ldr	r3, [pc, #172]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e8:	4b28      	ldr	r3, [pc, #160]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4925      	ldr	r1, [pc, #148]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]
 80046fc:	e015      	b.n	800472a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fe:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HAL_RCC_OscConfig+0x244>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fe fc2e 	bl	8002f64 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470c:	f7fe fc2a 	bl	8002f64 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e187      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d036      	beq.n	80047a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_RCC_OscConfig+0x248>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fe fc0e 	bl	8002f64 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474c:	f7fe fc0a 	bl	8002f64 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e167      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x200>
 800476a:	e01b      	b.n	80047a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476c:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_RCC_OscConfig+0x248>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004772:	f7fe fbf7 	bl	8002f64 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004778:	e00e      	b.n	8004798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477a:	f7fe fbf3 	bl	8002f64 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d907      	bls.n	8004798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e150      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
 800478c:	40023800 	.word	0x40023800
 8004790:	42470000 	.word	0x42470000
 8004794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	4b88      	ldr	r3, [pc, #544]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800479a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ea      	bne.n	800477a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8097 	beq.w	80048e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b6:	4b81      	ldr	r3, [pc, #516]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	4b7d      	ldr	r3, [pc, #500]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	4a7c      	ldr	r2, [pc, #496]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d2:	4b7a      	ldr	r3, [pc, #488]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e2:	4b77      	ldr	r3, [pc, #476]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d118      	bne.n	8004820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ee:	4b74      	ldr	r3, [pc, #464]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a73      	ldr	r2, [pc, #460]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 80047f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fa:	f7fe fbb3 	bl	8002f64 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004802:	f7fe fbaf 	bl	8002f64 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e10c      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	4b6a      	ldr	r3, [pc, #424]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x2ea>
 8004828:	4b64      	ldr	r3, [pc, #400]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	4a63      	ldr	r2, [pc, #396]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6713      	str	r3, [r2, #112]	@ 0x70
 8004834:	e01c      	b.n	8004870 <HAL_RCC_OscConfig+0x324>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b05      	cmp	r3, #5
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x30c>
 800483e:	4b5f      	ldr	r3, [pc, #380]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004842:	4a5e      	ldr	r2, [pc, #376]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	6713      	str	r3, [r2, #112]	@ 0x70
 800484a:	4b5c      	ldr	r3, [pc, #368]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	4a5b      	ldr	r2, [pc, #364]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6713      	str	r3, [r2, #112]	@ 0x70
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0x324>
 8004858:	4b58      	ldr	r3, [pc, #352]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485c:	4a57      	ldr	r2, [pc, #348]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	6713      	str	r3, [r2, #112]	@ 0x70
 8004864:	4b55      	ldr	r3, [pc, #340]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	4a54      	ldr	r2, [pc, #336]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800486a:	f023 0304 	bic.w	r3, r3, #4
 800486e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d015      	beq.n	80048a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fe fb74 	bl	8002f64 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	e00a      	b.n	8004896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fe fb70 	bl	8002f64 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0cb      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	4b49      	ldr	r3, [pc, #292]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ee      	beq.n	8004880 <HAL_RCC_OscConfig+0x334>
 80048a2:	e014      	b.n	80048ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a4:	f7fe fb5e 	bl	8002f64 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fe fb5a 	bl	8002f64 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e0b5      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c2:	4b3e      	ldr	r3, [pc, #248]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ee      	bne.n	80048ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d4:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	4a38      	ldr	r2, [pc, #224]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a1 	beq.w	8004a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ea:	4b34      	ldr	r3, [pc, #208]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d05c      	beq.n	80049b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d141      	bne.n	8004982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b31      	ldr	r3, [pc, #196]	@ (80049c4 <HAL_RCC_OscConfig+0x478>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fe fb2e 	bl	8002f64 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fe fb2a 	bl	8002f64 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e087      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	3b01      	subs	r3, #1
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	061b      	lsls	r3, r3, #24
 800494e:	491b      	ldr	r1, [pc, #108]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004954:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x478>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495a:	f7fe fb03 	bl	8002f64 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004962:	f7fe faff 	bl	8002f64 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e05c      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x416>
 8004980:	e054      	b.n	8004a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004982:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <HAL_RCC_OscConfig+0x478>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fe faec 	bl	8002f64 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004990:	f7fe fae8 	bl	8002f64 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e045      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x444>
 80049ae:	e03d      	b.n	8004a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e038      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40007000 	.word	0x40007000
 80049c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a38 <HAL_RCC_OscConfig+0x4ec>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d028      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d121      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d11a      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049f8:	4013      	ands	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d111      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	3b01      	subs	r3, #1
 8004a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d107      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800

08004a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0cc      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b68      	ldr	r3, [pc, #416]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d90c      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b65      	ldr	r3, [pc, #404]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b63      	ldr	r3, [pc, #396]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0b8      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a90:	4b59      	ldr	r3, [pc, #356]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a58      	ldr	r2, [pc, #352]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa8:	4b53      	ldr	r3, [pc, #332]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a52      	ldr	r2, [pc, #328]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b50      	ldr	r3, [pc, #320]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	494d      	ldr	r1, [pc, #308]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d044      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b47      	ldr	r3, [pc, #284]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d119      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e07f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d003      	beq.n	8004afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afa:	4b3f      	ldr	r3, [pc, #252]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e06f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e067      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1a:	4b37      	ldr	r3, [pc, #220]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 0203 	bic.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4934      	ldr	r1, [pc, #208]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b2c:	f7fe fa1a 	bl	8002f64 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fe fa16 	bl	8002f64 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e04f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 020c 	and.w	r2, r3, #12
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1eb      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b25      	ldr	r3, [pc, #148]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d20c      	bcs.n	8004b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b22      	ldr	r3, [pc, #136]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b20      	ldr	r3, [pc, #128]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e032      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b90:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4916      	ldr	r1, [pc, #88]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bae:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	490e      	ldr	r1, [pc, #56]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bc2:	f000 f821 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	490a      	ldr	r1, [pc, #40]	@ (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	5ccb      	ldrb	r3, [r1, r3]
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bde:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <HAL_RCC_ClockConfig+0x1c8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe f97a 	bl	8002edc <HAL_InitTick>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023c00 	.word	0x40023c00
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	08008864 	.word	0x08008864
 8004c00:	20000024 	.word	0x20000024
 8004c04:	20000028 	.word	0x20000028

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c0c:	b090      	sub	sp, #64	@ 0x40
 8004c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c14:	2300      	movs	r3, #0
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c18:	2300      	movs	r3, #0
 8004c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c20:	4b59      	ldr	r3, [pc, #356]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d00d      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x40>
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	f200 80a1 	bhi.w	8004d74 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x34>
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c3a:	e09b      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4b53      	ldr	r3, [pc, #332]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004c40:	e09b      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c42:	4b53      	ldr	r3, [pc, #332]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c46:	e098      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c48:	4b4f      	ldr	r3, [pc, #316]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c50:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c52:	4b4d      	ldr	r3, [pc, #308]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d028      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	2200      	movs	r2, #0
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c70:	2100      	movs	r1, #0
 8004c72:	4b47      	ldr	r3, [pc, #284]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c74:	fb03 f201 	mul.w	r2, r3, r1
 8004c78:	2300      	movs	r3, #0
 8004c7a:	fb00 f303 	mul.w	r3, r0, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	4a43      	ldr	r2, [pc, #268]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c82:	fba0 1202 	umull	r1, r2, r0, r2
 8004c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c88:	460a      	mov	r2, r1
 8004c8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c8e:	4413      	add	r3, r2
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	2200      	movs	r2, #0
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	61fa      	str	r2, [r7, #28]
 8004c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ca2:	f7fb ff81 	bl	8000ba8 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4613      	mov	r3, r2
 8004cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cae:	e053      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb0:	4b35      	ldr	r3, [pc, #212]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	617a      	str	r2, [r7, #20]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cc2:	f04f 0b00 	mov.w	fp, #0
 8004cc6:	4652      	mov	r2, sl
 8004cc8:	465b      	mov	r3, fp
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	0159      	lsls	r1, r3, #5
 8004cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd8:	0150      	lsls	r0, r2, #5
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	ebb2 080a 	subs.w	r8, r2, sl
 8004ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cfa:	ebb2 0408 	subs.w	r4, r2, r8
 8004cfe:	eb63 0509 	sbc.w	r5, r3, r9
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	00eb      	lsls	r3, r5, #3
 8004d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d10:	00e2      	lsls	r2, r4, #3
 8004d12:	4614      	mov	r4, r2
 8004d14:	461d      	mov	r5, r3
 8004d16:	eb14 030a 	adds.w	r3, r4, sl
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	eb45 030b 	adc.w	r3, r5, fp
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d2e:	4629      	mov	r1, r5
 8004d30:	028b      	lsls	r3, r1, #10
 8004d32:	4621      	mov	r1, r4
 8004d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d38:	4621      	mov	r1, r4
 8004d3a:	028a      	lsls	r2, r1, #10
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d42:	2200      	movs	r2, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	60fa      	str	r2, [r7, #12]
 8004d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4c:	f7fb ff2c 	bl	8000ba8 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	3301      	adds	r3, #1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004d68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d72:	e002      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3740      	adds	r7, #64	@ 0x40
 8004d80:	46bd      	mov	sp, r7
 8004d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	017d7840 	.word	0x017d7840

08004d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b03      	ldr	r3, [pc, #12]	@ (8004da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000024 	.word	0x20000024

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004db0:	f7ff fff0 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0a9b      	lsrs	r3, r3, #10
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	08008874 	.word	0x08008874

08004dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd8:	f7ff ffdc 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	0b5b      	lsrs	r3, r3, #13
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	@ (8004df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40023800 	.word	0x40023800
 8004df8:	08008874 	.word	0x08008874

08004dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fe7a 	bl	8002b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fe2c 	bl	8005a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x24>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e022      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d109      	bne.n	8004eda <HAL_TIM_PWM_Start+0x3e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e015      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d109      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0x58>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e068      	b.n	8004fe0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x82>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1c:	e013      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0x92>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f2c:	e00b      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3c:	e003      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 f8d8 	bl	8006104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a23      	ldr	r2, [pc, #140]	@ (8004fe8 <HAL_TIM_PWM_Start+0x14c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d107      	bne.n	8004f6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <HAL_TIM_PWM_Start+0x14c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d018      	beq.n	8004faa <HAL_TIM_PWM_Start+0x10e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f80:	d013      	beq.n	8004faa <HAL_TIM_PWM_Start+0x10e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <HAL_TIM_PWM_Start+0x150>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_TIM_PWM_Start+0x10e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a17      	ldr	r2, [pc, #92]	@ (8004ff0 <HAL_TIM_PWM_Start+0x154>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d009      	beq.n	8004faa <HAL_TIM_PWM_Start+0x10e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	@ (8004ff4 <HAL_TIM_PWM_Start+0x158>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIM_PWM_Start+0x10e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <HAL_TIM_PWM_Start+0x15c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d111      	bne.n	8004fce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b06      	cmp	r3, #6
 8004fba:	d010      	beq.n	8004fde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	e007      	b.n	8004fde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40014000 	.word	0x40014000

08004ffc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e041      	b.n	8005092 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fd fd2a 	bl	8002a7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fd2c 	bl	8005a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_IC_Start_IT+0x1e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e013      	b.n	80050e2 <HAL_TIM_IC_Start_IT+0x46>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d104      	bne.n	80050ca <HAL_TIM_IC_Start_IT+0x2e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_IC_Start_IT+0x46>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d104      	bne.n	80050da <HAL_TIM_IC_Start_IT+0x3e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	e003      	b.n	80050e2 <HAL_TIM_IC_Start_IT+0x46>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <HAL_TIM_IC_Start_IT+0x58>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e013      	b.n	800511c <HAL_TIM_IC_Start_IT+0x80>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d104      	bne.n	8005104 <HAL_TIM_IC_Start_IT+0x68>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e00b      	b.n	800511c <HAL_TIM_IC_Start_IT+0x80>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d104      	bne.n	8005114 <HAL_TIM_IC_Start_IT+0x78>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e003      	b.n	800511c <HAL_TIM_IC_Start_IT+0x80>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800511a:	b2db      	uxtb	r3, r3
 800511c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d102      	bne.n	800512a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005124:	7b7b      	ldrb	r3, [r7, #13]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d001      	beq.n	800512e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e0c2      	b.n	80052b4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_TIM_IC_Start_IT+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800513c:	e013      	b.n	8005166 <HAL_TIM_IC_Start_IT+0xca>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d104      	bne.n	800514e <HAL_TIM_IC_Start_IT+0xb2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800514c:	e00b      	b.n	8005166 <HAL_TIM_IC_Start_IT+0xca>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d104      	bne.n	800515e <HAL_TIM_IC_Start_IT+0xc2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800515c:	e003      	b.n	8005166 <HAL_TIM_IC_Start_IT+0xca>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0xda>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005174:	e013      	b.n	800519e <HAL_TIM_IC_Start_IT+0x102>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d104      	bne.n	8005186 <HAL_TIM_IC_Start_IT+0xea>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005184:	e00b      	b.n	800519e <HAL_TIM_IC_Start_IT+0x102>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d104      	bne.n	8005196 <HAL_TIM_IC_Start_IT+0xfa>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005194:	e003      	b.n	800519e <HAL_TIM_IC_Start_IT+0x102>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b0c      	cmp	r3, #12
 80051a2:	d841      	bhi.n	8005228 <HAL_TIM_IC_Start_IT+0x18c>
 80051a4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <HAL_TIM_IC_Start_IT+0x110>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	08005229 	.word	0x08005229
 80051b4:	08005229 	.word	0x08005229
 80051b8:	08005229 	.word	0x08005229
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	08005229 	.word	0x08005229
 80051c4:	08005229 	.word	0x08005229
 80051c8:	08005229 	.word	0x08005229
 80051cc:	08005205 	.word	0x08005205
 80051d0:	08005229 	.word	0x08005229
 80051d4:	08005229 	.word	0x08005229
 80051d8:	08005229 	.word	0x08005229
 80051dc:	08005217 	.word	0x08005217
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0202 	orr.w	r2, r2, #2
 80051ee:	60da      	str	r2, [r3, #12]
      break;
 80051f0:	e01d      	b.n	800522e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0204 	orr.w	r2, r2, #4
 8005200:	60da      	str	r2, [r3, #12]
      break;
 8005202:	e014      	b.n	800522e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0208 	orr.w	r2, r2, #8
 8005212:	60da      	str	r2, [r3, #12]
      break;
 8005214:	e00b      	b.n	800522e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0210 	orr.w	r2, r2, #16
 8005224:	60da      	str	r2, [r3, #12]
      break;
 8005226:	e002      	b.n	800522e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      break;
 800522c:	bf00      	nop
  }

  if (status == HAL_OK)
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d13e      	bne.n	80052b2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 ff61 	bl	8006104 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1d      	ldr	r2, [pc, #116]	@ (80052bc <HAL_TIM_IC_Start_IT+0x220>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d018      	beq.n	800527e <HAL_TIM_IC_Start_IT+0x1e2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005254:	d013      	beq.n	800527e <HAL_TIM_IC_Start_IT+0x1e2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a19      	ldr	r2, [pc, #100]	@ (80052c0 <HAL_TIM_IC_Start_IT+0x224>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIM_IC_Start_IT+0x1e2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a17      	ldr	r2, [pc, #92]	@ (80052c4 <HAL_TIM_IC_Start_IT+0x228>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_TIM_IC_Start_IT+0x1e2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a16      	ldr	r2, [pc, #88]	@ (80052c8 <HAL_TIM_IC_Start_IT+0x22c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIM_IC_Start_IT+0x1e2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a14      	ldr	r2, [pc, #80]	@ (80052cc <HAL_TIM_IC_Start_IT+0x230>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d111      	bne.n	80052a2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d010      	beq.n	80052b2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	e007      	b.n	80052b2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800
 80052c8:	40000c00 	.word	0x40000c00
 80052cc:	40014000 	.word	0x40014000

080052d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e097      	b.n	8005414 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fd fb77 	bl	80029ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f000 fbb7 	bl	8005a98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	4313      	orrs	r3, r2
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005370:	f023 030c 	bic.w	r3, r3, #12
 8005374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800537c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	4313      	orrs	r3, r2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	4313      	orrs	r3, r2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	4313      	orrs	r3, r2
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800542c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005434:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800543c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005444:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d110      	bne.n	800546e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d102      	bne.n	8005458 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005452:	7b7b      	ldrb	r3, [r7, #13]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e069      	b.n	8005530 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800546c:	e031      	b.n	80054d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b04      	cmp	r3, #4
 8005472:	d110      	bne.n	8005496 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005474:	7bbb      	ldrb	r3, [r7, #14]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d102      	bne.n	8005480 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800547a:	7b3b      	ldrb	r3, [r7, #12]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d001      	beq.n	8005484 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e055      	b.n	8005530 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005494:	e01d      	b.n	80054d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d108      	bne.n	80054ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d105      	bne.n	80054ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a2:	7b7b      	ldrb	r3, [r7, #13]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054a8:	7b3b      	ldrb	r3, [r7, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e03e      	b.n	8005530 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_TIM_Encoder_Start+0xc4>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d008      	beq.n	80054f0 <HAL_TIM_Encoder_Start+0xd4>
 80054de:	e00f      	b.n	8005500 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2201      	movs	r2, #1
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fe0b 	bl	8006104 <TIM_CCxChannelCmd>
      break;
 80054ee:	e016      	b.n	800551e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	2104      	movs	r1, #4
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fe03 	bl	8006104 <TIM_CCxChannelCmd>
      break;
 80054fe:	e00e      	b.n	800551e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2201      	movs	r2, #1
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fdfb 	bl	8006104 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2201      	movs	r2, #1
 8005514:	2104      	movs	r1, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fdf4 	bl	8006104 <TIM_CCxChannelCmd>
      break;
 800551c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d020      	beq.n	800559c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01b      	beq.n	800559c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0202 	mvn.w	r2, #2
 800556c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fcbc 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa66 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fa6d 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d020      	beq.n	80055e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0204 	mvn.w	r2, #4
 80055b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc fc96 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa40 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa47 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0208 	mvn.w	r2, #8
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2204      	movs	r2, #4
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc fc70 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa1a 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fa21 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	d020      	beq.n	8005680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01b      	beq.n	8005680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0210 	mvn.w	r2, #16
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2208      	movs	r2, #8
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc fc4a 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9f4 	bl	8005a5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f9fb 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0201 	mvn.w	r2, #1
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc fc06 	bl	8001eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00c      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fdbc 	bl	8006240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00c      	beq.n	80056ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f9cc 	bl	8005a84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00c      	beq.n	8005710 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0220 	mvn.w	r2, #32
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fd8e 	bl	800622c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005732:	2302      	movs	r3, #2
 8005734:	e088      	b.n	8005848 <HAL_TIM_IC_ConfigChannel+0x130>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005754:	f000 fbb8 	bl	8005ec8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 020c 	bic.w	r2, r2, #12
 8005766:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6999      	ldr	r1, [r3, #24]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	619a      	str	r2, [r3, #24]
 800577a:	e060      	b.n	800583e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d11c      	bne.n	80057bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005792:	f000 fc01 	bl	8005f98 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6999      	ldr	r1, [r3, #24]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	021a      	lsls	r2, r3, #8
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	619a      	str	r2, [r3, #24]
 80057ba:	e040      	b.n	800583e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d11b      	bne.n	80057fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80057d2:	f000 fc1e 	bl	8006012 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 020c 	bic.w	r2, r2, #12
 80057e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69d9      	ldr	r1, [r3, #28]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	61da      	str	r2, [r3, #28]
 80057f8:	e021      	b.n	800583e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b0c      	cmp	r3, #12
 80057fe:	d11c      	bne.n	800583a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005810:	f000 fc3b 	bl	800608a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69da      	ldr	r2, [r3, #28]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005822:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69d9      	ldr	r1, [r3, #28]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	61da      	str	r2, [r3, #28]
 8005838:	e001      	b.n	800583e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800586a:	2302      	movs	r3, #2
 800586c:	e0ae      	b.n	80059cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b0c      	cmp	r3, #12
 800587a:	f200 809f 	bhi.w	80059bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800587e:	a201      	add	r2, pc, #4	@ (adr r2, 8005884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080059bd 	.word	0x080059bd
 800588c:	080059bd 	.word	0x080059bd
 8005890:	080059bd 	.word	0x080059bd
 8005894:	080058f9 	.word	0x080058f9
 8005898:	080059bd 	.word	0x080059bd
 800589c:	080059bd 	.word	0x080059bd
 80058a0:	080059bd 	.word	0x080059bd
 80058a4:	0800593b 	.word	0x0800593b
 80058a8:	080059bd 	.word	0x080059bd
 80058ac:	080059bd 	.word	0x080059bd
 80058b0:	080059bd 	.word	0x080059bd
 80058b4:	0800597b 	.word	0x0800597b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f976 	bl	8005bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0208 	orr.w	r2, r2, #8
 80058d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0204 	bic.w	r2, r2, #4
 80058e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6999      	ldr	r1, [r3, #24]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	619a      	str	r2, [r3, #24]
      break;
 80058f6:	e064      	b.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f9bc 	bl	8005c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6999      	ldr	r1, [r3, #24]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	021a      	lsls	r2, r3, #8
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	619a      	str	r2, [r3, #24]
      break;
 8005938:	e043      	b.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fa07 	bl	8005d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0208 	orr.w	r2, r2, #8
 8005954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0204 	bic.w	r2, r2, #4
 8005964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69d9      	ldr	r1, [r3, #28]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	61da      	str	r2, [r3, #28]
      break;
 8005978:	e023      	b.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fa51 	bl	8005e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69d9      	ldr	r1, [r3, #28]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	021a      	lsls	r2, r3, #8
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	61da      	str	r2, [r3, #28]
      break;
 80059ba:	e002      	b.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	d831      	bhi.n	8005a4c <HAL_TIM_ReadCapturedValue+0x78>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005a4d 	.word	0x08005a4d
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005a4d 	.word	0x08005a4d
 8005a00:	08005a2f 	.word	0x08005a2f
 8005a04:	08005a4d 	.word	0x08005a4d
 8005a08:	08005a4d 	.word	0x08005a4d
 8005a0c:	08005a4d 	.word	0x08005a4d
 8005a10:	08005a39 	.word	0x08005a39
 8005a14:	08005a4d 	.word	0x08005a4d
 8005a18:	08005a4d 	.word	0x08005a4d
 8005a1c:	08005a4d 	.word	0x08005a4d
 8005a20:	08005a43 	.word	0x08005a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2a:	60fb      	str	r3, [r7, #12]

      break;
 8005a2c:	e00f      	b.n	8005a4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	60fb      	str	r3, [r7, #12]

      break;
 8005a36:	e00a      	b.n	8005a4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3e:	60fb      	str	r3, [r7, #12]

      break;
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	60fb      	str	r3, [r7, #12]

      break;
 8005a4a:	e000      	b.n	8005a4e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a4c:	bf00      	nop
  }

  return tmpreg;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8005b94 <TIM_Base_SetConfig+0xfc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a37      	ldr	r2, [pc, #220]	@ (8005b98 <TIM_Base_SetConfig+0x100>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a36      	ldr	r2, [pc, #216]	@ (8005b9c <TIM_Base_SetConfig+0x104>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x38>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a35      	ldr	r2, [pc, #212]	@ (8005ba0 <TIM_Base_SetConfig+0x108>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b94 <TIM_Base_SetConfig+0xfc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01b      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af0:	d017      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a28      	ldr	r2, [pc, #160]	@ (8005b98 <TIM_Base_SetConfig+0x100>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	@ (8005b9c <TIM_Base_SetConfig+0x104>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	@ (8005ba0 <TIM_Base_SetConfig+0x108>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	@ (8005ba4 <TIM_Base_SetConfig+0x10c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a24      	ldr	r2, [pc, #144]	@ (8005ba8 <TIM_Base_SetConfig+0x110>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_Base_SetConfig+0x8a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <TIM_Base_SetConfig+0x114>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d108      	bne.n	8005b34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8005b94 <TIM_Base_SetConfig+0xfc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d103      	bne.n	8005b68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d105      	bne.n	8005b86 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]
  }
}
 8005b86:	bf00      	nop
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f023 0201 	bic.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 0302 	bic.w	r3, r3, #2
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a1c      	ldr	r2, [pc, #112]	@ (8005c78 <TIM_OC1_SetConfig+0xc8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10c      	bne.n	8005c26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0308 	bic.w	r3, r3, #8
 8005c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f023 0304 	bic.w	r3, r3, #4
 8005c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a13      	ldr	r2, [pc, #76]	@ (8005c78 <TIM_OC1_SetConfig+0xc8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40010000 	.word	0x40010000

08005c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f023 0210 	bic.w	r2, r3, #16
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0320 	bic.w	r3, r3, #32
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d50 <TIM_OC2_SetConfig+0xd4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10d      	bne.n	8005cf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <TIM_OC2_SetConfig+0xd4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d113      	bne.n	8005d28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40010000 	.word	0x40010000

08005d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <TIM_OC3_SetConfig+0xd0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10d      	bne.n	8005dce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a14      	ldr	r2, [pc, #80]	@ (8005e24 <TIM_OC3_SetConfig+0xd0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d113      	bne.n	8005dfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40010000 	.word	0x40010000

08005e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	031b      	lsls	r3, r3, #12
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a10      	ldr	r2, [pc, #64]	@ (8005ec4 <TIM_OC4_SetConfig+0x9c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d109      	bne.n	8005e9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40010000 	.word	0x40010000

08005ec8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f023 0201 	bic.w	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4a24      	ldr	r2, [pc, #144]	@ (8005f84 <TIM_TI1_SetConfig+0xbc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <TIM_TI1_SetConfig+0x56>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efc:	d00f      	beq.n	8005f1e <TIM_TI1_SetConfig+0x56>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a21      	ldr	r2, [pc, #132]	@ (8005f88 <TIM_TI1_SetConfig+0xc0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_TI1_SetConfig+0x56>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a20      	ldr	r2, [pc, #128]	@ (8005f8c <TIM_TI1_SetConfig+0xc4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_TI1_SetConfig+0x56>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a1f      	ldr	r2, [pc, #124]	@ (8005f90 <TIM_TI1_SetConfig+0xc8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_TI1_SetConfig+0x56>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a1e      	ldr	r2, [pc, #120]	@ (8005f94 <TIM_TI1_SetConfig+0xcc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d101      	bne.n	8005f22 <TIM_TI1_SetConfig+0x5a>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <TIM_TI1_SetConfig+0x5c>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e003      	b.n	8005f42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f023 030a 	bic.w	r3, r3, #10
 8005f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 030a 	and.w	r3, r3, #10
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40014000 	.word	0x40014000

08005f98 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f023 0210 	bic.w	r2, r3, #16
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	031b      	lsls	r3, r3, #12
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	b2db      	uxtb	r3, r3
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	621a      	str	r2, [r3, #32]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800608a:	b480      	push	{r7}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80060dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	031b      	lsls	r3, r3, #12
 80060e2:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	621a      	str	r2, [r3, #32]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2201      	movs	r2, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1a      	ldr	r2, [r3, #32]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	43db      	mvns	r3, r3
 8006126:	401a      	ands	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e050      	b.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d018      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b4:	d013      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a18      	ldr	r2, [pc, #96]	@ (800621c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00e      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a16      	ldr	r2, [pc, #88]	@ (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d009      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a15      	ldr	r2, [pc, #84]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a13      	ldr	r2, [pc, #76]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d10c      	bne.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40010000 	.word	0x40010000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40014000 	.word	0x40014000

0800622c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e042      	b.n	80062ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fc fcaa 	bl	8002bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	@ 0x24
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f82b 	bl	80062f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f8:	b0c0      	sub	sp, #256	@ 0x100
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006310:	68d9      	ldr	r1, [r3, #12]
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	ea40 0301 	orr.w	r3, r0, r1
 800631c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800631e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	431a      	orrs	r2, r3
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	431a      	orrs	r2, r3
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800634c:	f021 010c 	bic.w	r1, r1, #12
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800635a:	430b      	orrs	r3, r1
 800635c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636e:	6999      	ldr	r1, [r3, #24]
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	ea40 0301 	orr.w	r3, r0, r1
 800637a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b8f      	ldr	r3, [pc, #572]	@ (80065c0 <UART_SetConfig+0x2cc>)
 8006384:	429a      	cmp	r2, r3
 8006386:	d005      	beq.n	8006394 <UART_SetConfig+0xa0>
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b8d      	ldr	r3, [pc, #564]	@ (80065c4 <UART_SetConfig+0x2d0>)
 8006390:	429a      	cmp	r2, r3
 8006392:	d104      	bne.n	800639e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006394:	f7fe fd1e 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 8006398:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800639c:	e003      	b.n	80063a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800639e:	f7fe fd05 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 80063a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b0:	f040 810c 	bne.w	80065cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063c6:	4622      	mov	r2, r4
 80063c8:	462b      	mov	r3, r5
 80063ca:	1891      	adds	r1, r2, r2
 80063cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063ce:	415b      	adcs	r3, r3
 80063d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063d6:	4621      	mov	r1, r4
 80063d8:	eb12 0801 	adds.w	r8, r2, r1
 80063dc:	4629      	mov	r1, r5
 80063de:	eb43 0901 	adc.w	r9, r3, r1
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f6:	4690      	mov	r8, r2
 80063f8:	4699      	mov	r9, r3
 80063fa:	4623      	mov	r3, r4
 80063fc:	eb18 0303 	adds.w	r3, r8, r3
 8006400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006404:	462b      	mov	r3, r5
 8006406:	eb49 0303 	adc.w	r3, r9, r3
 800640a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800641a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800641e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006422:	460b      	mov	r3, r1
 8006424:	18db      	adds	r3, r3, r3
 8006426:	653b      	str	r3, [r7, #80]	@ 0x50
 8006428:	4613      	mov	r3, r2
 800642a:	eb42 0303 	adc.w	r3, r2, r3
 800642e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006430:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006434:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006438:	f7fa fbb6 	bl	8000ba8 <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4b61      	ldr	r3, [pc, #388]	@ (80065c8 <UART_SetConfig+0x2d4>)
 8006442:	fba3 2302 	umull	r2, r3, r3, r2
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	011c      	lsls	r4, r3, #4
 800644a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644e:	2200      	movs	r2, #0
 8006450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006454:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006458:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800645c:	4642      	mov	r2, r8
 800645e:	464b      	mov	r3, r9
 8006460:	1891      	adds	r1, r2, r2
 8006462:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006464:	415b      	adcs	r3, r3
 8006466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006468:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800646c:	4641      	mov	r1, r8
 800646e:	eb12 0a01 	adds.w	sl, r2, r1
 8006472:	4649      	mov	r1, r9
 8006474:	eb43 0b01 	adc.w	fp, r3, r1
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006484:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800648c:	4692      	mov	sl, r2
 800648e:	469b      	mov	fp, r3
 8006490:	4643      	mov	r3, r8
 8006492:	eb1a 0303 	adds.w	r3, sl, r3
 8006496:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800649a:	464b      	mov	r3, r9
 800649c:	eb4b 0303 	adc.w	r3, fp, r3
 80064a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064b8:	460b      	mov	r3, r1
 80064ba:	18db      	adds	r3, r3, r3
 80064bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80064be:	4613      	mov	r3, r2
 80064c0:	eb42 0303 	adc.w	r3, r2, r3
 80064c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064ce:	f7fa fb6b 	bl	8000ba8 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4611      	mov	r1, r2
 80064d8:	4b3b      	ldr	r3, [pc, #236]	@ (80065c8 <UART_SetConfig+0x2d4>)
 80064da:	fba3 2301 	umull	r2, r3, r3, r1
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	2264      	movs	r2, #100	@ 0x64
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	1acb      	subs	r3, r1, r3
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064ee:	4b36      	ldr	r3, [pc, #216]	@ (80065c8 <UART_SetConfig+0x2d4>)
 80064f0:	fba3 2302 	umull	r2, r3, r3, r2
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064fc:	441c      	add	r4, r3
 80064fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006502:	2200      	movs	r2, #0
 8006504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006508:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800650c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006510:	4642      	mov	r2, r8
 8006512:	464b      	mov	r3, r9
 8006514:	1891      	adds	r1, r2, r2
 8006516:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006518:	415b      	adcs	r3, r3
 800651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800651c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006520:	4641      	mov	r1, r8
 8006522:	1851      	adds	r1, r2, r1
 8006524:	6339      	str	r1, [r7, #48]	@ 0x30
 8006526:	4649      	mov	r1, r9
 8006528:	414b      	adcs	r3, r1
 800652a:	637b      	str	r3, [r7, #52]	@ 0x34
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006538:	4659      	mov	r1, fp
 800653a:	00cb      	lsls	r3, r1, #3
 800653c:	4651      	mov	r1, sl
 800653e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006542:	4651      	mov	r1, sl
 8006544:	00ca      	lsls	r2, r1, #3
 8006546:	4610      	mov	r0, r2
 8006548:	4619      	mov	r1, r3
 800654a:	4603      	mov	r3, r0
 800654c:	4642      	mov	r2, r8
 800654e:	189b      	adds	r3, r3, r2
 8006550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006554:	464b      	mov	r3, r9
 8006556:	460a      	mov	r2, r1
 8006558:	eb42 0303 	adc.w	r3, r2, r3
 800655c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800656c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006570:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006574:	460b      	mov	r3, r1
 8006576:	18db      	adds	r3, r3, r3
 8006578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800657a:	4613      	mov	r3, r2
 800657c:	eb42 0303 	adc.w	r3, r2, r3
 8006580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006586:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800658a:	f7fa fb0d 	bl	8000ba8 <__aeabi_uldivmod>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <UART_SetConfig+0x2d4>)
 8006594:	fba3 1302 	umull	r1, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	2164      	movs	r1, #100	@ 0x64
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	3332      	adds	r3, #50	@ 0x32
 80065a6:	4a08      	ldr	r2, [pc, #32]	@ (80065c8 <UART_SetConfig+0x2d4>)
 80065a8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	f003 0207 	and.w	r2, r3, #7
 80065b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4422      	add	r2, r4
 80065ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065bc:	e106      	b.n	80067cc <UART_SetConfig+0x4d8>
 80065be:	bf00      	nop
 80065c0:	40011000 	.word	0x40011000
 80065c4:	40011400 	.word	0x40011400
 80065c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065de:	4642      	mov	r2, r8
 80065e0:	464b      	mov	r3, r9
 80065e2:	1891      	adds	r1, r2, r2
 80065e4:	6239      	str	r1, [r7, #32]
 80065e6:	415b      	adcs	r3, r3
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ee:	4641      	mov	r1, r8
 80065f0:	1854      	adds	r4, r2, r1
 80065f2:	4649      	mov	r1, r9
 80065f4:	eb43 0501 	adc.w	r5, r3, r1
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	00eb      	lsls	r3, r5, #3
 8006602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006606:	00e2      	lsls	r2, r4, #3
 8006608:	4614      	mov	r4, r2
 800660a:	461d      	mov	r5, r3
 800660c:	4643      	mov	r3, r8
 800660e:	18e3      	adds	r3, r4, r3
 8006610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006614:	464b      	mov	r3, r9
 8006616:	eb45 0303 	adc.w	r3, r5, r3
 800661a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800661e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800662a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800663a:	4629      	mov	r1, r5
 800663c:	008b      	lsls	r3, r1, #2
 800663e:	4621      	mov	r1, r4
 8006640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006644:	4621      	mov	r1, r4
 8006646:	008a      	lsls	r2, r1, #2
 8006648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800664c:	f7fa faac 	bl	8000ba8 <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4b60      	ldr	r3, [pc, #384]	@ (80067d8 <UART_SetConfig+0x4e4>)
 8006656:	fba3 2302 	umull	r2, r3, r3, r2
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	011c      	lsls	r4, r3, #4
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006662:	2200      	movs	r2, #0
 8006664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006668:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800666c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	1891      	adds	r1, r2, r2
 8006676:	61b9      	str	r1, [r7, #24]
 8006678:	415b      	adcs	r3, r3
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006680:	4641      	mov	r1, r8
 8006682:	1851      	adds	r1, r2, r1
 8006684:	6139      	str	r1, [r7, #16]
 8006686:	4649      	mov	r1, r9
 8006688:	414b      	adcs	r3, r1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006698:	4659      	mov	r1, fp
 800669a:	00cb      	lsls	r3, r1, #3
 800669c:	4651      	mov	r1, sl
 800669e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066a2:	4651      	mov	r1, sl
 80066a4:	00ca      	lsls	r2, r1, #3
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	4642      	mov	r2, r8
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066b4:	464b      	mov	r3, r9
 80066b6:	460a      	mov	r2, r1
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066d8:	4649      	mov	r1, r9
 80066da:	008b      	lsls	r3, r1, #2
 80066dc:	4641      	mov	r1, r8
 80066de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e2:	4641      	mov	r1, r8
 80066e4:	008a      	lsls	r2, r1, #2
 80066e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066ea:	f7fa fa5d 	bl	8000ba8 <__aeabi_uldivmod>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	4b38      	ldr	r3, [pc, #224]	@ (80067d8 <UART_SetConfig+0x4e4>)
 80066f6:	fba3 2301 	umull	r2, r3, r3, r1
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	2264      	movs	r2, #100	@ 0x64
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	1acb      	subs	r3, r1, r3
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	3332      	adds	r3, #50	@ 0x32
 8006708:	4a33      	ldr	r2, [pc, #204]	@ (80067d8 <UART_SetConfig+0x4e4>)
 800670a:	fba2 2303 	umull	r2, r3, r2, r3
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006714:	441c      	add	r4, r3
 8006716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671a:	2200      	movs	r2, #0
 800671c:	673b      	str	r3, [r7, #112]	@ 0x70
 800671e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006720:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006724:	4642      	mov	r2, r8
 8006726:	464b      	mov	r3, r9
 8006728:	1891      	adds	r1, r2, r2
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	415b      	adcs	r3, r3
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006734:	4641      	mov	r1, r8
 8006736:	1851      	adds	r1, r2, r1
 8006738:	6039      	str	r1, [r7, #0]
 800673a:	4649      	mov	r1, r9
 800673c:	414b      	adcs	r3, r1
 800673e:	607b      	str	r3, [r7, #4]
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800674c:	4659      	mov	r1, fp
 800674e:	00cb      	lsls	r3, r1, #3
 8006750:	4651      	mov	r1, sl
 8006752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006756:	4651      	mov	r1, sl
 8006758:	00ca      	lsls	r2, r1, #3
 800675a:	4610      	mov	r0, r2
 800675c:	4619      	mov	r1, r3
 800675e:	4603      	mov	r3, r0
 8006760:	4642      	mov	r2, r8
 8006762:	189b      	adds	r3, r3, r2
 8006764:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006766:	464b      	mov	r3, r9
 8006768:	460a      	mov	r2, r1
 800676a:	eb42 0303 	adc.w	r3, r2, r3
 800676e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	663b      	str	r3, [r7, #96]	@ 0x60
 800677a:	667a      	str	r2, [r7, #100]	@ 0x64
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006788:	4649      	mov	r1, r9
 800678a:	008b      	lsls	r3, r1, #2
 800678c:	4641      	mov	r1, r8
 800678e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006792:	4641      	mov	r1, r8
 8006794:	008a      	lsls	r2, r1, #2
 8006796:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800679a:	f7fa fa05 	bl	8000ba8 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <UART_SetConfig+0x4e4>)
 80067a4:	fba3 1302 	umull	r1, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	2164      	movs	r1, #100	@ 0x64
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	3332      	adds	r3, #50	@ 0x32
 80067b6:	4a08      	ldr	r2, [pc, #32]	@ (80067d8 <UART_SetConfig+0x4e4>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f003 020f 	and.w	r2, r3, #15
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4422      	add	r2, r4
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067d2:	46bd      	mov	sp, r7
 80067d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d8:	51eb851f 	.word	0x51eb851f

080067dc <std>:
 80067dc:	2300      	movs	r3, #0
 80067de:	b510      	push	{r4, lr}
 80067e0:	4604      	mov	r4, r0
 80067e2:	e9c0 3300 	strd	r3, r3, [r0]
 80067e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067ea:	6083      	str	r3, [r0, #8]
 80067ec:	8181      	strh	r1, [r0, #12]
 80067ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80067f0:	81c2      	strh	r2, [r0, #14]
 80067f2:	6183      	str	r3, [r0, #24]
 80067f4:	4619      	mov	r1, r3
 80067f6:	2208      	movs	r2, #8
 80067f8:	305c      	adds	r0, #92	@ 0x5c
 80067fa:	f000 f9f9 	bl	8006bf0 <memset>
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <std+0x58>)
 8006800:	6263      	str	r3, [r4, #36]	@ 0x24
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <std+0x5c>)
 8006804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006806:	4b0d      	ldr	r3, [pc, #52]	@ (800683c <std+0x60>)
 8006808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <std+0x64>)
 800680c:	6323      	str	r3, [r4, #48]	@ 0x30
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <std+0x68>)
 8006810:	6224      	str	r4, [r4, #32]
 8006812:	429c      	cmp	r4, r3
 8006814:	d006      	beq.n	8006824 <std+0x48>
 8006816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800681a:	4294      	cmp	r4, r2
 800681c:	d002      	beq.n	8006824 <std+0x48>
 800681e:	33d0      	adds	r3, #208	@ 0xd0
 8006820:	429c      	cmp	r4, r3
 8006822:	d105      	bne.n	8006830 <std+0x54>
 8006824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f000 ba58 	b.w	8006ce0 <__retarget_lock_init_recursive>
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	08006a41 	.word	0x08006a41
 8006838:	08006a63 	.word	0x08006a63
 800683c:	08006a9b 	.word	0x08006a9b
 8006840:	08006abf 	.word	0x08006abf
 8006844:	200004ac 	.word	0x200004ac

08006848 <stdio_exit_handler>:
 8006848:	4a02      	ldr	r2, [pc, #8]	@ (8006854 <stdio_exit_handler+0xc>)
 800684a:	4903      	ldr	r1, [pc, #12]	@ (8006858 <stdio_exit_handler+0x10>)
 800684c:	4803      	ldr	r0, [pc, #12]	@ (800685c <stdio_exit_handler+0x14>)
 800684e:	f000 b869 	b.w	8006924 <_fwalk_sglue>
 8006852:	bf00      	nop
 8006854:	20000030 	.word	0x20000030
 8006858:	08007581 	.word	0x08007581
 800685c:	20000040 	.word	0x20000040

08006860 <cleanup_stdio>:
 8006860:	6841      	ldr	r1, [r0, #4]
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <cleanup_stdio+0x34>)
 8006864:	4299      	cmp	r1, r3
 8006866:	b510      	push	{r4, lr}
 8006868:	4604      	mov	r4, r0
 800686a:	d001      	beq.n	8006870 <cleanup_stdio+0x10>
 800686c:	f000 fe88 	bl	8007580 <_fflush_r>
 8006870:	68a1      	ldr	r1, [r4, #8]
 8006872:	4b09      	ldr	r3, [pc, #36]	@ (8006898 <cleanup_stdio+0x38>)
 8006874:	4299      	cmp	r1, r3
 8006876:	d002      	beq.n	800687e <cleanup_stdio+0x1e>
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fe81 	bl	8007580 <_fflush_r>
 800687e:	68e1      	ldr	r1, [r4, #12]
 8006880:	4b06      	ldr	r3, [pc, #24]	@ (800689c <cleanup_stdio+0x3c>)
 8006882:	4299      	cmp	r1, r3
 8006884:	d004      	beq.n	8006890 <cleanup_stdio+0x30>
 8006886:	4620      	mov	r0, r4
 8006888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800688c:	f000 be78 	b.w	8007580 <_fflush_r>
 8006890:	bd10      	pop	{r4, pc}
 8006892:	bf00      	nop
 8006894:	200004ac 	.word	0x200004ac
 8006898:	20000514 	.word	0x20000514
 800689c:	2000057c 	.word	0x2000057c

080068a0 <global_stdio_init.part.0>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	4b0b      	ldr	r3, [pc, #44]	@ (80068d0 <global_stdio_init.part.0+0x30>)
 80068a4:	4c0b      	ldr	r4, [pc, #44]	@ (80068d4 <global_stdio_init.part.0+0x34>)
 80068a6:	4a0c      	ldr	r2, [pc, #48]	@ (80068d8 <global_stdio_init.part.0+0x38>)
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	4620      	mov	r0, r4
 80068ac:	2200      	movs	r2, #0
 80068ae:	2104      	movs	r1, #4
 80068b0:	f7ff ff94 	bl	80067dc <std>
 80068b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068b8:	2201      	movs	r2, #1
 80068ba:	2109      	movs	r1, #9
 80068bc:	f7ff ff8e 	bl	80067dc <std>
 80068c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068c4:	2202      	movs	r2, #2
 80068c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ca:	2112      	movs	r1, #18
 80068cc:	f7ff bf86 	b.w	80067dc <std>
 80068d0:	200005e4 	.word	0x200005e4
 80068d4:	200004ac 	.word	0x200004ac
 80068d8:	08006849 	.word	0x08006849

080068dc <__sfp_lock_acquire>:
 80068dc:	4801      	ldr	r0, [pc, #4]	@ (80068e4 <__sfp_lock_acquire+0x8>)
 80068de:	f000 ba00 	b.w	8006ce2 <__retarget_lock_acquire_recursive>
 80068e2:	bf00      	nop
 80068e4:	200005ed 	.word	0x200005ed

080068e8 <__sfp_lock_release>:
 80068e8:	4801      	ldr	r0, [pc, #4]	@ (80068f0 <__sfp_lock_release+0x8>)
 80068ea:	f000 b9fb 	b.w	8006ce4 <__retarget_lock_release_recursive>
 80068ee:	bf00      	nop
 80068f0:	200005ed 	.word	0x200005ed

080068f4 <__sinit>:
 80068f4:	b510      	push	{r4, lr}
 80068f6:	4604      	mov	r4, r0
 80068f8:	f7ff fff0 	bl	80068dc <__sfp_lock_acquire>
 80068fc:	6a23      	ldr	r3, [r4, #32]
 80068fe:	b11b      	cbz	r3, 8006908 <__sinit+0x14>
 8006900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006904:	f7ff bff0 	b.w	80068e8 <__sfp_lock_release>
 8006908:	4b04      	ldr	r3, [pc, #16]	@ (800691c <__sinit+0x28>)
 800690a:	6223      	str	r3, [r4, #32]
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <__sinit+0x2c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1f5      	bne.n	8006900 <__sinit+0xc>
 8006914:	f7ff ffc4 	bl	80068a0 <global_stdio_init.part.0>
 8006918:	e7f2      	b.n	8006900 <__sinit+0xc>
 800691a:	bf00      	nop
 800691c:	08006861 	.word	0x08006861
 8006920:	200005e4 	.word	0x200005e4

08006924 <_fwalk_sglue>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	4607      	mov	r7, r0
 800692a:	4688      	mov	r8, r1
 800692c:	4614      	mov	r4, r2
 800692e:	2600      	movs	r6, #0
 8006930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006934:	f1b9 0901 	subs.w	r9, r9, #1
 8006938:	d505      	bpl.n	8006946 <_fwalk_sglue+0x22>
 800693a:	6824      	ldr	r4, [r4, #0]
 800693c:	2c00      	cmp	r4, #0
 800693e:	d1f7      	bne.n	8006930 <_fwalk_sglue+0xc>
 8006940:	4630      	mov	r0, r6
 8006942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006946:	89ab      	ldrh	r3, [r5, #12]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d907      	bls.n	800695c <_fwalk_sglue+0x38>
 800694c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006950:	3301      	adds	r3, #1
 8006952:	d003      	beq.n	800695c <_fwalk_sglue+0x38>
 8006954:	4629      	mov	r1, r5
 8006956:	4638      	mov	r0, r7
 8006958:	47c0      	blx	r8
 800695a:	4306      	orrs	r6, r0
 800695c:	3568      	adds	r5, #104	@ 0x68
 800695e:	e7e9      	b.n	8006934 <_fwalk_sglue+0x10>

08006960 <iprintf>:
 8006960:	b40f      	push	{r0, r1, r2, r3}
 8006962:	b507      	push	{r0, r1, r2, lr}
 8006964:	4906      	ldr	r1, [pc, #24]	@ (8006980 <iprintf+0x20>)
 8006966:	ab04      	add	r3, sp, #16
 8006968:	6808      	ldr	r0, [r1, #0]
 800696a:	f853 2b04 	ldr.w	r2, [r3], #4
 800696e:	6881      	ldr	r1, [r0, #8]
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	f000 fadb 	bl	8006f2c <_vfiprintf_r>
 8006976:	b003      	add	sp, #12
 8006978:	f85d eb04 	ldr.w	lr, [sp], #4
 800697c:	b004      	add	sp, #16
 800697e:	4770      	bx	lr
 8006980:	2000003c 	.word	0x2000003c

08006984 <_puts_r>:
 8006984:	6a03      	ldr	r3, [r0, #32]
 8006986:	b570      	push	{r4, r5, r6, lr}
 8006988:	6884      	ldr	r4, [r0, #8]
 800698a:	4605      	mov	r5, r0
 800698c:	460e      	mov	r6, r1
 800698e:	b90b      	cbnz	r3, 8006994 <_puts_r+0x10>
 8006990:	f7ff ffb0 	bl	80068f4 <__sinit>
 8006994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006996:	07db      	lsls	r3, r3, #31
 8006998:	d405      	bmi.n	80069a6 <_puts_r+0x22>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	0598      	lsls	r0, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_puts_r+0x22>
 80069a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069a2:	f000 f99e 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	0719      	lsls	r1, r3, #28
 80069aa:	d502      	bpl.n	80069b2 <_puts_r+0x2e>
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d135      	bne.n	8006a1e <_puts_r+0x9a>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 f8c5 	bl	8006b44 <__swsetup_r>
 80069ba:	b380      	cbz	r0, 8006a1e <_puts_r+0x9a>
 80069bc:	f04f 35ff 	mov.w	r5, #4294967295
 80069c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069c2:	07da      	lsls	r2, r3, #31
 80069c4:	d405      	bmi.n	80069d2 <_puts_r+0x4e>
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	059b      	lsls	r3, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_puts_r+0x4e>
 80069cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ce:	f000 f989 	bl	8006ce4 <__retarget_lock_release_recursive>
 80069d2:	4628      	mov	r0, r5
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da04      	bge.n	80069e4 <_puts_r+0x60>
 80069da:	69a2      	ldr	r2, [r4, #24]
 80069dc:	429a      	cmp	r2, r3
 80069de:	dc17      	bgt.n	8006a10 <_puts_r+0x8c>
 80069e0:	290a      	cmp	r1, #10
 80069e2:	d015      	beq.n	8006a10 <_puts_r+0x8c>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	7019      	strb	r1, [r3, #0]
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069f2:	3b01      	subs	r3, #1
 80069f4:	60a3      	str	r3, [r4, #8]
 80069f6:	2900      	cmp	r1, #0
 80069f8:	d1ed      	bne.n	80069d6 <_puts_r+0x52>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da11      	bge.n	8006a22 <_puts_r+0x9e>
 80069fe:	4622      	mov	r2, r4
 8006a00:	210a      	movs	r1, #10
 8006a02:	4628      	mov	r0, r5
 8006a04:	f000 f85f 	bl	8006ac6 <__swbuf_r>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d0d7      	beq.n	80069bc <_puts_r+0x38>
 8006a0c:	250a      	movs	r5, #10
 8006a0e:	e7d7      	b.n	80069c0 <_puts_r+0x3c>
 8006a10:	4622      	mov	r2, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f857 	bl	8006ac6 <__swbuf_r>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d1e7      	bne.n	80069ec <_puts_r+0x68>
 8006a1c:	e7ce      	b.n	80069bc <_puts_r+0x38>
 8006a1e:	3e01      	subs	r6, #1
 8006a20:	e7e4      	b.n	80069ec <_puts_r+0x68>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	220a      	movs	r2, #10
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	e7ee      	b.n	8006a0c <_puts_r+0x88>
	...

08006a30 <puts>:
 8006a30:	4b02      	ldr	r3, [pc, #8]	@ (8006a3c <puts+0xc>)
 8006a32:	4601      	mov	r1, r0
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	f7ff bfa5 	b.w	8006984 <_puts_r>
 8006a3a:	bf00      	nop
 8006a3c:	2000003c 	.word	0x2000003c

08006a40 <__sread>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	460c      	mov	r4, r1
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	f000 f8fc 	bl	8006c44 <_read_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	bfab      	itete	ge
 8006a50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a52:	89a3      	ldrhlt	r3, [r4, #12]
 8006a54:	181b      	addge	r3, r3, r0
 8006a56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a5a:	bfac      	ite	ge
 8006a5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a5e:	81a3      	strhlt	r3, [r4, #12]
 8006a60:	bd10      	pop	{r4, pc}

08006a62 <__swrite>:
 8006a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	461f      	mov	r7, r3
 8006a68:	898b      	ldrh	r3, [r1, #12]
 8006a6a:	05db      	lsls	r3, r3, #23
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	4616      	mov	r6, r2
 8006a72:	d505      	bpl.n	8006a80 <__swrite+0x1e>
 8006a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a78:	2302      	movs	r3, #2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f000 f8d0 	bl	8006c20 <_lseek_r>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	463b      	mov	r3, r7
 8006a90:	4628      	mov	r0, r5
 8006a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a96:	f000 b8e7 	b.w	8006c68 <_write_r>

08006a9a <__sseek>:
 8006a9a:	b510      	push	{r4, lr}
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa2:	f000 f8bd 	bl	8006c20 <_lseek_r>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	bf15      	itete	ne
 8006aac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006aae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ab6:	81a3      	strheq	r3, [r4, #12]
 8006ab8:	bf18      	it	ne
 8006aba:	81a3      	strhne	r3, [r4, #12]
 8006abc:	bd10      	pop	{r4, pc}

08006abe <__sclose>:
 8006abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac2:	f000 b89d 	b.w	8006c00 <_close_r>

08006ac6 <__swbuf_r>:
 8006ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac8:	460e      	mov	r6, r1
 8006aca:	4614      	mov	r4, r2
 8006acc:	4605      	mov	r5, r0
 8006ace:	b118      	cbz	r0, 8006ad8 <__swbuf_r+0x12>
 8006ad0:	6a03      	ldr	r3, [r0, #32]
 8006ad2:	b90b      	cbnz	r3, 8006ad8 <__swbuf_r+0x12>
 8006ad4:	f7ff ff0e 	bl	80068f4 <__sinit>
 8006ad8:	69a3      	ldr	r3, [r4, #24]
 8006ada:	60a3      	str	r3, [r4, #8]
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	071a      	lsls	r2, r3, #28
 8006ae0:	d501      	bpl.n	8006ae6 <__swbuf_r+0x20>
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	b943      	cbnz	r3, 8006af8 <__swbuf_r+0x32>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 f82b 	bl	8006b44 <__swsetup_r>
 8006aee:	b118      	cbz	r0, 8006af8 <__swbuf_r+0x32>
 8006af0:	f04f 37ff 	mov.w	r7, #4294967295
 8006af4:	4638      	mov	r0, r7
 8006af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	6922      	ldr	r2, [r4, #16]
 8006afc:	1a98      	subs	r0, r3, r2
 8006afe:	6963      	ldr	r3, [r4, #20]
 8006b00:	b2f6      	uxtb	r6, r6
 8006b02:	4283      	cmp	r3, r0
 8006b04:	4637      	mov	r7, r6
 8006b06:	dc05      	bgt.n	8006b14 <__swbuf_r+0x4e>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 fd38 	bl	8007580 <_fflush_r>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d1ed      	bne.n	8006af0 <__swbuf_r+0x2a>
 8006b14:	68a3      	ldr	r3, [r4, #8]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	60a3      	str	r3, [r4, #8]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	6022      	str	r2, [r4, #0]
 8006b20:	701e      	strb	r6, [r3, #0]
 8006b22:	6962      	ldr	r2, [r4, #20]
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d004      	beq.n	8006b34 <__swbuf_r+0x6e>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	07db      	lsls	r3, r3, #31
 8006b2e:	d5e1      	bpl.n	8006af4 <__swbuf_r+0x2e>
 8006b30:	2e0a      	cmp	r6, #10
 8006b32:	d1df      	bne.n	8006af4 <__swbuf_r+0x2e>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 fd22 	bl	8007580 <_fflush_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d0d9      	beq.n	8006af4 <__swbuf_r+0x2e>
 8006b40:	e7d6      	b.n	8006af0 <__swbuf_r+0x2a>
	...

08006b44 <__swsetup_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4b29      	ldr	r3, [pc, #164]	@ (8006bec <__swsetup_r+0xa8>)
 8006b48:	4605      	mov	r5, r0
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	b118      	cbz	r0, 8006b58 <__swsetup_r+0x14>
 8006b50:	6a03      	ldr	r3, [r0, #32]
 8006b52:	b90b      	cbnz	r3, 8006b58 <__swsetup_r+0x14>
 8006b54:	f7ff fece 	bl	80068f4 <__sinit>
 8006b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b5c:	0719      	lsls	r1, r3, #28
 8006b5e:	d422      	bmi.n	8006ba6 <__swsetup_r+0x62>
 8006b60:	06da      	lsls	r2, r3, #27
 8006b62:	d407      	bmi.n	8006b74 <__swsetup_r+0x30>
 8006b64:	2209      	movs	r2, #9
 8006b66:	602a      	str	r2, [r5, #0]
 8006b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b72:	e033      	b.n	8006bdc <__swsetup_r+0x98>
 8006b74:	0758      	lsls	r0, r3, #29
 8006b76:	d512      	bpl.n	8006b9e <__swsetup_r+0x5a>
 8006b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b7a:	b141      	cbz	r1, 8006b8e <__swsetup_r+0x4a>
 8006b7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b80:	4299      	cmp	r1, r3
 8006b82:	d002      	beq.n	8006b8a <__swsetup_r+0x46>
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 f8af 	bl	8006ce8 <_free_r>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	2300      	movs	r3, #0
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f043 0308 	orr.w	r3, r3, #8
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	b94b      	cbnz	r3, 8006bbe <__swsetup_r+0x7a>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb4:	d003      	beq.n	8006bbe <__swsetup_r+0x7a>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 fd2f 	bl	800761c <__smakebuf_r>
 8006bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc2:	f013 0201 	ands.w	r2, r3, #1
 8006bc6:	d00a      	beq.n	8006bde <__swsetup_r+0x9a>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	60a2      	str	r2, [r4, #8]
 8006bcc:	6962      	ldr	r2, [r4, #20]
 8006bce:	4252      	negs	r2, r2
 8006bd0:	61a2      	str	r2, [r4, #24]
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	b942      	cbnz	r2, 8006be8 <__swsetup_r+0xa4>
 8006bd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006bda:	d1c5      	bne.n	8006b68 <__swsetup_r+0x24>
 8006bdc:	bd38      	pop	{r3, r4, r5, pc}
 8006bde:	0799      	lsls	r1, r3, #30
 8006be0:	bf58      	it	pl
 8006be2:	6962      	ldrpl	r2, [r4, #20]
 8006be4:	60a2      	str	r2, [r4, #8]
 8006be6:	e7f4      	b.n	8006bd2 <__swsetup_r+0x8e>
 8006be8:	2000      	movs	r0, #0
 8006bea:	e7f7      	b.n	8006bdc <__swsetup_r+0x98>
 8006bec:	2000003c 	.word	0x2000003c

08006bf0 <memset>:
 8006bf0:	4402      	add	r2, r0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <_close_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d06      	ldr	r5, [pc, #24]	@ (8006c1c <_close_r+0x1c>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fc f89d 	bl	8002d4a <_close>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_close_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_close_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	200005e8 	.word	0x200005e8

08006c20 <_lseek_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	@ (8006c40 <_lseek_r+0x20>)
 8006c24:	4604      	mov	r4, r0
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f7fc f8b2 	bl	8002d98 <_lseek>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_lseek_r+0x1e>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_lseek_r+0x1e>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	200005e8 	.word	0x200005e8

08006c44 <_read_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d07      	ldr	r5, [pc, #28]	@ (8006c64 <_read_r+0x20>)
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	602a      	str	r2, [r5, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f7fc f840 	bl	8002cd8 <_read>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_read_r+0x1e>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_read_r+0x1e>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	200005e8 	.word	0x200005e8

08006c68 <_write_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d07      	ldr	r5, [pc, #28]	@ (8006c88 <_write_r+0x20>)
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	4608      	mov	r0, r1
 8006c70:	4611      	mov	r1, r2
 8006c72:	2200      	movs	r2, #0
 8006c74:	602a      	str	r2, [r5, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f7fc f84b 	bl	8002d12 <_write>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_write_r+0x1e>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_write_r+0x1e>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	200005e8 	.word	0x200005e8

08006c8c <__errno>:
 8006c8c:	4b01      	ldr	r3, [pc, #4]	@ (8006c94 <__errno+0x8>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	2000003c 	.word	0x2000003c

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1b64      	subs	r4, r4, r5
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	@ (8006cdc <__libc_init_array+0x44>)
 8006cac:	f001 fcb0 	bl	8008610 <_init>
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42a6      	cmp	r6, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc0:	4798      	blx	r3
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cca:	4798      	blx	r3
 8006ccc:	3601      	adds	r6, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	080088e8 	.word	0x080088e8
 8006cd4:	080088e8 	.word	0x080088e8
 8006cd8:	080088e8 	.word	0x080088e8
 8006cdc:	080088ec 	.word	0x080088ec

08006ce0 <__retarget_lock_init_recursive>:
 8006ce0:	4770      	bx	lr

08006ce2 <__retarget_lock_acquire_recursive>:
 8006ce2:	4770      	bx	lr

08006ce4 <__retarget_lock_release_recursive>:
 8006ce4:	4770      	bx	lr
	...

08006ce8 <_free_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4605      	mov	r5, r0
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d041      	beq.n	8006d74 <_free_r+0x8c>
 8006cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf4:	1f0c      	subs	r4, r1, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb8      	it	lt
 8006cfa:	18e4      	addlt	r4, r4, r3
 8006cfc:	f000 f8e0 	bl	8006ec0 <__malloc_lock>
 8006d00:	4a1d      	ldr	r2, [pc, #116]	@ (8006d78 <_free_r+0x90>)
 8006d02:	6813      	ldr	r3, [r2, #0]
 8006d04:	b933      	cbnz	r3, 8006d14 <_free_r+0x2c>
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	6014      	str	r4, [r2, #0]
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d10:	f000 b8dc 	b.w	8006ecc <__malloc_unlock>
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	d908      	bls.n	8006d2a <_free_r+0x42>
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	1821      	adds	r1, r4, r0
 8006d1c:	428b      	cmp	r3, r1
 8006d1e:	bf01      	itttt	eq
 8006d20:	6819      	ldreq	r1, [r3, #0]
 8006d22:	685b      	ldreq	r3, [r3, #4]
 8006d24:	1809      	addeq	r1, r1, r0
 8006d26:	6021      	streq	r1, [r4, #0]
 8006d28:	e7ed      	b.n	8006d06 <_free_r+0x1e>
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b10b      	cbz	r3, 8006d34 <_free_r+0x4c>
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	d9fa      	bls.n	8006d2a <_free_r+0x42>
 8006d34:	6811      	ldr	r1, [r2, #0]
 8006d36:	1850      	adds	r0, r2, r1
 8006d38:	42a0      	cmp	r0, r4
 8006d3a:	d10b      	bne.n	8006d54 <_free_r+0x6c>
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	4401      	add	r1, r0
 8006d40:	1850      	adds	r0, r2, r1
 8006d42:	4283      	cmp	r3, r0
 8006d44:	6011      	str	r1, [r2, #0]
 8006d46:	d1e0      	bne.n	8006d0a <_free_r+0x22>
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	6053      	str	r3, [r2, #4]
 8006d4e:	4408      	add	r0, r1
 8006d50:	6010      	str	r0, [r2, #0]
 8006d52:	e7da      	b.n	8006d0a <_free_r+0x22>
 8006d54:	d902      	bls.n	8006d5c <_free_r+0x74>
 8006d56:	230c      	movs	r3, #12
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	e7d6      	b.n	8006d0a <_free_r+0x22>
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	1821      	adds	r1, r4, r0
 8006d60:	428b      	cmp	r3, r1
 8006d62:	bf04      	itt	eq
 8006d64:	6819      	ldreq	r1, [r3, #0]
 8006d66:	685b      	ldreq	r3, [r3, #4]
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	bf04      	itt	eq
 8006d6c:	1809      	addeq	r1, r1, r0
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	6054      	str	r4, [r2, #4]
 8006d72:	e7ca      	b.n	8006d0a <_free_r+0x22>
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
 8006d76:	bf00      	nop
 8006d78:	200005f4 	.word	0x200005f4

08006d7c <sbrk_aligned>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8006dbc <sbrk_aligned+0x40>)
 8006d80:	460c      	mov	r4, r1
 8006d82:	6831      	ldr	r1, [r6, #0]
 8006d84:	4605      	mov	r5, r0
 8006d86:	b911      	cbnz	r1, 8006d8e <sbrk_aligned+0x12>
 8006d88:	f000 fca6 	bl	80076d8 <_sbrk_r>
 8006d8c:	6030      	str	r0, [r6, #0]
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 fca1 	bl	80076d8 <_sbrk_r>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	d103      	bne.n	8006da2 <sbrk_aligned+0x26>
 8006d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d9e:	4620      	mov	r0, r4
 8006da0:	bd70      	pop	{r4, r5, r6, pc}
 8006da2:	1cc4      	adds	r4, r0, #3
 8006da4:	f024 0403 	bic.w	r4, r4, #3
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d0f8      	beq.n	8006d9e <sbrk_aligned+0x22>
 8006dac:	1a21      	subs	r1, r4, r0
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 fc92 	bl	80076d8 <_sbrk_r>
 8006db4:	3001      	adds	r0, #1
 8006db6:	d1f2      	bne.n	8006d9e <sbrk_aligned+0x22>
 8006db8:	e7ef      	b.n	8006d9a <sbrk_aligned+0x1e>
 8006dba:	bf00      	nop
 8006dbc:	200005f0 	.word	0x200005f0

08006dc0 <_malloc_r>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	1ccd      	adds	r5, r1, #3
 8006dc6:	f025 0503 	bic.w	r5, r5, #3
 8006dca:	3508      	adds	r5, #8
 8006dcc:	2d0c      	cmp	r5, #12
 8006dce:	bf38      	it	cc
 8006dd0:	250c      	movcc	r5, #12
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	db01      	blt.n	8006ddc <_malloc_r+0x1c>
 8006dd8:	42a9      	cmp	r1, r5
 8006dda:	d904      	bls.n	8006de6 <_malloc_r+0x26>
 8006ddc:	230c      	movs	r3, #12
 8006dde:	6033      	str	r3, [r6, #0]
 8006de0:	2000      	movs	r0, #0
 8006de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ebc <_malloc_r+0xfc>
 8006dea:	f000 f869 	bl	8006ec0 <__malloc_lock>
 8006dee:	f8d8 3000 	ldr.w	r3, [r8]
 8006df2:	461c      	mov	r4, r3
 8006df4:	bb44      	cbnz	r4, 8006e48 <_malloc_r+0x88>
 8006df6:	4629      	mov	r1, r5
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f7ff ffbf 	bl	8006d7c <sbrk_aligned>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	4604      	mov	r4, r0
 8006e02:	d158      	bne.n	8006eb6 <_malloc_r+0xf6>
 8006e04:	f8d8 4000 	ldr.w	r4, [r8]
 8006e08:	4627      	mov	r7, r4
 8006e0a:	2f00      	cmp	r7, #0
 8006e0c:	d143      	bne.n	8006e96 <_malloc_r+0xd6>
 8006e0e:	2c00      	cmp	r4, #0
 8006e10:	d04b      	beq.n	8006eaa <_malloc_r+0xea>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	4639      	mov	r1, r7
 8006e16:	4630      	mov	r0, r6
 8006e18:	eb04 0903 	add.w	r9, r4, r3
 8006e1c:	f000 fc5c 	bl	80076d8 <_sbrk_r>
 8006e20:	4581      	cmp	r9, r0
 8006e22:	d142      	bne.n	8006eaa <_malloc_r+0xea>
 8006e24:	6821      	ldr	r1, [r4, #0]
 8006e26:	1a6d      	subs	r5, r5, r1
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7ff ffa6 	bl	8006d7c <sbrk_aligned>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d03a      	beq.n	8006eaa <_malloc_r+0xea>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	442b      	add	r3, r5
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	bb62      	cbnz	r2, 8006e9c <_malloc_r+0xdc>
 8006e42:	f8c8 7000 	str.w	r7, [r8]
 8006e46:	e00f      	b.n	8006e68 <_malloc_r+0xa8>
 8006e48:	6822      	ldr	r2, [r4, #0]
 8006e4a:	1b52      	subs	r2, r2, r5
 8006e4c:	d420      	bmi.n	8006e90 <_malloc_r+0xd0>
 8006e4e:	2a0b      	cmp	r2, #11
 8006e50:	d917      	bls.n	8006e82 <_malloc_r+0xc2>
 8006e52:	1961      	adds	r1, r4, r5
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	6025      	str	r5, [r4, #0]
 8006e58:	bf18      	it	ne
 8006e5a:	6059      	strne	r1, [r3, #4]
 8006e5c:	6863      	ldr	r3, [r4, #4]
 8006e5e:	bf08      	it	eq
 8006e60:	f8c8 1000 	streq.w	r1, [r8]
 8006e64:	5162      	str	r2, [r4, r5]
 8006e66:	604b      	str	r3, [r1, #4]
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f000 f82f 	bl	8006ecc <__malloc_unlock>
 8006e6e:	f104 000b 	add.w	r0, r4, #11
 8006e72:	1d23      	adds	r3, r4, #4
 8006e74:	f020 0007 	bic.w	r0, r0, #7
 8006e78:	1ac2      	subs	r2, r0, r3
 8006e7a:	bf1c      	itt	ne
 8006e7c:	1a1b      	subne	r3, r3, r0
 8006e7e:	50a3      	strne	r3, [r4, r2]
 8006e80:	e7af      	b.n	8006de2 <_malloc_r+0x22>
 8006e82:	6862      	ldr	r2, [r4, #4]
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	bf0c      	ite	eq
 8006e88:	f8c8 2000 	streq.w	r2, [r8]
 8006e8c:	605a      	strne	r2, [r3, #4]
 8006e8e:	e7eb      	b.n	8006e68 <_malloc_r+0xa8>
 8006e90:	4623      	mov	r3, r4
 8006e92:	6864      	ldr	r4, [r4, #4]
 8006e94:	e7ae      	b.n	8006df4 <_malloc_r+0x34>
 8006e96:	463c      	mov	r4, r7
 8006e98:	687f      	ldr	r7, [r7, #4]
 8006e9a:	e7b6      	b.n	8006e0a <_malloc_r+0x4a>
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	d1fb      	bne.n	8006e9c <_malloc_r+0xdc>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	6053      	str	r3, [r2, #4]
 8006ea8:	e7de      	b.n	8006e68 <_malloc_r+0xa8>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	6033      	str	r3, [r6, #0]
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f000 f80c 	bl	8006ecc <__malloc_unlock>
 8006eb4:	e794      	b.n	8006de0 <_malloc_r+0x20>
 8006eb6:	6005      	str	r5, [r0, #0]
 8006eb8:	e7d6      	b.n	8006e68 <_malloc_r+0xa8>
 8006eba:	bf00      	nop
 8006ebc:	200005f4 	.word	0x200005f4

08006ec0 <__malloc_lock>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	@ (8006ec8 <__malloc_lock+0x8>)
 8006ec2:	f7ff bf0e 	b.w	8006ce2 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	200005ec 	.word	0x200005ec

08006ecc <__malloc_unlock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	@ (8006ed4 <__malloc_unlock+0x8>)
 8006ece:	f7ff bf09 	b.w	8006ce4 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	200005ec 	.word	0x200005ec

08006ed8 <__sfputc_r>:
 8006ed8:	6893      	ldr	r3, [r2, #8]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	b410      	push	{r4}
 8006ee0:	6093      	str	r3, [r2, #8]
 8006ee2:	da08      	bge.n	8006ef6 <__sfputc_r+0x1e>
 8006ee4:	6994      	ldr	r4, [r2, #24]
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	db01      	blt.n	8006eee <__sfputc_r+0x16>
 8006eea:	290a      	cmp	r1, #10
 8006eec:	d103      	bne.n	8006ef6 <__sfputc_r+0x1e>
 8006eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef2:	f7ff bde8 	b.w	8006ac6 <__swbuf_r>
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	1c58      	adds	r0, r3, #1
 8006efa:	6010      	str	r0, [r2, #0]
 8006efc:	7019      	strb	r1, [r3, #0]
 8006efe:	4608      	mov	r0, r1
 8006f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <__sfputs_r>:
 8006f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	18d5      	adds	r5, r2, r3
 8006f10:	42ac      	cmp	r4, r5
 8006f12:	d101      	bne.n	8006f18 <__sfputs_r+0x12>
 8006f14:	2000      	movs	r0, #0
 8006f16:	e007      	b.n	8006f28 <__sfputs_r+0x22>
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f7ff ffda 	bl	8006ed8 <__sfputc_r>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d1f3      	bne.n	8006f10 <__sfputs_r+0xa>
 8006f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f2c <_vfiprintf_r>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	460d      	mov	r5, r1
 8006f32:	b09d      	sub	sp, #116	@ 0x74
 8006f34:	4614      	mov	r4, r2
 8006f36:	4698      	mov	r8, r3
 8006f38:	4606      	mov	r6, r0
 8006f3a:	b118      	cbz	r0, 8006f44 <_vfiprintf_r+0x18>
 8006f3c:	6a03      	ldr	r3, [r0, #32]
 8006f3e:	b90b      	cbnz	r3, 8006f44 <_vfiprintf_r+0x18>
 8006f40:	f7ff fcd8 	bl	80068f4 <__sinit>
 8006f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f46:	07d9      	lsls	r1, r3, #31
 8006f48:	d405      	bmi.n	8006f56 <_vfiprintf_r+0x2a>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	059a      	lsls	r2, r3, #22
 8006f4e:	d402      	bmi.n	8006f56 <_vfiprintf_r+0x2a>
 8006f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f52:	f7ff fec6 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 8006f56:	89ab      	ldrh	r3, [r5, #12]
 8006f58:	071b      	lsls	r3, r3, #28
 8006f5a:	d501      	bpl.n	8006f60 <_vfiprintf_r+0x34>
 8006f5c:	692b      	ldr	r3, [r5, #16]
 8006f5e:	b99b      	cbnz	r3, 8006f88 <_vfiprintf_r+0x5c>
 8006f60:	4629      	mov	r1, r5
 8006f62:	4630      	mov	r0, r6
 8006f64:	f7ff fdee 	bl	8006b44 <__swsetup_r>
 8006f68:	b170      	cbz	r0, 8006f88 <_vfiprintf_r+0x5c>
 8006f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f6c:	07dc      	lsls	r4, r3, #31
 8006f6e:	d504      	bpl.n	8006f7a <_vfiprintf_r+0x4e>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b01d      	add	sp, #116	@ 0x74
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	0598      	lsls	r0, r3, #22
 8006f7e:	d4f7      	bmi.n	8006f70 <_vfiprintf_r+0x44>
 8006f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f82:	f7ff feaf 	bl	8006ce4 <__retarget_lock_release_recursive>
 8006f86:	e7f3      	b.n	8006f70 <_vfiprintf_r+0x44>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f8c:	2320      	movs	r3, #32
 8006f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f96:	2330      	movs	r3, #48	@ 0x30
 8006f98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007148 <_vfiprintf_r+0x21c>
 8006f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fa0:	f04f 0901 	mov.w	r9, #1
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	469a      	mov	sl, r3
 8006fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fac:	b10a      	cbz	r2, 8006fb2 <_vfiprintf_r+0x86>
 8006fae:	2a25      	cmp	r2, #37	@ 0x25
 8006fb0:	d1f9      	bne.n	8006fa6 <_vfiprintf_r+0x7a>
 8006fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8006fb6:	d00b      	beq.n	8006fd0 <_vfiprintf_r+0xa4>
 8006fb8:	465b      	mov	r3, fp
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7ff ffa1 	bl	8006f06 <__sfputs_r>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f000 80a7 	beq.w	8007118 <_vfiprintf_r+0x1ec>
 8006fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fcc:	445a      	add	r2, fp
 8006fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 809f 	beq.w	8007118 <_vfiprintf_r+0x1ec>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fe4:	f10a 0a01 	add.w	sl, sl, #1
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	9307      	str	r3, [sp, #28]
 8006fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ff2:	4654      	mov	r4, sl
 8006ff4:	2205      	movs	r2, #5
 8006ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffa:	4853      	ldr	r0, [pc, #332]	@ (8007148 <_vfiprintf_r+0x21c>)
 8006ffc:	f7f9 f8f0 	bl	80001e0 <memchr>
 8007000:	9a04      	ldr	r2, [sp, #16]
 8007002:	b9d8      	cbnz	r0, 800703c <_vfiprintf_r+0x110>
 8007004:	06d1      	lsls	r1, r2, #27
 8007006:	bf44      	itt	mi
 8007008:	2320      	movmi	r3, #32
 800700a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800700e:	0713      	lsls	r3, r2, #28
 8007010:	bf44      	itt	mi
 8007012:	232b      	movmi	r3, #43	@ 0x2b
 8007014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007018:	f89a 3000 	ldrb.w	r3, [sl]
 800701c:	2b2a      	cmp	r3, #42	@ 0x2a
 800701e:	d015      	beq.n	800704c <_vfiprintf_r+0x120>
 8007020:	9a07      	ldr	r2, [sp, #28]
 8007022:	4654      	mov	r4, sl
 8007024:	2000      	movs	r0, #0
 8007026:	f04f 0c0a 	mov.w	ip, #10
 800702a:	4621      	mov	r1, r4
 800702c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007030:	3b30      	subs	r3, #48	@ 0x30
 8007032:	2b09      	cmp	r3, #9
 8007034:	d94b      	bls.n	80070ce <_vfiprintf_r+0x1a2>
 8007036:	b1b0      	cbz	r0, 8007066 <_vfiprintf_r+0x13a>
 8007038:	9207      	str	r2, [sp, #28]
 800703a:	e014      	b.n	8007066 <_vfiprintf_r+0x13a>
 800703c:	eba0 0308 	sub.w	r3, r0, r8
 8007040:	fa09 f303 	lsl.w	r3, r9, r3
 8007044:	4313      	orrs	r3, r2
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	46a2      	mov	sl, r4
 800704a:	e7d2      	b.n	8006ff2 <_vfiprintf_r+0xc6>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	1d19      	adds	r1, r3, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	9103      	str	r1, [sp, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	bfbb      	ittet	lt
 8007058:	425b      	neglt	r3, r3
 800705a:	f042 0202 	orrlt.w	r2, r2, #2
 800705e:	9307      	strge	r3, [sp, #28]
 8007060:	9307      	strlt	r3, [sp, #28]
 8007062:	bfb8      	it	lt
 8007064:	9204      	strlt	r2, [sp, #16]
 8007066:	7823      	ldrb	r3, [r4, #0]
 8007068:	2b2e      	cmp	r3, #46	@ 0x2e
 800706a:	d10a      	bne.n	8007082 <_vfiprintf_r+0x156>
 800706c:	7863      	ldrb	r3, [r4, #1]
 800706e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007070:	d132      	bne.n	80070d8 <_vfiprintf_r+0x1ac>
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	1d1a      	adds	r2, r3, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	9203      	str	r2, [sp, #12]
 800707a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800707e:	3402      	adds	r4, #2
 8007080:	9305      	str	r3, [sp, #20]
 8007082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007158 <_vfiprintf_r+0x22c>
 8007086:	7821      	ldrb	r1, [r4, #0]
 8007088:	2203      	movs	r2, #3
 800708a:	4650      	mov	r0, sl
 800708c:	f7f9 f8a8 	bl	80001e0 <memchr>
 8007090:	b138      	cbz	r0, 80070a2 <_vfiprintf_r+0x176>
 8007092:	9b04      	ldr	r3, [sp, #16]
 8007094:	eba0 000a 	sub.w	r0, r0, sl
 8007098:	2240      	movs	r2, #64	@ 0x40
 800709a:	4082      	lsls	r2, r0
 800709c:	4313      	orrs	r3, r2
 800709e:	3401      	adds	r4, #1
 80070a0:	9304      	str	r3, [sp, #16]
 80070a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a6:	4829      	ldr	r0, [pc, #164]	@ (800714c <_vfiprintf_r+0x220>)
 80070a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070ac:	2206      	movs	r2, #6
 80070ae:	f7f9 f897 	bl	80001e0 <memchr>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d03f      	beq.n	8007136 <_vfiprintf_r+0x20a>
 80070b6:	4b26      	ldr	r3, [pc, #152]	@ (8007150 <_vfiprintf_r+0x224>)
 80070b8:	bb1b      	cbnz	r3, 8007102 <_vfiprintf_r+0x1d6>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	3307      	adds	r3, #7
 80070be:	f023 0307 	bic.w	r3, r3, #7
 80070c2:	3308      	adds	r3, #8
 80070c4:	9303      	str	r3, [sp, #12]
 80070c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c8:	443b      	add	r3, r7
 80070ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80070cc:	e76a      	b.n	8006fa4 <_vfiprintf_r+0x78>
 80070ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80070d2:	460c      	mov	r4, r1
 80070d4:	2001      	movs	r0, #1
 80070d6:	e7a8      	b.n	800702a <_vfiprintf_r+0xfe>
 80070d8:	2300      	movs	r3, #0
 80070da:	3401      	adds	r4, #1
 80070dc:	9305      	str	r3, [sp, #20]
 80070de:	4619      	mov	r1, r3
 80070e0:	f04f 0c0a 	mov.w	ip, #10
 80070e4:	4620      	mov	r0, r4
 80070e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ea:	3a30      	subs	r2, #48	@ 0x30
 80070ec:	2a09      	cmp	r2, #9
 80070ee:	d903      	bls.n	80070f8 <_vfiprintf_r+0x1cc>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0c6      	beq.n	8007082 <_vfiprintf_r+0x156>
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	e7c4      	b.n	8007082 <_vfiprintf_r+0x156>
 80070f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80070fc:	4604      	mov	r4, r0
 80070fe:	2301      	movs	r3, #1
 8007100:	e7f0      	b.n	80070e4 <_vfiprintf_r+0x1b8>
 8007102:	ab03      	add	r3, sp, #12
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	462a      	mov	r2, r5
 8007108:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <_vfiprintf_r+0x228>)
 800710a:	a904      	add	r1, sp, #16
 800710c:	4630      	mov	r0, r6
 800710e:	f3af 8000 	nop.w
 8007112:	4607      	mov	r7, r0
 8007114:	1c78      	adds	r0, r7, #1
 8007116:	d1d6      	bne.n	80070c6 <_vfiprintf_r+0x19a>
 8007118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800711a:	07d9      	lsls	r1, r3, #31
 800711c:	d405      	bmi.n	800712a <_vfiprintf_r+0x1fe>
 800711e:	89ab      	ldrh	r3, [r5, #12]
 8007120:	059a      	lsls	r2, r3, #22
 8007122:	d402      	bmi.n	800712a <_vfiprintf_r+0x1fe>
 8007124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007126:	f7ff fddd 	bl	8006ce4 <__retarget_lock_release_recursive>
 800712a:	89ab      	ldrh	r3, [r5, #12]
 800712c:	065b      	lsls	r3, r3, #25
 800712e:	f53f af1f 	bmi.w	8006f70 <_vfiprintf_r+0x44>
 8007132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007134:	e71e      	b.n	8006f74 <_vfiprintf_r+0x48>
 8007136:	ab03      	add	r3, sp, #12
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	462a      	mov	r2, r5
 800713c:	4b05      	ldr	r3, [pc, #20]	@ (8007154 <_vfiprintf_r+0x228>)
 800713e:	a904      	add	r1, sp, #16
 8007140:	4630      	mov	r0, r6
 8007142:	f000 f879 	bl	8007238 <_printf_i>
 8007146:	e7e4      	b.n	8007112 <_vfiprintf_r+0x1e6>
 8007148:	0800887c 	.word	0x0800887c
 800714c:	08008886 	.word	0x08008886
 8007150:	00000000 	.word	0x00000000
 8007154:	08006f07 	.word	0x08006f07
 8007158:	08008882 	.word	0x08008882

0800715c <_printf_common>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	4616      	mov	r6, r2
 8007162:	4698      	mov	r8, r3
 8007164:	688a      	ldr	r2, [r1, #8]
 8007166:	690b      	ldr	r3, [r1, #16]
 8007168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800716c:	4293      	cmp	r3, r2
 800716e:	bfb8      	it	lt
 8007170:	4613      	movlt	r3, r2
 8007172:	6033      	str	r3, [r6, #0]
 8007174:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007178:	4607      	mov	r7, r0
 800717a:	460c      	mov	r4, r1
 800717c:	b10a      	cbz	r2, 8007182 <_printf_common+0x26>
 800717e:	3301      	adds	r3, #1
 8007180:	6033      	str	r3, [r6, #0]
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	0699      	lsls	r1, r3, #26
 8007186:	bf42      	ittt	mi
 8007188:	6833      	ldrmi	r3, [r6, #0]
 800718a:	3302      	addmi	r3, #2
 800718c:	6033      	strmi	r3, [r6, #0]
 800718e:	6825      	ldr	r5, [r4, #0]
 8007190:	f015 0506 	ands.w	r5, r5, #6
 8007194:	d106      	bne.n	80071a4 <_printf_common+0x48>
 8007196:	f104 0a19 	add.w	sl, r4, #25
 800719a:	68e3      	ldr	r3, [r4, #12]
 800719c:	6832      	ldr	r2, [r6, #0]
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dc26      	bgt.n	80071f2 <_printf_common+0x96>
 80071a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	3b00      	subs	r3, #0
 80071ac:	bf18      	it	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	0692      	lsls	r2, r2, #26
 80071b2:	d42b      	bmi.n	800720c <_printf_common+0xb0>
 80071b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071b8:	4641      	mov	r1, r8
 80071ba:	4638      	mov	r0, r7
 80071bc:	47c8      	blx	r9
 80071be:	3001      	adds	r0, #1
 80071c0:	d01e      	beq.n	8007200 <_printf_common+0xa4>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	6922      	ldr	r2, [r4, #16]
 80071c6:	f003 0306 	and.w	r3, r3, #6
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	bf02      	ittt	eq
 80071ce:	68e5      	ldreq	r5, [r4, #12]
 80071d0:	6833      	ldreq	r3, [r6, #0]
 80071d2:	1aed      	subeq	r5, r5, r3
 80071d4:	68a3      	ldr	r3, [r4, #8]
 80071d6:	bf0c      	ite	eq
 80071d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071dc:	2500      	movne	r5, #0
 80071de:	4293      	cmp	r3, r2
 80071e0:	bfc4      	itt	gt
 80071e2:	1a9b      	subgt	r3, r3, r2
 80071e4:	18ed      	addgt	r5, r5, r3
 80071e6:	2600      	movs	r6, #0
 80071e8:	341a      	adds	r4, #26
 80071ea:	42b5      	cmp	r5, r6
 80071ec:	d11a      	bne.n	8007224 <_printf_common+0xc8>
 80071ee:	2000      	movs	r0, #0
 80071f0:	e008      	b.n	8007204 <_printf_common+0xa8>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4652      	mov	r2, sl
 80071f6:	4641      	mov	r1, r8
 80071f8:	4638      	mov	r0, r7
 80071fa:	47c8      	blx	r9
 80071fc:	3001      	adds	r0, #1
 80071fe:	d103      	bne.n	8007208 <_printf_common+0xac>
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007208:	3501      	adds	r5, #1
 800720a:	e7c6      	b.n	800719a <_printf_common+0x3e>
 800720c:	18e1      	adds	r1, r4, r3
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	2030      	movs	r0, #48	@ 0x30
 8007212:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007216:	4422      	add	r2, r4
 8007218:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800721c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007220:	3302      	adds	r3, #2
 8007222:	e7c7      	b.n	80071b4 <_printf_common+0x58>
 8007224:	2301      	movs	r3, #1
 8007226:	4622      	mov	r2, r4
 8007228:	4641      	mov	r1, r8
 800722a:	4638      	mov	r0, r7
 800722c:	47c8      	blx	r9
 800722e:	3001      	adds	r0, #1
 8007230:	d0e6      	beq.n	8007200 <_printf_common+0xa4>
 8007232:	3601      	adds	r6, #1
 8007234:	e7d9      	b.n	80071ea <_printf_common+0x8e>
	...

08007238 <_printf_i>:
 8007238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	7e0f      	ldrb	r7, [r1, #24]
 800723e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007240:	2f78      	cmp	r7, #120	@ 0x78
 8007242:	4691      	mov	r9, r2
 8007244:	4680      	mov	r8, r0
 8007246:	460c      	mov	r4, r1
 8007248:	469a      	mov	sl, r3
 800724a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800724e:	d807      	bhi.n	8007260 <_printf_i+0x28>
 8007250:	2f62      	cmp	r7, #98	@ 0x62
 8007252:	d80a      	bhi.n	800726a <_printf_i+0x32>
 8007254:	2f00      	cmp	r7, #0
 8007256:	f000 80d2 	beq.w	80073fe <_printf_i+0x1c6>
 800725a:	2f58      	cmp	r7, #88	@ 0x58
 800725c:	f000 80b9 	beq.w	80073d2 <_printf_i+0x19a>
 8007260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007264:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007268:	e03a      	b.n	80072e0 <_printf_i+0xa8>
 800726a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800726e:	2b15      	cmp	r3, #21
 8007270:	d8f6      	bhi.n	8007260 <_printf_i+0x28>
 8007272:	a101      	add	r1, pc, #4	@ (adr r1, 8007278 <_printf_i+0x40>)
 8007274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007278:	080072d1 	.word	0x080072d1
 800727c:	080072e5 	.word	0x080072e5
 8007280:	08007261 	.word	0x08007261
 8007284:	08007261 	.word	0x08007261
 8007288:	08007261 	.word	0x08007261
 800728c:	08007261 	.word	0x08007261
 8007290:	080072e5 	.word	0x080072e5
 8007294:	08007261 	.word	0x08007261
 8007298:	08007261 	.word	0x08007261
 800729c:	08007261 	.word	0x08007261
 80072a0:	08007261 	.word	0x08007261
 80072a4:	080073e5 	.word	0x080073e5
 80072a8:	0800730f 	.word	0x0800730f
 80072ac:	0800739f 	.word	0x0800739f
 80072b0:	08007261 	.word	0x08007261
 80072b4:	08007261 	.word	0x08007261
 80072b8:	08007407 	.word	0x08007407
 80072bc:	08007261 	.word	0x08007261
 80072c0:	0800730f 	.word	0x0800730f
 80072c4:	08007261 	.word	0x08007261
 80072c8:	08007261 	.word	0x08007261
 80072cc:	080073a7 	.word	0x080073a7
 80072d0:	6833      	ldr	r3, [r6, #0]
 80072d2:	1d1a      	adds	r2, r3, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6032      	str	r2, [r6, #0]
 80072d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072e0:	2301      	movs	r3, #1
 80072e2:	e09d      	b.n	8007420 <_printf_i+0x1e8>
 80072e4:	6833      	ldr	r3, [r6, #0]
 80072e6:	6820      	ldr	r0, [r4, #0]
 80072e8:	1d19      	adds	r1, r3, #4
 80072ea:	6031      	str	r1, [r6, #0]
 80072ec:	0606      	lsls	r6, r0, #24
 80072ee:	d501      	bpl.n	80072f4 <_printf_i+0xbc>
 80072f0:	681d      	ldr	r5, [r3, #0]
 80072f2:	e003      	b.n	80072fc <_printf_i+0xc4>
 80072f4:	0645      	lsls	r5, r0, #25
 80072f6:	d5fb      	bpl.n	80072f0 <_printf_i+0xb8>
 80072f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072fc:	2d00      	cmp	r5, #0
 80072fe:	da03      	bge.n	8007308 <_printf_i+0xd0>
 8007300:	232d      	movs	r3, #45	@ 0x2d
 8007302:	426d      	negs	r5, r5
 8007304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007308:	4859      	ldr	r0, [pc, #356]	@ (8007470 <_printf_i+0x238>)
 800730a:	230a      	movs	r3, #10
 800730c:	e011      	b.n	8007332 <_printf_i+0xfa>
 800730e:	6821      	ldr	r1, [r4, #0]
 8007310:	6833      	ldr	r3, [r6, #0]
 8007312:	0608      	lsls	r0, r1, #24
 8007314:	f853 5b04 	ldr.w	r5, [r3], #4
 8007318:	d402      	bmi.n	8007320 <_printf_i+0xe8>
 800731a:	0649      	lsls	r1, r1, #25
 800731c:	bf48      	it	mi
 800731e:	b2ad      	uxthmi	r5, r5
 8007320:	2f6f      	cmp	r7, #111	@ 0x6f
 8007322:	4853      	ldr	r0, [pc, #332]	@ (8007470 <_printf_i+0x238>)
 8007324:	6033      	str	r3, [r6, #0]
 8007326:	bf14      	ite	ne
 8007328:	230a      	movne	r3, #10
 800732a:	2308      	moveq	r3, #8
 800732c:	2100      	movs	r1, #0
 800732e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007332:	6866      	ldr	r6, [r4, #4]
 8007334:	60a6      	str	r6, [r4, #8]
 8007336:	2e00      	cmp	r6, #0
 8007338:	bfa2      	ittt	ge
 800733a:	6821      	ldrge	r1, [r4, #0]
 800733c:	f021 0104 	bicge.w	r1, r1, #4
 8007340:	6021      	strge	r1, [r4, #0]
 8007342:	b90d      	cbnz	r5, 8007348 <_printf_i+0x110>
 8007344:	2e00      	cmp	r6, #0
 8007346:	d04b      	beq.n	80073e0 <_printf_i+0x1a8>
 8007348:	4616      	mov	r6, r2
 800734a:	fbb5 f1f3 	udiv	r1, r5, r3
 800734e:	fb03 5711 	mls	r7, r3, r1, r5
 8007352:	5dc7      	ldrb	r7, [r0, r7]
 8007354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007358:	462f      	mov	r7, r5
 800735a:	42bb      	cmp	r3, r7
 800735c:	460d      	mov	r5, r1
 800735e:	d9f4      	bls.n	800734a <_printf_i+0x112>
 8007360:	2b08      	cmp	r3, #8
 8007362:	d10b      	bne.n	800737c <_printf_i+0x144>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	07df      	lsls	r7, r3, #31
 8007368:	d508      	bpl.n	800737c <_printf_i+0x144>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	6861      	ldr	r1, [r4, #4]
 800736e:	4299      	cmp	r1, r3
 8007370:	bfde      	ittt	le
 8007372:	2330      	movle	r3, #48	@ 0x30
 8007374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800737c:	1b92      	subs	r2, r2, r6
 800737e:	6122      	str	r2, [r4, #16]
 8007380:	f8cd a000 	str.w	sl, [sp]
 8007384:	464b      	mov	r3, r9
 8007386:	aa03      	add	r2, sp, #12
 8007388:	4621      	mov	r1, r4
 800738a:	4640      	mov	r0, r8
 800738c:	f7ff fee6 	bl	800715c <_printf_common>
 8007390:	3001      	adds	r0, #1
 8007392:	d14a      	bne.n	800742a <_printf_i+0x1f2>
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	b004      	add	sp, #16
 800739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	f043 0320 	orr.w	r3, r3, #32
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	4833      	ldr	r0, [pc, #204]	@ (8007474 <_printf_i+0x23c>)
 80073a8:	2778      	movs	r7, #120	@ 0x78
 80073aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	6831      	ldr	r1, [r6, #0]
 80073b2:	061f      	lsls	r7, r3, #24
 80073b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80073b8:	d402      	bmi.n	80073c0 <_printf_i+0x188>
 80073ba:	065f      	lsls	r7, r3, #25
 80073bc:	bf48      	it	mi
 80073be:	b2ad      	uxthmi	r5, r5
 80073c0:	6031      	str	r1, [r6, #0]
 80073c2:	07d9      	lsls	r1, r3, #31
 80073c4:	bf44      	itt	mi
 80073c6:	f043 0320 	orrmi.w	r3, r3, #32
 80073ca:	6023      	strmi	r3, [r4, #0]
 80073cc:	b11d      	cbz	r5, 80073d6 <_printf_i+0x19e>
 80073ce:	2310      	movs	r3, #16
 80073d0:	e7ac      	b.n	800732c <_printf_i+0xf4>
 80073d2:	4827      	ldr	r0, [pc, #156]	@ (8007470 <_printf_i+0x238>)
 80073d4:	e7e9      	b.n	80073aa <_printf_i+0x172>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	f023 0320 	bic.w	r3, r3, #32
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	e7f6      	b.n	80073ce <_printf_i+0x196>
 80073e0:	4616      	mov	r6, r2
 80073e2:	e7bd      	b.n	8007360 <_printf_i+0x128>
 80073e4:	6833      	ldr	r3, [r6, #0]
 80073e6:	6825      	ldr	r5, [r4, #0]
 80073e8:	6961      	ldr	r1, [r4, #20]
 80073ea:	1d18      	adds	r0, r3, #4
 80073ec:	6030      	str	r0, [r6, #0]
 80073ee:	062e      	lsls	r6, r5, #24
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	d501      	bpl.n	80073f8 <_printf_i+0x1c0>
 80073f4:	6019      	str	r1, [r3, #0]
 80073f6:	e002      	b.n	80073fe <_printf_i+0x1c6>
 80073f8:	0668      	lsls	r0, r5, #25
 80073fa:	d5fb      	bpl.n	80073f4 <_printf_i+0x1bc>
 80073fc:	8019      	strh	r1, [r3, #0]
 80073fe:	2300      	movs	r3, #0
 8007400:	6123      	str	r3, [r4, #16]
 8007402:	4616      	mov	r6, r2
 8007404:	e7bc      	b.n	8007380 <_printf_i+0x148>
 8007406:	6833      	ldr	r3, [r6, #0]
 8007408:	1d1a      	adds	r2, r3, #4
 800740a:	6032      	str	r2, [r6, #0]
 800740c:	681e      	ldr	r6, [r3, #0]
 800740e:	6862      	ldr	r2, [r4, #4]
 8007410:	2100      	movs	r1, #0
 8007412:	4630      	mov	r0, r6
 8007414:	f7f8 fee4 	bl	80001e0 <memchr>
 8007418:	b108      	cbz	r0, 800741e <_printf_i+0x1e6>
 800741a:	1b80      	subs	r0, r0, r6
 800741c:	6060      	str	r0, [r4, #4]
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	2300      	movs	r3, #0
 8007424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007428:	e7aa      	b.n	8007380 <_printf_i+0x148>
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	4632      	mov	r2, r6
 800742e:	4649      	mov	r1, r9
 8007430:	4640      	mov	r0, r8
 8007432:	47d0      	blx	sl
 8007434:	3001      	adds	r0, #1
 8007436:	d0ad      	beq.n	8007394 <_printf_i+0x15c>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	079b      	lsls	r3, r3, #30
 800743c:	d413      	bmi.n	8007466 <_printf_i+0x22e>
 800743e:	68e0      	ldr	r0, [r4, #12]
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	4298      	cmp	r0, r3
 8007444:	bfb8      	it	lt
 8007446:	4618      	movlt	r0, r3
 8007448:	e7a6      	b.n	8007398 <_printf_i+0x160>
 800744a:	2301      	movs	r3, #1
 800744c:	4632      	mov	r2, r6
 800744e:	4649      	mov	r1, r9
 8007450:	4640      	mov	r0, r8
 8007452:	47d0      	blx	sl
 8007454:	3001      	adds	r0, #1
 8007456:	d09d      	beq.n	8007394 <_printf_i+0x15c>
 8007458:	3501      	adds	r5, #1
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	9903      	ldr	r1, [sp, #12]
 800745e:	1a5b      	subs	r3, r3, r1
 8007460:	42ab      	cmp	r3, r5
 8007462:	dcf2      	bgt.n	800744a <_printf_i+0x212>
 8007464:	e7eb      	b.n	800743e <_printf_i+0x206>
 8007466:	2500      	movs	r5, #0
 8007468:	f104 0619 	add.w	r6, r4, #25
 800746c:	e7f5      	b.n	800745a <_printf_i+0x222>
 800746e:	bf00      	nop
 8007470:	0800888d 	.word	0x0800888d
 8007474:	0800889e 	.word	0x0800889e

08007478 <__sflush_r>:
 8007478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	0716      	lsls	r6, r2, #28
 8007482:	4605      	mov	r5, r0
 8007484:	460c      	mov	r4, r1
 8007486:	d454      	bmi.n	8007532 <__sflush_r+0xba>
 8007488:	684b      	ldr	r3, [r1, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dc02      	bgt.n	8007494 <__sflush_r+0x1c>
 800748e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	dd48      	ble.n	8007526 <__sflush_r+0xae>
 8007494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007496:	2e00      	cmp	r6, #0
 8007498:	d045      	beq.n	8007526 <__sflush_r+0xae>
 800749a:	2300      	movs	r3, #0
 800749c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074a0:	682f      	ldr	r7, [r5, #0]
 80074a2:	6a21      	ldr	r1, [r4, #32]
 80074a4:	602b      	str	r3, [r5, #0]
 80074a6:	d030      	beq.n	800750a <__sflush_r+0x92>
 80074a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	0759      	lsls	r1, r3, #29
 80074ae:	d505      	bpl.n	80074bc <__sflush_r+0x44>
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074b6:	b10b      	cbz	r3, 80074bc <__sflush_r+0x44>
 80074b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074ba:	1ad2      	subs	r2, r2, r3
 80074bc:	2300      	movs	r3, #0
 80074be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074c0:	6a21      	ldr	r1, [r4, #32]
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b0      	blx	r6
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	d106      	bne.n	80074da <__sflush_r+0x62>
 80074cc:	6829      	ldr	r1, [r5, #0]
 80074ce:	291d      	cmp	r1, #29
 80074d0:	d82b      	bhi.n	800752a <__sflush_r+0xb2>
 80074d2:	4a2a      	ldr	r2, [pc, #168]	@ (800757c <__sflush_r+0x104>)
 80074d4:	410a      	asrs	r2, r1
 80074d6:	07d6      	lsls	r6, r2, #31
 80074d8:	d427      	bmi.n	800752a <__sflush_r+0xb2>
 80074da:	2200      	movs	r2, #0
 80074dc:	6062      	str	r2, [r4, #4]
 80074de:	04d9      	lsls	r1, r3, #19
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	d504      	bpl.n	80074f0 <__sflush_r+0x78>
 80074e6:	1c42      	adds	r2, r0, #1
 80074e8:	d101      	bne.n	80074ee <__sflush_r+0x76>
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	b903      	cbnz	r3, 80074f0 <__sflush_r+0x78>
 80074ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80074f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074f2:	602f      	str	r7, [r5, #0]
 80074f4:	b1b9      	cbz	r1, 8007526 <__sflush_r+0xae>
 80074f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074fa:	4299      	cmp	r1, r3
 80074fc:	d002      	beq.n	8007504 <__sflush_r+0x8c>
 80074fe:	4628      	mov	r0, r5
 8007500:	f7ff fbf2 	bl	8006ce8 <_free_r>
 8007504:	2300      	movs	r3, #0
 8007506:	6363      	str	r3, [r4, #52]	@ 0x34
 8007508:	e00d      	b.n	8007526 <__sflush_r+0xae>
 800750a:	2301      	movs	r3, #1
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
 8007510:	4602      	mov	r2, r0
 8007512:	1c50      	adds	r0, r2, #1
 8007514:	d1c9      	bne.n	80074aa <__sflush_r+0x32>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0c6      	beq.n	80074aa <__sflush_r+0x32>
 800751c:	2b1d      	cmp	r3, #29
 800751e:	d001      	beq.n	8007524 <__sflush_r+0xac>
 8007520:	2b16      	cmp	r3, #22
 8007522:	d11e      	bne.n	8007562 <__sflush_r+0xea>
 8007524:	602f      	str	r7, [r5, #0]
 8007526:	2000      	movs	r0, #0
 8007528:	e022      	b.n	8007570 <__sflush_r+0xf8>
 800752a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800752e:	b21b      	sxth	r3, r3
 8007530:	e01b      	b.n	800756a <__sflush_r+0xf2>
 8007532:	690f      	ldr	r7, [r1, #16]
 8007534:	2f00      	cmp	r7, #0
 8007536:	d0f6      	beq.n	8007526 <__sflush_r+0xae>
 8007538:	0793      	lsls	r3, r2, #30
 800753a:	680e      	ldr	r6, [r1, #0]
 800753c:	bf08      	it	eq
 800753e:	694b      	ldreq	r3, [r1, #20]
 8007540:	600f      	str	r7, [r1, #0]
 8007542:	bf18      	it	ne
 8007544:	2300      	movne	r3, #0
 8007546:	eba6 0807 	sub.w	r8, r6, r7
 800754a:	608b      	str	r3, [r1, #8]
 800754c:	f1b8 0f00 	cmp.w	r8, #0
 8007550:	dde9      	ble.n	8007526 <__sflush_r+0xae>
 8007552:	6a21      	ldr	r1, [r4, #32]
 8007554:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007556:	4643      	mov	r3, r8
 8007558:	463a      	mov	r2, r7
 800755a:	4628      	mov	r0, r5
 800755c:	47b0      	blx	r6
 800755e:	2800      	cmp	r0, #0
 8007560:	dc08      	bgt.n	8007574 <__sflush_r+0xfc>
 8007562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007574:	4407      	add	r7, r0
 8007576:	eba8 0800 	sub.w	r8, r8, r0
 800757a:	e7e7      	b.n	800754c <__sflush_r+0xd4>
 800757c:	dfbffffe 	.word	0xdfbffffe

08007580 <_fflush_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	4605      	mov	r5, r0
 8007586:	460c      	mov	r4, r1
 8007588:	b913      	cbnz	r3, 8007590 <_fflush_r+0x10>
 800758a:	2500      	movs	r5, #0
 800758c:	4628      	mov	r0, r5
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	b118      	cbz	r0, 800759a <_fflush_r+0x1a>
 8007592:	6a03      	ldr	r3, [r0, #32]
 8007594:	b90b      	cbnz	r3, 800759a <_fflush_r+0x1a>
 8007596:	f7ff f9ad 	bl	80068f4 <__sinit>
 800759a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f3      	beq.n	800758a <_fflush_r+0xa>
 80075a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075a4:	07d0      	lsls	r0, r2, #31
 80075a6:	d404      	bmi.n	80075b2 <_fflush_r+0x32>
 80075a8:	0599      	lsls	r1, r3, #22
 80075aa:	d402      	bmi.n	80075b2 <_fflush_r+0x32>
 80075ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ae:	f7ff fb98 	bl	8006ce2 <__retarget_lock_acquire_recursive>
 80075b2:	4628      	mov	r0, r5
 80075b4:	4621      	mov	r1, r4
 80075b6:	f7ff ff5f 	bl	8007478 <__sflush_r>
 80075ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075bc:	07da      	lsls	r2, r3, #31
 80075be:	4605      	mov	r5, r0
 80075c0:	d4e4      	bmi.n	800758c <_fflush_r+0xc>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	059b      	lsls	r3, r3, #22
 80075c6:	d4e1      	bmi.n	800758c <_fflush_r+0xc>
 80075c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ca:	f7ff fb8b 	bl	8006ce4 <__retarget_lock_release_recursive>
 80075ce:	e7dd      	b.n	800758c <_fflush_r+0xc>

080075d0 <__swhatbuf_r>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	460c      	mov	r4, r1
 80075d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d8:	2900      	cmp	r1, #0
 80075da:	b096      	sub	sp, #88	@ 0x58
 80075dc:	4615      	mov	r5, r2
 80075de:	461e      	mov	r6, r3
 80075e0:	da0d      	bge.n	80075fe <__swhatbuf_r+0x2e>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075e8:	f04f 0100 	mov.w	r1, #0
 80075ec:	bf14      	ite	ne
 80075ee:	2340      	movne	r3, #64	@ 0x40
 80075f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075f4:	2000      	movs	r0, #0
 80075f6:	6031      	str	r1, [r6, #0]
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	b016      	add	sp, #88	@ 0x58
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	466a      	mov	r2, sp
 8007600:	f000 f848 	bl	8007694 <_fstat_r>
 8007604:	2800      	cmp	r0, #0
 8007606:	dbec      	blt.n	80075e2 <__swhatbuf_r+0x12>
 8007608:	9901      	ldr	r1, [sp, #4]
 800760a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800760e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007612:	4259      	negs	r1, r3
 8007614:	4159      	adcs	r1, r3
 8007616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800761a:	e7eb      	b.n	80075f4 <__swhatbuf_r+0x24>

0800761c <__smakebuf_r>:
 800761c:	898b      	ldrh	r3, [r1, #12]
 800761e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007620:	079d      	lsls	r5, r3, #30
 8007622:	4606      	mov	r6, r0
 8007624:	460c      	mov	r4, r1
 8007626:	d507      	bpl.n	8007638 <__smakebuf_r+0x1c>
 8007628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	2301      	movs	r3, #1
 8007632:	6163      	str	r3, [r4, #20]
 8007634:	b003      	add	sp, #12
 8007636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007638:	ab01      	add	r3, sp, #4
 800763a:	466a      	mov	r2, sp
 800763c:	f7ff ffc8 	bl	80075d0 <__swhatbuf_r>
 8007640:	9f00      	ldr	r7, [sp, #0]
 8007642:	4605      	mov	r5, r0
 8007644:	4639      	mov	r1, r7
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff fbba 	bl	8006dc0 <_malloc_r>
 800764c:	b948      	cbnz	r0, 8007662 <__smakebuf_r+0x46>
 800764e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007652:	059a      	lsls	r2, r3, #22
 8007654:	d4ee      	bmi.n	8007634 <__smakebuf_r+0x18>
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	f043 0302 	orr.w	r3, r3, #2
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	e7e2      	b.n	8007628 <__smakebuf_r+0xc>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	6020      	str	r0, [r4, #0]
 8007666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766a:	81a3      	strh	r3, [r4, #12]
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007672:	b15b      	cbz	r3, 800768c <__smakebuf_r+0x70>
 8007674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007678:	4630      	mov	r0, r6
 800767a:	f000 f81d 	bl	80076b8 <_isatty_r>
 800767e:	b128      	cbz	r0, 800768c <__smakebuf_r+0x70>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	f043 0301 	orr.w	r3, r3, #1
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	431d      	orrs	r5, r3
 8007690:	81a5      	strh	r5, [r4, #12]
 8007692:	e7cf      	b.n	8007634 <__smakebuf_r+0x18>

08007694 <_fstat_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d07      	ldr	r5, [pc, #28]	@ (80076b4 <_fstat_r+0x20>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	f7fb fb5e 	bl	8002d62 <_fstat>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d102      	bne.n	80076b0 <_fstat_r+0x1c>
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	b103      	cbz	r3, 80076b0 <_fstat_r+0x1c>
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	bd38      	pop	{r3, r4, r5, pc}
 80076b2:	bf00      	nop
 80076b4:	200005e8 	.word	0x200005e8

080076b8 <_isatty_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d06      	ldr	r5, [pc, #24]	@ (80076d4 <_isatty_r+0x1c>)
 80076bc:	2300      	movs	r3, #0
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7fb fb5d 	bl	8002d82 <_isatty>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_isatty_r+0x1a>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_isatty_r+0x1a>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	200005e8 	.word	0x200005e8

080076d8 <_sbrk_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d06      	ldr	r5, [pc, #24]	@ (80076f4 <_sbrk_r+0x1c>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7fb fb66 	bl	8002db4 <_sbrk>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_sbrk_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_sbrk_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	200005e8 	.word	0x200005e8

080076f8 <pow>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	ed2d 8b02 	vpush	{d8}
 80076fe:	eeb0 8a40 	vmov.f32	s16, s0
 8007702:	eef0 8a60 	vmov.f32	s17, s1
 8007706:	ec55 4b11 	vmov	r4, r5, d1
 800770a:	f000 f979 	bl	8007a00 <__ieee754_pow>
 800770e:	4622      	mov	r2, r4
 8007710:	462b      	mov	r3, r5
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	ec57 6b10 	vmov	r6, r7, d0
 800771a:	f7f9 fa07 	bl	8000b2c <__aeabi_dcmpun>
 800771e:	2800      	cmp	r0, #0
 8007720:	d13b      	bne.n	800779a <pow+0xa2>
 8007722:	ec51 0b18 	vmov	r0, r1, d8
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	f7f9 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800772e:	b1b8      	cbz	r0, 8007760 <pow+0x68>
 8007730:	2200      	movs	r2, #0
 8007732:	2300      	movs	r3, #0
 8007734:	4620      	mov	r0, r4
 8007736:	4629      	mov	r1, r5
 8007738:	f7f9 f9c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800773c:	2800      	cmp	r0, #0
 800773e:	d146      	bne.n	80077ce <pow+0xd6>
 8007740:	ec45 4b10 	vmov	d0, r4, r5
 8007744:	f000 f874 	bl	8007830 <finite>
 8007748:	b338      	cbz	r0, 800779a <pow+0xa2>
 800774a:	2200      	movs	r2, #0
 800774c:	2300      	movs	r3, #0
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	b300      	cbz	r0, 800779a <pow+0xa2>
 8007758:	f7ff fa98 	bl	8006c8c <__errno>
 800775c:	2322      	movs	r3, #34	@ 0x22
 800775e:	e01b      	b.n	8007798 <pow+0xa0>
 8007760:	ec47 6b10 	vmov	d0, r6, r7
 8007764:	f000 f864 	bl	8007830 <finite>
 8007768:	b9e0      	cbnz	r0, 80077a4 <pow+0xac>
 800776a:	eeb0 0a48 	vmov.f32	s0, s16
 800776e:	eef0 0a68 	vmov.f32	s1, s17
 8007772:	f000 f85d 	bl	8007830 <finite>
 8007776:	b1a8      	cbz	r0, 80077a4 <pow+0xac>
 8007778:	ec45 4b10 	vmov	d0, r4, r5
 800777c:	f000 f858 	bl	8007830 <finite>
 8007780:	b180      	cbz	r0, 80077a4 <pow+0xac>
 8007782:	4632      	mov	r2, r6
 8007784:	463b      	mov	r3, r7
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f9 f9cf 	bl	8000b2c <__aeabi_dcmpun>
 800778e:	2800      	cmp	r0, #0
 8007790:	d0e2      	beq.n	8007758 <pow+0x60>
 8007792:	f7ff fa7b 	bl	8006c8c <__errno>
 8007796:	2321      	movs	r3, #33	@ 0x21
 8007798:	6003      	str	r3, [r0, #0]
 800779a:	ecbd 8b02 	vpop	{d8}
 800779e:	ec47 6b10 	vmov	d0, r6, r7
 80077a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d0f2      	beq.n	800779a <pow+0xa2>
 80077b4:	eeb0 0a48 	vmov.f32	s0, s16
 80077b8:	eef0 0a68 	vmov.f32	s1, s17
 80077bc:	f000 f838 	bl	8007830 <finite>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d0ea      	beq.n	800779a <pow+0xa2>
 80077c4:	ec45 4b10 	vmov	d0, r4, r5
 80077c8:	f000 f832 	bl	8007830 <finite>
 80077cc:	e7c3      	b.n	8007756 <pow+0x5e>
 80077ce:	4f01      	ldr	r7, [pc, #4]	@ (80077d4 <pow+0xdc>)
 80077d0:	2600      	movs	r6, #0
 80077d2:	e7e2      	b.n	800779a <pow+0xa2>
 80077d4:	3ff00000 	.word	0x3ff00000

080077d8 <sqrt>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	ed2d 8b02 	vpush	{d8}
 80077de:	ec55 4b10 	vmov	r4, r5, d0
 80077e2:	f000 f831 	bl	8007848 <__ieee754_sqrt>
 80077e6:	4622      	mov	r2, r4
 80077e8:	462b      	mov	r3, r5
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	eeb0 8a40 	vmov.f32	s16, s0
 80077f2:	eef0 8a60 	vmov.f32	s17, s1
 80077f6:	f7f9 f999 	bl	8000b2c <__aeabi_dcmpun>
 80077fa:	b990      	cbnz	r0, 8007822 <sqrt+0x4a>
 80077fc:	2200      	movs	r2, #0
 80077fe:	2300      	movs	r3, #0
 8007800:	4620      	mov	r0, r4
 8007802:	4629      	mov	r1, r5
 8007804:	f7f9 f96a 	bl	8000adc <__aeabi_dcmplt>
 8007808:	b158      	cbz	r0, 8007822 <sqrt+0x4a>
 800780a:	f7ff fa3f 	bl	8006c8c <__errno>
 800780e:	2321      	movs	r3, #33	@ 0x21
 8007810:	6003      	str	r3, [r0, #0]
 8007812:	2200      	movs	r2, #0
 8007814:	2300      	movs	r3, #0
 8007816:	4610      	mov	r0, r2
 8007818:	4619      	mov	r1, r3
 800781a:	f7f9 f817 	bl	800084c <__aeabi_ddiv>
 800781e:	ec41 0b18 	vmov	d8, r0, r1
 8007822:	eeb0 0a48 	vmov.f32	s0, s16
 8007826:	eef0 0a68 	vmov.f32	s1, s17
 800782a:	ecbd 8b02 	vpop	{d8}
 800782e:	bd38      	pop	{r3, r4, r5, pc}

08007830 <finite>:
 8007830:	b082      	sub	sp, #8
 8007832:	ed8d 0b00 	vstr	d0, [sp]
 8007836:	9801      	ldr	r0, [sp, #4]
 8007838:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800783c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007840:	0fc0      	lsrs	r0, r0, #31
 8007842:	b002      	add	sp, #8
 8007844:	4770      	bx	lr
	...

08007848 <__ieee754_sqrt>:
 8007848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	4a68      	ldr	r2, [pc, #416]	@ (80079f0 <__ieee754_sqrt+0x1a8>)
 800784e:	ec55 4b10 	vmov	r4, r5, d0
 8007852:	43aa      	bics	r2, r5
 8007854:	462b      	mov	r3, r5
 8007856:	4621      	mov	r1, r4
 8007858:	d110      	bne.n	800787c <__ieee754_sqrt+0x34>
 800785a:	4622      	mov	r2, r4
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f8 feca 	bl	80005f8 <__aeabi_dmul>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4620      	mov	r0, r4
 800786a:	4629      	mov	r1, r5
 800786c:	f7f8 fd0e 	bl	800028c <__adddf3>
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	ec45 4b10 	vmov	d0, r4, r5
 8007878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	2d00      	cmp	r5, #0
 800787e:	dc0e      	bgt.n	800789e <__ieee754_sqrt+0x56>
 8007880:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007884:	4322      	orrs	r2, r4
 8007886:	d0f5      	beq.n	8007874 <__ieee754_sqrt+0x2c>
 8007888:	b19d      	cbz	r5, 80078b2 <__ieee754_sqrt+0x6a>
 800788a:	4622      	mov	r2, r4
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	f7f8 fcfa 	bl	8000288 <__aeabi_dsub>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	f7f8 ffd8 	bl	800084c <__aeabi_ddiv>
 800789c:	e7e8      	b.n	8007870 <__ieee754_sqrt+0x28>
 800789e:	152a      	asrs	r2, r5, #20
 80078a0:	d115      	bne.n	80078ce <__ieee754_sqrt+0x86>
 80078a2:	2000      	movs	r0, #0
 80078a4:	e009      	b.n	80078ba <__ieee754_sqrt+0x72>
 80078a6:	0acb      	lsrs	r3, r1, #11
 80078a8:	3a15      	subs	r2, #21
 80078aa:	0549      	lsls	r1, r1, #21
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0fa      	beq.n	80078a6 <__ieee754_sqrt+0x5e>
 80078b0:	e7f7      	b.n	80078a2 <__ieee754_sqrt+0x5a>
 80078b2:	462a      	mov	r2, r5
 80078b4:	e7fa      	b.n	80078ac <__ieee754_sqrt+0x64>
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	3001      	adds	r0, #1
 80078ba:	02dc      	lsls	r4, r3, #11
 80078bc:	d5fb      	bpl.n	80078b6 <__ieee754_sqrt+0x6e>
 80078be:	1e44      	subs	r4, r0, #1
 80078c0:	1b12      	subs	r2, r2, r4
 80078c2:	f1c0 0420 	rsb	r4, r0, #32
 80078c6:	fa21 f404 	lsr.w	r4, r1, r4
 80078ca:	4323      	orrs	r3, r4
 80078cc:	4081      	lsls	r1, r0
 80078ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80078d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078da:	07d2      	lsls	r2, r2, #31
 80078dc:	bf5c      	itt	pl
 80078de:	005b      	lslpl	r3, r3, #1
 80078e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80078e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80078e8:	bf58      	it	pl
 80078ea:	0049      	lslpl	r1, r1, #1
 80078ec:	2600      	movs	r6, #0
 80078ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80078f2:	106d      	asrs	r5, r5, #1
 80078f4:	0049      	lsls	r1, r1, #1
 80078f6:	2016      	movs	r0, #22
 80078f8:	4632      	mov	r2, r6
 80078fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80078fe:	1917      	adds	r7, r2, r4
 8007900:	429f      	cmp	r7, r3
 8007902:	bfde      	ittt	le
 8007904:	193a      	addle	r2, r7, r4
 8007906:	1bdb      	suble	r3, r3, r7
 8007908:	1936      	addle	r6, r6, r4
 800790a:	0fcf      	lsrs	r7, r1, #31
 800790c:	3801      	subs	r0, #1
 800790e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007912:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007916:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800791a:	d1f0      	bne.n	80078fe <__ieee754_sqrt+0xb6>
 800791c:	4604      	mov	r4, r0
 800791e:	2720      	movs	r7, #32
 8007920:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007924:	429a      	cmp	r2, r3
 8007926:	eb00 0e0c 	add.w	lr, r0, ip
 800792a:	db02      	blt.n	8007932 <__ieee754_sqrt+0xea>
 800792c:	d113      	bne.n	8007956 <__ieee754_sqrt+0x10e>
 800792e:	458e      	cmp	lr, r1
 8007930:	d811      	bhi.n	8007956 <__ieee754_sqrt+0x10e>
 8007932:	f1be 0f00 	cmp.w	lr, #0
 8007936:	eb0e 000c 	add.w	r0, lr, ip
 800793a:	da42      	bge.n	80079c2 <__ieee754_sqrt+0x17a>
 800793c:	2800      	cmp	r0, #0
 800793e:	db40      	blt.n	80079c2 <__ieee754_sqrt+0x17a>
 8007940:	f102 0801 	add.w	r8, r2, #1
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	458e      	cmp	lr, r1
 8007948:	bf88      	it	hi
 800794a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800794e:	eba1 010e 	sub.w	r1, r1, lr
 8007952:	4464      	add	r4, ip
 8007954:	4642      	mov	r2, r8
 8007956:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800795a:	3f01      	subs	r7, #1
 800795c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007960:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007964:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007968:	d1dc      	bne.n	8007924 <__ieee754_sqrt+0xdc>
 800796a:	4319      	orrs	r1, r3
 800796c:	d01b      	beq.n	80079a6 <__ieee754_sqrt+0x15e>
 800796e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80079f4 <__ieee754_sqrt+0x1ac>
 8007972:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80079f8 <__ieee754_sqrt+0x1b0>
 8007976:	e9da 0100 	ldrd	r0, r1, [sl]
 800797a:	e9db 2300 	ldrd	r2, r3, [fp]
 800797e:	f7f8 fc83 	bl	8000288 <__aeabi_dsub>
 8007982:	e9da 8900 	ldrd	r8, r9, [sl]
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4640      	mov	r0, r8
 800798c:	4649      	mov	r1, r9
 800798e:	f7f9 f8af 	bl	8000af0 <__aeabi_dcmple>
 8007992:	b140      	cbz	r0, 80079a6 <__ieee754_sqrt+0x15e>
 8007994:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007998:	e9da 0100 	ldrd	r0, r1, [sl]
 800799c:	e9db 2300 	ldrd	r2, r3, [fp]
 80079a0:	d111      	bne.n	80079c6 <__ieee754_sqrt+0x17e>
 80079a2:	3601      	adds	r6, #1
 80079a4:	463c      	mov	r4, r7
 80079a6:	1072      	asrs	r2, r6, #1
 80079a8:	0863      	lsrs	r3, r4, #1
 80079aa:	07f1      	lsls	r1, r6, #31
 80079ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80079b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80079b4:	bf48      	it	mi
 80079b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80079ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80079be:	4618      	mov	r0, r3
 80079c0:	e756      	b.n	8007870 <__ieee754_sqrt+0x28>
 80079c2:	4690      	mov	r8, r2
 80079c4:	e7be      	b.n	8007944 <__ieee754_sqrt+0xfc>
 80079c6:	f7f8 fc61 	bl	800028c <__adddf3>
 80079ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	f7f9 f881 	bl	8000adc <__aeabi_dcmplt>
 80079da:	b120      	cbz	r0, 80079e6 <__ieee754_sqrt+0x19e>
 80079dc:	1ca0      	adds	r0, r4, #2
 80079de:	bf08      	it	eq
 80079e0:	3601      	addeq	r6, #1
 80079e2:	3402      	adds	r4, #2
 80079e4:	e7df      	b.n	80079a6 <__ieee754_sqrt+0x15e>
 80079e6:	1c63      	adds	r3, r4, #1
 80079e8:	f023 0401 	bic.w	r4, r3, #1
 80079ec:	e7db      	b.n	80079a6 <__ieee754_sqrt+0x15e>
 80079ee:	bf00      	nop
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	20000098 	.word	0x20000098
 80079f8:	20000090 	.word	0x20000090
 80079fc:	00000000 	.word	0x00000000

08007a00 <__ieee754_pow>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	b091      	sub	sp, #68	@ 0x44
 8007a06:	ed8d 1b00 	vstr	d1, [sp]
 8007a0a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8007a0e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8007a12:	ea5a 0001 	orrs.w	r0, sl, r1
 8007a16:	ec57 6b10 	vmov	r6, r7, d0
 8007a1a:	d113      	bne.n	8007a44 <__ieee754_pow+0x44>
 8007a1c:	19b3      	adds	r3, r6, r6
 8007a1e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8007a22:	4152      	adcs	r2, r2
 8007a24:	4298      	cmp	r0, r3
 8007a26:	4b98      	ldr	r3, [pc, #608]	@ (8007c88 <__ieee754_pow+0x288>)
 8007a28:	4193      	sbcs	r3, r2
 8007a2a:	f080 84ea 	bcs.w	8008402 <__ieee754_pow+0xa02>
 8007a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 fc29 	bl	800028c <__adddf3>
 8007a3a:	ec41 0b10 	vmov	d0, r0, r1
 8007a3e:	b011      	add	sp, #68	@ 0x44
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	4a91      	ldr	r2, [pc, #580]	@ (8007c8c <__ieee754_pow+0x28c>)
 8007a46:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007a4a:	4590      	cmp	r8, r2
 8007a4c:	463d      	mov	r5, r7
 8007a4e:	4633      	mov	r3, r6
 8007a50:	d806      	bhi.n	8007a60 <__ieee754_pow+0x60>
 8007a52:	d101      	bne.n	8007a58 <__ieee754_pow+0x58>
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	d1ea      	bne.n	8007a2e <__ieee754_pow+0x2e>
 8007a58:	4592      	cmp	sl, r2
 8007a5a:	d801      	bhi.n	8007a60 <__ieee754_pow+0x60>
 8007a5c:	d10e      	bne.n	8007a7c <__ieee754_pow+0x7c>
 8007a5e:	b169      	cbz	r1, 8007a7c <__ieee754_pow+0x7c>
 8007a60:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007a64:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007a68:	431d      	orrs	r5, r3
 8007a6a:	d1e0      	bne.n	8007a2e <__ieee754_pow+0x2e>
 8007a6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a70:	18db      	adds	r3, r3, r3
 8007a72:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007a76:	4152      	adcs	r2, r2
 8007a78:	429d      	cmp	r5, r3
 8007a7a:	e7d4      	b.n	8007a26 <__ieee754_pow+0x26>
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	46c3      	mov	fp, r8
 8007a80:	da3a      	bge.n	8007af8 <__ieee754_pow+0xf8>
 8007a82:	4a83      	ldr	r2, [pc, #524]	@ (8007c90 <__ieee754_pow+0x290>)
 8007a84:	4592      	cmp	sl, r2
 8007a86:	d84d      	bhi.n	8007b24 <__ieee754_pow+0x124>
 8007a88:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007a8c:	4592      	cmp	sl, r2
 8007a8e:	f240 84c7 	bls.w	8008420 <__ieee754_pow+0xa20>
 8007a92:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007a96:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007a9a:	2a14      	cmp	r2, #20
 8007a9c:	dd0f      	ble.n	8007abe <__ieee754_pow+0xbe>
 8007a9e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007aa2:	fa21 f402 	lsr.w	r4, r1, r2
 8007aa6:	fa04 f202 	lsl.w	r2, r4, r2
 8007aaa:	428a      	cmp	r2, r1
 8007aac:	f040 84b8 	bne.w	8008420 <__ieee754_pow+0xa20>
 8007ab0:	f004 0401 	and.w	r4, r4, #1
 8007ab4:	f1c4 0402 	rsb	r4, r4, #2
 8007ab8:	2900      	cmp	r1, #0
 8007aba:	d158      	bne.n	8007b6e <__ieee754_pow+0x16e>
 8007abc:	e00e      	b.n	8007adc <__ieee754_pow+0xdc>
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d154      	bne.n	8007b6c <__ieee754_pow+0x16c>
 8007ac2:	f1c2 0214 	rsb	r2, r2, #20
 8007ac6:	fa4a f402 	asr.w	r4, sl, r2
 8007aca:	fa04 f202 	lsl.w	r2, r4, r2
 8007ace:	4552      	cmp	r2, sl
 8007ad0:	f040 84a3 	bne.w	800841a <__ieee754_pow+0xa1a>
 8007ad4:	f004 0401 	and.w	r4, r4, #1
 8007ad8:	f1c4 0402 	rsb	r4, r4, #2
 8007adc:	4a6d      	ldr	r2, [pc, #436]	@ (8007c94 <__ieee754_pow+0x294>)
 8007ade:	4592      	cmp	sl, r2
 8007ae0:	d12e      	bne.n	8007b40 <__ieee754_pow+0x140>
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	f280 8494 	bge.w	8008412 <__ieee754_pow+0xa12>
 8007aea:	496a      	ldr	r1, [pc, #424]	@ (8007c94 <__ieee754_pow+0x294>)
 8007aec:	4632      	mov	r2, r6
 8007aee:	463b      	mov	r3, r7
 8007af0:	2000      	movs	r0, #0
 8007af2:	f7f8 feab 	bl	800084c <__aeabi_ddiv>
 8007af6:	e7a0      	b.n	8007a3a <__ieee754_pow+0x3a>
 8007af8:	2400      	movs	r4, #0
 8007afa:	bbc1      	cbnz	r1, 8007b6e <__ieee754_pow+0x16e>
 8007afc:	4a63      	ldr	r2, [pc, #396]	@ (8007c8c <__ieee754_pow+0x28c>)
 8007afe:	4592      	cmp	sl, r2
 8007b00:	d1ec      	bne.n	8007adc <__ieee754_pow+0xdc>
 8007b02:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007b06:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	f000 8479 	beq.w	8008402 <__ieee754_pow+0xa02>
 8007b10:	4b61      	ldr	r3, [pc, #388]	@ (8007c98 <__ieee754_pow+0x298>)
 8007b12:	4598      	cmp	r8, r3
 8007b14:	d908      	bls.n	8007b28 <__ieee754_pow+0x128>
 8007b16:	f1b9 0f00 	cmp.w	r9, #0
 8007b1a:	f2c0 8476 	blt.w	800840a <__ieee754_pow+0xa0a>
 8007b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b22:	e78a      	b.n	8007a3a <__ieee754_pow+0x3a>
 8007b24:	2402      	movs	r4, #2
 8007b26:	e7e8      	b.n	8007afa <__ieee754_pow+0xfa>
 8007b28:	f1b9 0f00 	cmp.w	r9, #0
 8007b2c:	f04f 0000 	mov.w	r0, #0
 8007b30:	f04f 0100 	mov.w	r1, #0
 8007b34:	da81      	bge.n	8007a3a <__ieee754_pow+0x3a>
 8007b36:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007b3a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007b3e:	e77c      	b.n	8007a3a <__ieee754_pow+0x3a>
 8007b40:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8007b44:	d106      	bne.n	8007b54 <__ieee754_pow+0x154>
 8007b46:	4632      	mov	r2, r6
 8007b48:	463b      	mov	r3, r7
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	f7f8 fd53 	bl	80005f8 <__aeabi_dmul>
 8007b52:	e772      	b.n	8007a3a <__ieee754_pow+0x3a>
 8007b54:	4a51      	ldr	r2, [pc, #324]	@ (8007c9c <__ieee754_pow+0x29c>)
 8007b56:	4591      	cmp	r9, r2
 8007b58:	d109      	bne.n	8007b6e <__ieee754_pow+0x16e>
 8007b5a:	2d00      	cmp	r5, #0
 8007b5c:	db07      	blt.n	8007b6e <__ieee754_pow+0x16e>
 8007b5e:	ec47 6b10 	vmov	d0, r6, r7
 8007b62:	b011      	add	sp, #68	@ 0x44
 8007b64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	f7ff be6e 	b.w	8007848 <__ieee754_sqrt>
 8007b6c:	2400      	movs	r4, #0
 8007b6e:	ec47 6b10 	vmov	d0, r6, r7
 8007b72:	9302      	str	r3, [sp, #8]
 8007b74:	f000 fc88 	bl	8008488 <fabs>
 8007b78:	9b02      	ldr	r3, [sp, #8]
 8007b7a:	ec51 0b10 	vmov	r0, r1, d0
 8007b7e:	bb53      	cbnz	r3, 8007bd6 <__ieee754_pow+0x1d6>
 8007b80:	4b44      	ldr	r3, [pc, #272]	@ (8007c94 <__ieee754_pow+0x294>)
 8007b82:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d002      	beq.n	8007b90 <__ieee754_pow+0x190>
 8007b8a:	f1b8 0f00 	cmp.w	r8, #0
 8007b8e:	d122      	bne.n	8007bd6 <__ieee754_pow+0x1d6>
 8007b90:	f1b9 0f00 	cmp.w	r9, #0
 8007b94:	da05      	bge.n	8007ba2 <__ieee754_pow+0x1a2>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	493d      	ldr	r1, [pc, #244]	@ (8007c94 <__ieee754_pow+0x294>)
 8007b9e:	f7f8 fe55 	bl	800084c <__aeabi_ddiv>
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	f6bf af49 	bge.w	8007a3a <__ieee754_pow+0x3a>
 8007ba8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007bac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007bb0:	ea58 0804 	orrs.w	r8, r8, r4
 8007bb4:	d108      	bne.n	8007bc8 <__ieee754_pow+0x1c8>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f7f8 fb63 	bl	8000288 <__aeabi_dsub>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	e794      	b.n	8007af2 <__ieee754_pow+0xf2>
 8007bc8:	2c01      	cmp	r4, #1
 8007bca:	f47f af36 	bne.w	8007a3a <__ieee754_pow+0x3a>
 8007bce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	e731      	b.n	8007a3a <__ieee754_pow+0x3a>
 8007bd6:	0feb      	lsrs	r3, r5, #31
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	ea53 0204 	orrs.w	r2, r3, r4
 8007bde:	d102      	bne.n	8007be6 <__ieee754_pow+0x1e6>
 8007be0:	4632      	mov	r2, r6
 8007be2:	463b      	mov	r3, r7
 8007be4:	e7e9      	b.n	8007bba <__ieee754_pow+0x1ba>
 8007be6:	3c01      	subs	r4, #1
 8007be8:	431c      	orrs	r4, r3
 8007bea:	d016      	beq.n	8007c1a <__ieee754_pow+0x21a>
 8007bec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007c78 <__ieee754_pow+0x278>
 8007bf0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007bf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bf8:	f240 8112 	bls.w	8007e20 <__ieee754_pow+0x420>
 8007bfc:	4b28      	ldr	r3, [pc, #160]	@ (8007ca0 <__ieee754_pow+0x2a0>)
 8007bfe:	459a      	cmp	sl, r3
 8007c00:	4b25      	ldr	r3, [pc, #148]	@ (8007c98 <__ieee754_pow+0x298>)
 8007c02:	d916      	bls.n	8007c32 <__ieee754_pow+0x232>
 8007c04:	4598      	cmp	r8, r3
 8007c06:	d80b      	bhi.n	8007c20 <__ieee754_pow+0x220>
 8007c08:	f1b9 0f00 	cmp.w	r9, #0
 8007c0c:	da0b      	bge.n	8007c26 <__ieee754_pow+0x226>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	b011      	add	sp, #68	@ 0x44
 8007c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c16:	f000 bcf3 	b.w	8008600 <__math_oflow>
 8007c1a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007c80 <__ieee754_pow+0x280>
 8007c1e:	e7e7      	b.n	8007bf0 <__ieee754_pow+0x1f0>
 8007c20:	f1b9 0f00 	cmp.w	r9, #0
 8007c24:	dcf3      	bgt.n	8007c0e <__ieee754_pow+0x20e>
 8007c26:	2000      	movs	r0, #0
 8007c28:	b011      	add	sp, #68	@ 0x44
 8007c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2e:	f000 bcdf 	b.w	80085f0 <__math_uflow>
 8007c32:	4598      	cmp	r8, r3
 8007c34:	d20c      	bcs.n	8007c50 <__ieee754_pow+0x250>
 8007c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f7f8 ff4d 	bl	8000adc <__aeabi_dcmplt>
 8007c42:	3800      	subs	r0, #0
 8007c44:	bf18      	it	ne
 8007c46:	2001      	movne	r0, #1
 8007c48:	f1b9 0f00 	cmp.w	r9, #0
 8007c4c:	daec      	bge.n	8007c28 <__ieee754_pow+0x228>
 8007c4e:	e7df      	b.n	8007c10 <__ieee754_pow+0x210>
 8007c50:	4b10      	ldr	r3, [pc, #64]	@ (8007c94 <__ieee754_pow+0x294>)
 8007c52:	4598      	cmp	r8, r3
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	d924      	bls.n	8007ca4 <__ieee754_pow+0x2a4>
 8007c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f7f8 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8007c64:	3800      	subs	r0, #0
 8007c66:	bf18      	it	ne
 8007c68:	2001      	movne	r0, #1
 8007c6a:	f1b9 0f00 	cmp.w	r9, #0
 8007c6e:	dccf      	bgt.n	8007c10 <__ieee754_pow+0x210>
 8007c70:	e7da      	b.n	8007c28 <__ieee754_pow+0x228>
 8007c72:	bf00      	nop
 8007c74:	f3af 8000 	nop.w
 8007c78:	00000000 	.word	0x00000000
 8007c7c:	3ff00000 	.word	0x3ff00000
 8007c80:	00000000 	.word	0x00000000
 8007c84:	bff00000 	.word	0xbff00000
 8007c88:	fff00000 	.word	0xfff00000
 8007c8c:	7ff00000 	.word	0x7ff00000
 8007c90:	433fffff 	.word	0x433fffff
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	3fefffff 	.word	0x3fefffff
 8007c9c:	3fe00000 	.word	0x3fe00000
 8007ca0:	43f00000 	.word	0x43f00000
 8007ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e10 <__ieee754_pow+0x410>)
 8007ca6:	f7f8 faef 	bl	8000288 <__aeabi_dsub>
 8007caa:	a351      	add	r3, pc, #324	@ (adr r3, 8007df0 <__ieee754_pow+0x3f0>)
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	f7f8 fca0 	bl	80005f8 <__aeabi_dmul>
 8007cb8:	a34f      	add	r3, pc, #316	@ (adr r3, 8007df8 <__ieee754_pow+0x3f8>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7f8 fc97 	bl	80005f8 <__aeabi_dmul>
 8007cca:	4b52      	ldr	r3, [pc, #328]	@ (8007e14 <__ieee754_pow+0x414>)
 8007ccc:	4682      	mov	sl, r0
 8007cce:	468b      	mov	fp, r1
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	f7f8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	a148      	add	r1, pc, #288	@ (adr r1, 8007e00 <__ieee754_pow+0x400>)
 8007ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ce4:	f7f8 fad0 	bl	8000288 <__aeabi_dsub>
 8007ce8:	4622      	mov	r2, r4
 8007cea:	462b      	mov	r3, r5
 8007cec:	f7f8 fc84 	bl	80005f8 <__aeabi_dmul>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	4948      	ldr	r1, [pc, #288]	@ (8007e18 <__ieee754_pow+0x418>)
 8007cf8:	f7f8 fac6 	bl	8000288 <__aeabi_dsub>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4680      	mov	r8, r0
 8007d00:	4689      	mov	r9, r1
 8007d02:	462b      	mov	r3, r5
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fc76 	bl	80005f8 <__aeabi_dmul>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 fc70 	bl	80005f8 <__aeabi_dmul>
 8007d18:	a33b      	add	r3, pc, #236	@ (adr r3, 8007e08 <__ieee754_pow+0x408>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f7f8 fc6b 	bl	80005f8 <__aeabi_dmul>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4650      	mov	r0, sl
 8007d28:	4659      	mov	r1, fp
 8007d2a:	f7f8 faad 	bl	8000288 <__aeabi_dsub>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4680      	mov	r8, r0
 8007d34:	4689      	mov	r9, r1
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 faa7 	bl	800028c <__adddf3>
 8007d3e:	2400      	movs	r4, #0
 8007d40:	4632      	mov	r2, r6
 8007d42:	463b      	mov	r3, r7
 8007d44:	4620      	mov	r0, r4
 8007d46:	460d      	mov	r5, r1
 8007d48:	f7f8 fa9e 	bl	8000288 <__aeabi_dsub>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4640      	mov	r0, r8
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 fa98 	bl	8000288 <__aeabi_dsub>
 8007d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d60:	2300      	movs	r3, #0
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007d68:	4606      	mov	r6, r0
 8007d6a:	460f      	mov	r7, r1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	465b      	mov	r3, fp
 8007d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d74:	f7f8 fa88 	bl	8000288 <__aeabi_dsub>
 8007d78:	4622      	mov	r2, r4
 8007d7a:	462b      	mov	r3, r5
 8007d7c:	f7f8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8007d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d84:	4680      	mov	r8, r0
 8007d86:	4689      	mov	r9, r1
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fc34 	bl	80005f8 <__aeabi_dmul>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4640      	mov	r0, r8
 8007d96:	4649      	mov	r1, r9
 8007d98:	f7f8 fa78 	bl	800028c <__adddf3>
 8007d9c:	4652      	mov	r2, sl
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4606      	mov	r6, r0
 8007da2:	460f      	mov	r7, r1
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fc26 	bl	80005f8 <__aeabi_dmul>
 8007dac:	460b      	mov	r3, r1
 8007dae:	4602      	mov	r2, r0
 8007db0:	4680      	mov	r8, r0
 8007db2:	4689      	mov	r9, r1
 8007db4:	4630      	mov	r0, r6
 8007db6:	4639      	mov	r1, r7
 8007db8:	f7f8 fa68 	bl	800028c <__adddf3>
 8007dbc:	4b17      	ldr	r3, [pc, #92]	@ (8007e1c <__ieee754_pow+0x41c>)
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	460d      	mov	r5, r1
 8007dc4:	468a      	mov	sl, r1
 8007dc6:	468b      	mov	fp, r1
 8007dc8:	f340 82ef 	ble.w	80083aa <__ieee754_pow+0x9aa>
 8007dcc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007dd0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007dd4:	4303      	orrs	r3, r0
 8007dd6:	f000 81e8 	beq.w	80081aa <__ieee754_pow+0x7aa>
 8007dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dde:	2200      	movs	r2, #0
 8007de0:	2300      	movs	r3, #0
 8007de2:	f7f8 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8007de6:	3800      	subs	r0, #0
 8007de8:	bf18      	it	ne
 8007dea:	2001      	movne	r0, #1
 8007dec:	e710      	b.n	8007c10 <__ieee754_pow+0x210>
 8007dee:	bf00      	nop
 8007df0:	60000000 	.word	0x60000000
 8007df4:	3ff71547 	.word	0x3ff71547
 8007df8:	f85ddf44 	.word	0xf85ddf44
 8007dfc:	3e54ae0b 	.word	0x3e54ae0b
 8007e00:	55555555 	.word	0x55555555
 8007e04:	3fd55555 	.word	0x3fd55555
 8007e08:	652b82fe 	.word	0x652b82fe
 8007e0c:	3ff71547 	.word	0x3ff71547
 8007e10:	3ff00000 	.word	0x3ff00000
 8007e14:	3fd00000 	.word	0x3fd00000
 8007e18:	3fe00000 	.word	0x3fe00000
 8007e1c:	408fffff 	.word	0x408fffff
 8007e20:	4bd5      	ldr	r3, [pc, #852]	@ (8008178 <__ieee754_pow+0x778>)
 8007e22:	402b      	ands	r3, r5
 8007e24:	2200      	movs	r2, #0
 8007e26:	b92b      	cbnz	r3, 8007e34 <__ieee754_pow+0x434>
 8007e28:	4bd4      	ldr	r3, [pc, #848]	@ (800817c <__ieee754_pow+0x77c>)
 8007e2a:	f7f8 fbe5 	bl	80005f8 <__aeabi_dmul>
 8007e2e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007e32:	468b      	mov	fp, r1
 8007e34:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007e38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007e3c:	4413      	add	r3, r2
 8007e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e40:	4bcf      	ldr	r3, [pc, #828]	@ (8008180 <__ieee754_pow+0x780>)
 8007e42:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007e46:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007e4a:	459b      	cmp	fp, r3
 8007e4c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007e50:	dd08      	ble.n	8007e64 <__ieee754_pow+0x464>
 8007e52:	4bcc      	ldr	r3, [pc, #816]	@ (8008184 <__ieee754_pow+0x784>)
 8007e54:	459b      	cmp	fp, r3
 8007e56:	f340 81a5 	ble.w	80081a4 <__ieee754_pow+0x7a4>
 8007e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e60:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007e64:	f04f 0a00 	mov.w	sl, #0
 8007e68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007e6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e6e:	4bc6      	ldr	r3, [pc, #792]	@ (8008188 <__ieee754_pow+0x788>)
 8007e70:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e74:	ed93 7b00 	vldr	d7, [r3]
 8007e78:	4629      	mov	r1, r5
 8007e7a:	ec53 2b17 	vmov	r2, r3, d7
 8007e7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e86:	f7f8 f9ff 	bl	8000288 <__aeabi_dsub>
 8007e8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e96:	f7f8 f9f9 	bl	800028c <__adddf3>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	49ba      	ldr	r1, [pc, #744]	@ (800818c <__ieee754_pow+0x78c>)
 8007ea2:	f7f8 fcd3 	bl	800084c <__aeabi_ddiv>
 8007ea6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4630      	mov	r0, r6
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	f7f8 fba1 	bl	80005f8 <__aeabi_dmul>
 8007eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007ebe:	106d      	asrs	r5, r5, #1
 8007ec0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007ec4:	f04f 0b00 	mov.w	fp, #0
 8007ec8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007ecc:	4661      	mov	r1, ip
 8007ece:	2200      	movs	r2, #0
 8007ed0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007ed4:	4658      	mov	r0, fp
 8007ed6:	46e1      	mov	r9, ip
 8007ed8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007edc:	4614      	mov	r4, r2
 8007ede:	461d      	mov	r5, r3
 8007ee0:	f7f8 fb8a 	bl	80005f8 <__aeabi_dmul>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 f9cc 	bl	8000288 <__aeabi_dsub>
 8007ef0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7f8 f9c4 	bl	8000288 <__aeabi_dsub>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f08:	f7f8 f9be 	bl	8000288 <__aeabi_dsub>
 8007f0c:	465a      	mov	r2, fp
 8007f0e:	464b      	mov	r3, r9
 8007f10:	f7f8 fb72 	bl	80005f8 <__aeabi_dmul>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4630      	mov	r0, r6
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	f7f8 f9b4 	bl	8000288 <__aeabi_dsub>
 8007f20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f24:	f7f8 fb68 	bl	80005f8 <__aeabi_dmul>
 8007f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f30:	4610      	mov	r0, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	f7f8 fb60 	bl	80005f8 <__aeabi_dmul>
 8007f38:	a37d      	add	r3, pc, #500	@ (adr r3, 8008130 <__ieee754_pow+0x730>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	4604      	mov	r4, r0
 8007f40:	460d      	mov	r5, r1
 8007f42:	f7f8 fb59 	bl	80005f8 <__aeabi_dmul>
 8007f46:	a37c      	add	r3, pc, #496	@ (adr r3, 8008138 <__ieee754_pow+0x738>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 f99e 	bl	800028c <__adddf3>
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	f7f8 fb50 	bl	80005f8 <__aeabi_dmul>
 8007f58:	a379      	add	r3, pc, #484	@ (adr r3, 8008140 <__ieee754_pow+0x740>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 f995 	bl	800028c <__adddf3>
 8007f62:	4622      	mov	r2, r4
 8007f64:	462b      	mov	r3, r5
 8007f66:	f7f8 fb47 	bl	80005f8 <__aeabi_dmul>
 8007f6a:	a377      	add	r3, pc, #476	@ (adr r3, 8008148 <__ieee754_pow+0x748>)
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f7f8 f98c 	bl	800028c <__adddf3>
 8007f74:	4622      	mov	r2, r4
 8007f76:	462b      	mov	r3, r5
 8007f78:	f7f8 fb3e 	bl	80005f8 <__aeabi_dmul>
 8007f7c:	a374      	add	r3, pc, #464	@ (adr r3, 8008150 <__ieee754_pow+0x750>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f983 	bl	800028c <__adddf3>
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	f7f8 fb35 	bl	80005f8 <__aeabi_dmul>
 8007f8e:	a372      	add	r3, pc, #456	@ (adr r3, 8008158 <__ieee754_pow+0x758>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 f97a 	bl	800028c <__adddf3>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 fb28 	bl	80005f8 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fb22 	bl	80005f8 <__aeabi_dmul>
 8007fb4:	465a      	mov	r2, fp
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	460d      	mov	r5, r1
 8007fba:	464b      	mov	r3, r9
 8007fbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc0:	f7f8 f964 	bl	800028c <__adddf3>
 8007fc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fc8:	f7f8 fb16 	bl	80005f8 <__aeabi_dmul>
 8007fcc:	4622      	mov	r2, r4
 8007fce:	462b      	mov	r3, r5
 8007fd0:	f7f8 f95c 	bl	800028c <__adddf3>
 8007fd4:	465a      	mov	r2, fp
 8007fd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fda:	464b      	mov	r3, r9
 8007fdc:	4658      	mov	r0, fp
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7f8 fb0a 	bl	80005f8 <__aeabi_dmul>
 8007fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8008190 <__ieee754_pow+0x790>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	f7f8 f94e 	bl	800028c <__adddf3>
 8007ff0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ff4:	f7f8 f94a 	bl	800028c <__adddf3>
 8007ff8:	46d8      	mov	r8, fp
 8007ffa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007ffe:	460d      	mov	r5, r1
 8008000:	465a      	mov	r2, fp
 8008002:	460b      	mov	r3, r1
 8008004:	4640      	mov	r0, r8
 8008006:	4649      	mov	r1, r9
 8008008:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800800c:	f7f8 faf4 	bl	80005f8 <__aeabi_dmul>
 8008010:	465c      	mov	r4, fp
 8008012:	4680      	mov	r8, r0
 8008014:	4689      	mov	r9, r1
 8008016:	4b5e      	ldr	r3, [pc, #376]	@ (8008190 <__ieee754_pow+0x790>)
 8008018:	2200      	movs	r2, #0
 800801a:	4620      	mov	r0, r4
 800801c:	4629      	mov	r1, r5
 800801e:	f7f8 f933 	bl	8000288 <__aeabi_dsub>
 8008022:	4632      	mov	r2, r6
 8008024:	463b      	mov	r3, r7
 8008026:	f7f8 f92f 	bl	8000288 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008032:	f7f8 f929 	bl	8000288 <__aeabi_dsub>
 8008036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800803a:	f7f8 fadd 	bl	80005f8 <__aeabi_dmul>
 800803e:	4622      	mov	r2, r4
 8008040:	4606      	mov	r6, r0
 8008042:	460f      	mov	r7, r1
 8008044:	462b      	mov	r3, r5
 8008046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800804a:	f7f8 fad5 	bl	80005f8 <__aeabi_dmul>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f919 	bl	800028c <__adddf3>
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 f911 	bl	800028c <__adddf3>
 800806a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800806e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008160 <__ieee754_pow+0x760>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	4658      	mov	r0, fp
 8008076:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800807a:	460d      	mov	r5, r1
 800807c:	f7f8 fabc 	bl	80005f8 <__aeabi_dmul>
 8008080:	465c      	mov	r4, fp
 8008082:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008086:	4642      	mov	r2, r8
 8008088:	464b      	mov	r3, r9
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 f8fb 	bl	8000288 <__aeabi_dsub>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 f8f5 	bl	8000288 <__aeabi_dsub>
 800809e:	a332      	add	r3, pc, #200	@ (adr r3, 8008168 <__ieee754_pow+0x768>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 faa8 	bl	80005f8 <__aeabi_dmul>
 80080a8:	a331      	add	r3, pc, #196	@ (adr r3, 8008170 <__ieee754_pow+0x770>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	4620      	mov	r0, r4
 80080b4:	4629      	mov	r1, r5
 80080b6:	f7f8 fa9f 	bl	80005f8 <__aeabi_dmul>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4630      	mov	r0, r6
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 f8e3 	bl	800028c <__adddf3>
 80080c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080c8:	4b32      	ldr	r3, [pc, #200]	@ (8008194 <__ieee754_pow+0x794>)
 80080ca:	4413      	add	r3, r2
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 f8dc 	bl	800028c <__adddf3>
 80080d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080da:	f7f8 fa23 	bl	8000524 <__aeabi_i2d>
 80080de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080e0:	4b2d      	ldr	r3, [pc, #180]	@ (8008198 <__ieee754_pow+0x798>)
 80080e2:	4413      	add	r3, r2
 80080e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080e8:	4606      	mov	r6, r0
 80080ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080ee:	460f      	mov	r7, r1
 80080f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080f4:	f7f8 f8ca 	bl	800028c <__adddf3>
 80080f8:	4642      	mov	r2, r8
 80080fa:	464b      	mov	r3, r9
 80080fc:	f7f8 f8c6 	bl	800028c <__adddf3>
 8008100:	4632      	mov	r2, r6
 8008102:	463b      	mov	r3, r7
 8008104:	f7f8 f8c2 	bl	800028c <__adddf3>
 8008108:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800810c:	4632      	mov	r2, r6
 800810e:	463b      	mov	r3, r7
 8008110:	4658      	mov	r0, fp
 8008112:	460d      	mov	r5, r1
 8008114:	f7f8 f8b8 	bl	8000288 <__aeabi_dsub>
 8008118:	4642      	mov	r2, r8
 800811a:	464b      	mov	r3, r9
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008124:	f7f8 f8b0 	bl	8000288 <__aeabi_dsub>
 8008128:	465c      	mov	r4, fp
 800812a:	4602      	mov	r2, r0
 800812c:	e036      	b.n	800819c <__ieee754_pow+0x79c>
 800812e:	bf00      	nop
 8008130:	4a454eef 	.word	0x4a454eef
 8008134:	3fca7e28 	.word	0x3fca7e28
 8008138:	93c9db65 	.word	0x93c9db65
 800813c:	3fcd864a 	.word	0x3fcd864a
 8008140:	a91d4101 	.word	0xa91d4101
 8008144:	3fd17460 	.word	0x3fd17460
 8008148:	518f264d 	.word	0x518f264d
 800814c:	3fd55555 	.word	0x3fd55555
 8008150:	db6fabff 	.word	0xdb6fabff
 8008154:	3fdb6db6 	.word	0x3fdb6db6
 8008158:	33333303 	.word	0x33333303
 800815c:	3fe33333 	.word	0x3fe33333
 8008160:	e0000000 	.word	0xe0000000
 8008164:	3feec709 	.word	0x3feec709
 8008168:	dc3a03fd 	.word	0xdc3a03fd
 800816c:	3feec709 	.word	0x3feec709
 8008170:	145b01f5 	.word	0x145b01f5
 8008174:	be3e2fe0 	.word	0xbe3e2fe0
 8008178:	7ff00000 	.word	0x7ff00000
 800817c:	43400000 	.word	0x43400000
 8008180:	0003988e 	.word	0x0003988e
 8008184:	000bb679 	.word	0x000bb679
 8008188:	080088d0 	.word	0x080088d0
 800818c:	3ff00000 	.word	0x3ff00000
 8008190:	40080000 	.word	0x40080000
 8008194:	080088b0 	.word	0x080088b0
 8008198:	080088c0 	.word	0x080088c0
 800819c:	460b      	mov	r3, r1
 800819e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a2:	e5d7      	b.n	8007d54 <__ieee754_pow+0x354>
 80081a4:	f04f 0a01 	mov.w	sl, #1
 80081a8:	e65e      	b.n	8007e68 <__ieee754_pow+0x468>
 80081aa:	a3b4      	add	r3, pc, #720	@ (adr r3, 800847c <__ieee754_pow+0xa7c>)
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	4630      	mov	r0, r6
 80081b2:	4639      	mov	r1, r7
 80081b4:	f7f8 f86a 	bl	800028c <__adddf3>
 80081b8:	4642      	mov	r2, r8
 80081ba:	e9cd 0100 	strd	r0, r1, [sp]
 80081be:	464b      	mov	r3, r9
 80081c0:	4620      	mov	r0, r4
 80081c2:	4629      	mov	r1, r5
 80081c4:	f7f8 f860 	bl	8000288 <__aeabi_dsub>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d0:	f7f8 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f47f ae00 	bne.w	8007dda <__ieee754_pow+0x3da>
 80081da:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80081de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80081e2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80081e6:	fa43 fa0a 	asr.w	sl, r3, sl
 80081ea:	44da      	add	sl, fp
 80081ec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80081f0:	489d      	ldr	r0, [pc, #628]	@ (8008468 <__ieee754_pow+0xa68>)
 80081f2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80081f6:	4108      	asrs	r0, r1
 80081f8:	ea00 030a 	and.w	r3, r0, sl
 80081fc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008200:	f1c1 0114 	rsb	r1, r1, #20
 8008204:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008208:	fa4a fa01 	asr.w	sl, sl, r1
 800820c:	f1bb 0f00 	cmp.w	fp, #0
 8008210:	4640      	mov	r0, r8
 8008212:	4649      	mov	r1, r9
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	bfb8      	it	lt
 800821a:	f1ca 0a00 	rsblt	sl, sl, #0
 800821e:	f7f8 f833 	bl	8000288 <__aeabi_dsub>
 8008222:	4680      	mov	r8, r0
 8008224:	4689      	mov	r9, r1
 8008226:	4632      	mov	r2, r6
 8008228:	463b      	mov	r3, r7
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	f7f8 f82d 	bl	800028c <__adddf3>
 8008232:	2400      	movs	r4, #0
 8008234:	a37c      	add	r3, pc, #496	@ (adr r3, 8008428 <__ieee754_pow+0xa28>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	4620      	mov	r0, r4
 800823c:	460d      	mov	r5, r1
 800823e:	f7f8 f9db 	bl	80005f8 <__aeabi_dmul>
 8008242:	4642      	mov	r2, r8
 8008244:	e9cd 0100 	strd	r0, r1, [sp]
 8008248:	464b      	mov	r3, r9
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 f81b 	bl	8000288 <__aeabi_dsub>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 f815 	bl	8000288 <__aeabi_dsub>
 800825e:	a374      	add	r3, pc, #464	@ (adr r3, 8008430 <__ieee754_pow+0xa30>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f8 f9c8 	bl	80005f8 <__aeabi_dmul>
 8008268:	a373      	add	r3, pc, #460	@ (adr r3, 8008438 <__ieee754_pow+0xa38>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	4680      	mov	r8, r0
 8008270:	4689      	mov	r9, r1
 8008272:	4620      	mov	r0, r4
 8008274:	4629      	mov	r1, r5
 8008276:	f7f8 f9bf 	bl	80005f8 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4640      	mov	r0, r8
 8008280:	4649      	mov	r1, r9
 8008282:	f7f8 f803 	bl	800028c <__adddf3>
 8008286:	4604      	mov	r4, r0
 8008288:	460d      	mov	r5, r1
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008292:	f7f7 fffb 	bl	800028c <__adddf3>
 8008296:	e9dd 2300 	ldrd	r2, r3, [sp]
 800829a:	4680      	mov	r8, r0
 800829c:	4689      	mov	r9, r1
 800829e:	f7f7 fff3 	bl	8000288 <__aeabi_dsub>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4620      	mov	r0, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f7 ffed 	bl	8000288 <__aeabi_dsub>
 80082ae:	4642      	mov	r2, r8
 80082b0:	4606      	mov	r6, r0
 80082b2:	460f      	mov	r7, r1
 80082b4:	464b      	mov	r3, r9
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f8 f99d 	bl	80005f8 <__aeabi_dmul>
 80082be:	a360      	add	r3, pc, #384	@ (adr r3, 8008440 <__ieee754_pow+0xa40>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4604      	mov	r4, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	f7f8 f996 	bl	80005f8 <__aeabi_dmul>
 80082cc:	a35e      	add	r3, pc, #376	@ (adr r3, 8008448 <__ieee754_pow+0xa48>)
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f7f7 ffd9 	bl	8000288 <__aeabi_dsub>
 80082d6:	4622      	mov	r2, r4
 80082d8:	462b      	mov	r3, r5
 80082da:	f7f8 f98d 	bl	80005f8 <__aeabi_dmul>
 80082de:	a35c      	add	r3, pc, #368	@ (adr r3, 8008450 <__ieee754_pow+0xa50>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f7 ffd2 	bl	800028c <__adddf3>
 80082e8:	4622      	mov	r2, r4
 80082ea:	462b      	mov	r3, r5
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	a359      	add	r3, pc, #356	@ (adr r3, 8008458 <__ieee754_pow+0xa58>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f7 ffc7 	bl	8000288 <__aeabi_dsub>
 80082fa:	4622      	mov	r2, r4
 80082fc:	462b      	mov	r3, r5
 80082fe:	f7f8 f97b 	bl	80005f8 <__aeabi_dmul>
 8008302:	a357      	add	r3, pc, #348	@ (adr r3, 8008460 <__ieee754_pow+0xa60>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f7 ffc0 	bl	800028c <__adddf3>
 800830c:	4622      	mov	r2, r4
 800830e:	462b      	mov	r3, r5
 8008310:	f7f8 f972 	bl	80005f8 <__aeabi_dmul>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4640      	mov	r0, r8
 800831a:	4649      	mov	r1, r9
 800831c:	f7f7 ffb4 	bl	8000288 <__aeabi_dsub>
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4640      	mov	r0, r8
 800832a:	4649      	mov	r1, r9
 800832c:	f7f8 f964 	bl	80005f8 <__aeabi_dmul>
 8008330:	2200      	movs	r2, #0
 8008332:	e9cd 0100 	strd	r0, r1, [sp]
 8008336:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800833a:	4620      	mov	r0, r4
 800833c:	4629      	mov	r1, r5
 800833e:	f7f7 ffa3 	bl	8000288 <__aeabi_dsub>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	e9dd 0100 	ldrd	r0, r1, [sp]
 800834a:	f7f8 fa7f 	bl	800084c <__aeabi_ddiv>
 800834e:	4632      	mov	r2, r6
 8008350:	4604      	mov	r4, r0
 8008352:	460d      	mov	r5, r1
 8008354:	463b      	mov	r3, r7
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	f7f8 f94d 	bl	80005f8 <__aeabi_dmul>
 800835e:	4632      	mov	r2, r6
 8008360:	463b      	mov	r3, r7
 8008362:	f7f7 ff93 	bl	800028c <__adddf3>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4620      	mov	r0, r4
 800836c:	4629      	mov	r1, r5
 800836e:	f7f7 ff8b 	bl	8000288 <__aeabi_dsub>
 8008372:	4642      	mov	r2, r8
 8008374:	464b      	mov	r3, r9
 8008376:	f7f7 ff87 	bl	8000288 <__aeabi_dsub>
 800837a:	460b      	mov	r3, r1
 800837c:	4602      	mov	r2, r0
 800837e:	493b      	ldr	r1, [pc, #236]	@ (800846c <__ieee754_pow+0xa6c>)
 8008380:	2000      	movs	r0, #0
 8008382:	f7f7 ff81 	bl	8000288 <__aeabi_dsub>
 8008386:	ec41 0b10 	vmov	d0, r0, r1
 800838a:	ee10 3a90 	vmov	r3, s1
 800838e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008396:	da30      	bge.n	80083fa <__ieee754_pow+0x9fa>
 8008398:	4650      	mov	r0, sl
 800839a:	f000 f87d 	bl	8008498 <scalbn>
 800839e:	ec51 0b10 	vmov	r0, r1, d0
 80083a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083a6:	f7ff bbd2 	b.w	8007b4e <__ieee754_pow+0x14e>
 80083aa:	4c31      	ldr	r4, [pc, #196]	@ (8008470 <__ieee754_pow+0xa70>)
 80083ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d91a      	bls.n	80083ea <__ieee754_pow+0x9ea>
 80083b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008474 <__ieee754_pow+0xa74>)
 80083b6:	440b      	add	r3, r1
 80083b8:	4303      	orrs	r3, r0
 80083ba:	d009      	beq.n	80083d0 <__ieee754_pow+0x9d0>
 80083bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	2300      	movs	r3, #0
 80083c4:	f7f8 fb8a 	bl	8000adc <__aeabi_dcmplt>
 80083c8:	3800      	subs	r0, #0
 80083ca:	bf18      	it	ne
 80083cc:	2001      	movne	r0, #1
 80083ce:	e42b      	b.n	8007c28 <__ieee754_pow+0x228>
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	f7f7 ff58 	bl	8000288 <__aeabi_dsub>
 80083d8:	4632      	mov	r2, r6
 80083da:	463b      	mov	r3, r7
 80083dc:	f7f8 fb92 	bl	8000b04 <__aeabi_dcmpge>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1eb      	bne.n	80083bc <__ieee754_pow+0x9bc>
 80083e4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008484 <__ieee754_pow+0xa84>
 80083e8:	e6f7      	b.n	80081da <__ieee754_pow+0x7da>
 80083ea:	469a      	mov	sl, r3
 80083ec:	4b22      	ldr	r3, [pc, #136]	@ (8008478 <__ieee754_pow+0xa78>)
 80083ee:	459a      	cmp	sl, r3
 80083f0:	f63f aef3 	bhi.w	80081da <__ieee754_pow+0x7da>
 80083f4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80083f8:	e715      	b.n	8008226 <__ieee754_pow+0x826>
 80083fa:	ec51 0b10 	vmov	r0, r1, d0
 80083fe:	4619      	mov	r1, r3
 8008400:	e7cf      	b.n	80083a2 <__ieee754_pow+0x9a2>
 8008402:	491a      	ldr	r1, [pc, #104]	@ (800846c <__ieee754_pow+0xa6c>)
 8008404:	2000      	movs	r0, #0
 8008406:	f7ff bb18 	b.w	8007a3a <__ieee754_pow+0x3a>
 800840a:	2000      	movs	r0, #0
 800840c:	2100      	movs	r1, #0
 800840e:	f7ff bb14 	b.w	8007a3a <__ieee754_pow+0x3a>
 8008412:	4630      	mov	r0, r6
 8008414:	4639      	mov	r1, r7
 8008416:	f7ff bb10 	b.w	8007a3a <__ieee754_pow+0x3a>
 800841a:	460c      	mov	r4, r1
 800841c:	f7ff bb5e 	b.w	8007adc <__ieee754_pow+0xdc>
 8008420:	2400      	movs	r4, #0
 8008422:	f7ff bb49 	b.w	8007ab8 <__ieee754_pow+0xb8>
 8008426:	bf00      	nop
 8008428:	00000000 	.word	0x00000000
 800842c:	3fe62e43 	.word	0x3fe62e43
 8008430:	fefa39ef 	.word	0xfefa39ef
 8008434:	3fe62e42 	.word	0x3fe62e42
 8008438:	0ca86c39 	.word	0x0ca86c39
 800843c:	be205c61 	.word	0xbe205c61
 8008440:	72bea4d0 	.word	0x72bea4d0
 8008444:	3e663769 	.word	0x3e663769
 8008448:	c5d26bf1 	.word	0xc5d26bf1
 800844c:	3ebbbd41 	.word	0x3ebbbd41
 8008450:	af25de2c 	.word	0xaf25de2c
 8008454:	3f11566a 	.word	0x3f11566a
 8008458:	16bebd93 	.word	0x16bebd93
 800845c:	3f66c16c 	.word	0x3f66c16c
 8008460:	5555553e 	.word	0x5555553e
 8008464:	3fc55555 	.word	0x3fc55555
 8008468:	fff00000 	.word	0xfff00000
 800846c:	3ff00000 	.word	0x3ff00000
 8008470:	4090cbff 	.word	0x4090cbff
 8008474:	3f6f3400 	.word	0x3f6f3400
 8008478:	3fe00000 	.word	0x3fe00000
 800847c:	652b82fe 	.word	0x652b82fe
 8008480:	3c971547 	.word	0x3c971547
 8008484:	4090cc00 	.word	0x4090cc00

08008488 <fabs>:
 8008488:	ec51 0b10 	vmov	r0, r1, d0
 800848c:	4602      	mov	r2, r0
 800848e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008492:	ec43 2b10 	vmov	d0, r2, r3
 8008496:	4770      	bx	lr

08008498 <scalbn>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	ec55 4b10 	vmov	r4, r5, d0
 800849e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80084a2:	4606      	mov	r6, r0
 80084a4:	462b      	mov	r3, r5
 80084a6:	b991      	cbnz	r1, 80084ce <scalbn+0x36>
 80084a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80084ac:	4323      	orrs	r3, r4
 80084ae:	d03d      	beq.n	800852c <scalbn+0x94>
 80084b0:	4b35      	ldr	r3, [pc, #212]	@ (8008588 <scalbn+0xf0>)
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	2200      	movs	r2, #0
 80084b8:	f7f8 f89e 	bl	80005f8 <__aeabi_dmul>
 80084bc:	4b33      	ldr	r3, [pc, #204]	@ (800858c <scalbn+0xf4>)
 80084be:	429e      	cmp	r6, r3
 80084c0:	4604      	mov	r4, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	da0f      	bge.n	80084e6 <scalbn+0x4e>
 80084c6:	a328      	add	r3, pc, #160	@ (adr r3, 8008568 <scalbn+0xd0>)
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	e01e      	b.n	800850c <scalbn+0x74>
 80084ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80084d2:	4291      	cmp	r1, r2
 80084d4:	d10b      	bne.n	80084ee <scalbn+0x56>
 80084d6:	4622      	mov	r2, r4
 80084d8:	4620      	mov	r0, r4
 80084da:	4629      	mov	r1, r5
 80084dc:	f7f7 fed6 	bl	800028c <__adddf3>
 80084e0:	4604      	mov	r4, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	e022      	b.n	800852c <scalbn+0x94>
 80084e6:	460b      	mov	r3, r1
 80084e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80084ec:	3936      	subs	r1, #54	@ 0x36
 80084ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80084f2:	4296      	cmp	r6, r2
 80084f4:	dd0d      	ble.n	8008512 <scalbn+0x7a>
 80084f6:	2d00      	cmp	r5, #0
 80084f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008570 <scalbn+0xd8>)
 80084fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084fe:	da02      	bge.n	8008506 <scalbn+0x6e>
 8008500:	a11d      	add	r1, pc, #116	@ (adr r1, 8008578 <scalbn+0xe0>)
 8008502:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008506:	a31a      	add	r3, pc, #104	@ (adr r3, 8008570 <scalbn+0xd8>)
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f7f8 f874 	bl	80005f8 <__aeabi_dmul>
 8008510:	e7e6      	b.n	80084e0 <scalbn+0x48>
 8008512:	1872      	adds	r2, r6, r1
 8008514:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008518:	428a      	cmp	r2, r1
 800851a:	dcec      	bgt.n	80084f6 <scalbn+0x5e>
 800851c:	2a00      	cmp	r2, #0
 800851e:	dd08      	ble.n	8008532 <scalbn+0x9a>
 8008520:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008524:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008528:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800852c:	ec45 4b10 	vmov	d0, r4, r5
 8008530:	bd70      	pop	{r4, r5, r6, pc}
 8008532:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008536:	da08      	bge.n	800854a <scalbn+0xb2>
 8008538:	2d00      	cmp	r5, #0
 800853a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008568 <scalbn+0xd0>)
 800853c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008540:	dac1      	bge.n	80084c6 <scalbn+0x2e>
 8008542:	a10f      	add	r1, pc, #60	@ (adr r1, 8008580 <scalbn+0xe8>)
 8008544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008548:	e7bd      	b.n	80084c6 <scalbn+0x2e>
 800854a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800854e:	3236      	adds	r2, #54	@ 0x36
 8008550:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008554:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008558:	4620      	mov	r0, r4
 800855a:	4b0d      	ldr	r3, [pc, #52]	@ (8008590 <scalbn+0xf8>)
 800855c:	4629      	mov	r1, r5
 800855e:	2200      	movs	r2, #0
 8008560:	e7d4      	b.n	800850c <scalbn+0x74>
 8008562:	bf00      	nop
 8008564:	f3af 8000 	nop.w
 8008568:	c2f8f359 	.word	0xc2f8f359
 800856c:	01a56e1f 	.word	0x01a56e1f
 8008570:	8800759c 	.word	0x8800759c
 8008574:	7e37e43c 	.word	0x7e37e43c
 8008578:	8800759c 	.word	0x8800759c
 800857c:	fe37e43c 	.word	0xfe37e43c
 8008580:	c2f8f359 	.word	0xc2f8f359
 8008584:	81a56e1f 	.word	0x81a56e1f
 8008588:	43500000 	.word	0x43500000
 800858c:	ffff3cb0 	.word	0xffff3cb0
 8008590:	3c900000 	.word	0x3c900000

08008594 <with_errno>:
 8008594:	b510      	push	{r4, lr}
 8008596:	ed2d 8b02 	vpush	{d8}
 800859a:	eeb0 8a40 	vmov.f32	s16, s0
 800859e:	eef0 8a60 	vmov.f32	s17, s1
 80085a2:	4604      	mov	r4, r0
 80085a4:	f7fe fb72 	bl	8006c8c <__errno>
 80085a8:	eeb0 0a48 	vmov.f32	s0, s16
 80085ac:	eef0 0a68 	vmov.f32	s1, s17
 80085b0:	ecbd 8b02 	vpop	{d8}
 80085b4:	6004      	str	r4, [r0, #0]
 80085b6:	bd10      	pop	{r4, pc}

080085b8 <xflow>:
 80085b8:	4603      	mov	r3, r0
 80085ba:	b507      	push	{r0, r1, r2, lr}
 80085bc:	ec51 0b10 	vmov	r0, r1, d0
 80085c0:	b183      	cbz	r3, 80085e4 <xflow+0x2c>
 80085c2:	4602      	mov	r2, r0
 80085c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085c8:	e9cd 2300 	strd	r2, r3, [sp]
 80085cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d0:	f7f8 f812 	bl	80005f8 <__aeabi_dmul>
 80085d4:	ec41 0b10 	vmov	d0, r0, r1
 80085d8:	2022      	movs	r0, #34	@ 0x22
 80085da:	b003      	add	sp, #12
 80085dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e0:	f7ff bfd8 	b.w	8008594 <with_errno>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	e7ee      	b.n	80085c8 <xflow+0x10>
 80085ea:	0000      	movs	r0, r0
 80085ec:	0000      	movs	r0, r0
	...

080085f0 <__math_uflow>:
 80085f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80085f8 <__math_uflow+0x8>
 80085f4:	f7ff bfe0 	b.w	80085b8 <xflow>
 80085f8:	00000000 	.word	0x00000000
 80085fc:	10000000 	.word	0x10000000

08008600 <__math_oflow>:
 8008600:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008608 <__math_oflow+0x8>
 8008604:	f7ff bfd8 	b.w	80085b8 <xflow>
 8008608:	00000000 	.word	0x00000000
 800860c:	70000000 	.word	0x70000000

08008610 <_init>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr

0800861c <_fini>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr
